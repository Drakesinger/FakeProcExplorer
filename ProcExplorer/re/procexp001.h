/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

#define __thiscall __cdecl // Test compile in C mode

signed int __stdcall Fake_ExpandEnvironmentStrings(WCHAR *pszPathName, DWORD dwLength, LPCWSTR lpszPathName);
BOOL __stdcall GetHtmlHelpXPathName(CHAR *pszPathName); // idb
int __stdcall Fake_HtmlHelp(int a1, int a2, int a3, int a4);
int sub_FD1200();
int dynamic_initializer_for__garrAccountInfo__();
int dynamic_initializer_for__gpszTipText__();
int sub_FD1260();
int sub_FD1270();
HCURSOR dynamic_initializer_for__ghHandCursor__();
int dynamic_initializer_for__dword_4F48E4__();
int dynamic_initializer_for__gpszSystemPathInfo__();
int dynamic_initializer_for__dword_4F48FC__();
int dynamic_initializer_for__gKeyNameMap__();
int dynamic_initializer_for__dword_4F48F0__();
HCURSOR dynamic_initializer_for__ghWaitCursor__();
int dynamic_initializer_for__dword_4F4C54__();
int dynamic_initializer_for__dword_4F4C50__();
int dynamic_initializer_for__gList5_gList6__();
int dynamic_initializer_for__gList1__();
int dynamic_initializer_for__gList2__();
int dynamic_initializer_for__gList3__();
int dynamic_initializer_for__gMap5__();
int sub_FD14A0();
int sub_FD14B0();
int sub_FD14C0();
int dynamic_initializer_for__gActiveScriptEventConsumer__();
int dynamic_initializer_for__gCommandLineEventConsumer__();
int dynamic_initializer_for__gMap6__();
ATOM dynamic_initializer_for__gAtomTreeListProperty__();
ATOM dynamic_initializer_for__gAtomTreeList__();
BOOL dynamic_initializer_for__gLogPixelSize__();
int dynamic_initializer_for__ghUxthemeModule__();
FARPROC dynamic_initializer_for__gpfnCloseThemeData__();
int (__stdcall *sub_FD15E0())(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pRect, LPCRECT pClipRect);
int (__stdcall *sub_FD1610())();
FARPROC sub_FD1640();
IAtlStringMgr *sub_FD1670();
int dynamic_initializer_for__gList4__();
FARPROC sub_FD16A0();
int dynamic_initializer_for__gList7__();
HANDLE dynamic_initializer_for__gProperties__();
DWORD sub_FD1700();
FARPROC sub_FD1CE0();
int dynamic_initializer_for__gPerformanceInfoInMemory__();
int dynamic_initializer_for__gPerformanceInfo__();
int dynamic_initializer_for__gNullString__();
int dynamic_initializer_for__gWbemServicesList__();
BOOL dynamic_initializer_for__gTime__();
int dynamic_initializer_for__gMap1__();
bool dynamic_initializer_for__gbBitmapOnRight__();
int dynamic_initializer_for__gDiskGraphInfo__();
int dynamic_initializer_for__gIOGraphInfo__();
int dynamic_initializer_for__gNetworkGraphInfo__();
int sub_FD1F20();
int sub_FD1F40();
int sub_FD1F60();
int sub_FD1F90();
int sub_FD1FC0();
int dynamic_initializer_for__gHttpInfo__();
int sub_FD2070();
int sub_FD2090();
int sub_FD20B0();
int sub_FD20D0();
int sub_FD20F0();
int sub_FD20FC();
int sub_FD2112();
int sub_FD211E();
int sub_FD212A();
int sub_FD2136();
int dynamic_initializer_for__ATL::_AtlBaseModule___();
_DWORD *__thiscall sub_FD2170(_DWORD *this);
void __thiscall sub_FD21A0(void ***this);
void __thiscall sub_FD21F0(tagPEStringStruct *this); // idb
CPEString *__thiscall CPEString::Reset2(CPEString *this, CPEString *a2); // idb
CPEString *__thiscall CPEString::Reset(CPEString *this, wchar_t *a2);
CPEString *__cdecl CPEString::Append(CPEString *str, CPEString *strText1, LPCWSTR lpszText2);
void __thiscall CPEString::InsertAt(CPEString *this, const wchar_t *lpszText, unsigned int dwPos, unsigned int dwLength);
void __cdecl sub_FD23D0(int a1, void *a2, void *a3);
void *__cdecl sub_FD2480(int a1, void *a2, wchar_t *psz, void *a4);
void __stdcall sub_FD2BC0(void **a1, void **a2);
char *__cdecl sub_FD2BF0(int a1, int a2);
void __thiscall sub_FD2C60(int *this);
void __cdecl sub_FD2CB0(int a1, void *a2, void *a3, LPCWSTR lpValueName);
void *__cdecl sub_FD2D60(int a1, void *a2, wchar_t *psz, LPCWSTR lpValueName, void *a5);
int __cdecl sub_FD3440(int a1, int a2, int a3);
wchar_t **__cdecl sub_FD34F0(std__vector *a1, const wchar_t **a2, wchar_t **a3); // idb
_DWORD *__thiscall sub_FD3530(void *this, void *a2);
wchar_t ***__thiscall sub_FD35A0(wchar_t ***this, const wchar_t ***a2);
BSTR *__thiscall _bstr_t::Data_t::Data_t(Data_t_bstr_t *this, _bstr_t *a2, _bstr_t *a3); // idb
void __thiscall sub_FD3750(void *); // idb
BSTR **__thiscall _bstr_t::_bstr_t(_bstr_t *this, OLECHAR *psz); // idb
int __thiscall sub_FD3820(int this);
void __thiscall sub_FD3850(void *); // idb
void __thiscall _bstr_t::_Free(_bstr_t *this); // idb
int *__thiscall sub_FD38F0(int *this, const wchar_t ***a2);
_bstr_t *__thiscall sub_FD3A50(_bstr_t *this, _bstr_t *a2);
EventItem *__thiscall _bstr_t::operator=(EventItem *this, OLECHAR *psz);
int __thiscall tagPEConfigFile::GetFileName(tagPEConfigFile *this); // idb
_bstr_t *__cdecl _bstr_t::operator+(_bstr_t *a1, OLECHAR *psz, _bstr_t *a2); // idb
_bstr_t *__thiscall _bstr_t::operator+(_bstr_t *this, _bstr_t *bstrRet, _bstr_t *a3); // idb
BOOL __thiscall sub_FD3C30(BSTR **this, BSTR **a2);
OLECHAR ***__thiscall _bstr_t::operator+=(_bstr_t *this, _bstr_t *a2); // idb
int __cdecl sub_FD3D40(int, int, int, int, int, int, WCHAR **ppv3, int);
int __cdecl sub_FD3FF0(int a1, DWORD dwValue, HANDLE Handle, DWORD dwFlags, CPEString *str1, CPEString *str2, CPEString *str3);
void __cdecl LoadSystemAccountInfo(HWND hWnd); // idb
char BackendThreadProc();
int __thiscall bstr_t::Data_t::Compare(Data_t_bstr_t *this, Data_t_bstr_t *str); // idb
errno_t __cdecl wcscpy_s(wchar_t *Src, wchar_t *Dst, rsize_t SizeInWords);
BOOL __cdecl TmAdjustPrivilege(LPCWSTR lpszName); // idb
int __cdecl sub_FD4890(int, wchar_t *); // idb
int __cdecl sub_FD4AC0(int, wchar_t *psz); // idb
PSID __cdecl GetUserSID(wchar_t *lpszUserName); // idb
signed int sub_FD4ED0();
int __cdecl sub_FD4EE0(int a1, int a2, int a3, int a4);
int __cdecl sub_FD4F20(int, int, wchar_t *); // idb
wchar_t **__cdecl sub_FD4FB0(WCHAR **ppszArgs, HWND hWndIn, LPCWSTR lpszFileName);
int __cdecl PE_GetLongPathName(CPEString *str, wchar_t *pszKeyName);
int __cdecl sub_FD5520(int, wchar_t *psz, int); // idb
wchar_t *InitSystemPath();
char __cdecl sub_FD5860(wchar_t **a1, __int16 a2, const wchar_t **a3, char a4);
int (__stdcall *InitApis())(LONG Status);
WCHAR **__cdecl PE_GetSystemPathInfo(WCHAR **a1, wchar_t *lpszText); // idb
int __thiscall sub_FD5DE0(std__tree *this, int a2, OLECHAR *psz); // idb
char __cdecl sub_FD5FD0(wchar_t *a1, wchar_t *a2);
char __cdecl sub_FD6090(wchar_t *psz);
char __cdecl sub_FD63B0(wchar_t *a1);
int __thiscall std::map<wchar_t const *,_bstr_t,std::less<wchar_t const *>,std::allocator<std::pair<wchar_t const * const,tagKeyName>>>::_Try_emplace<wchar_t const * const &,>(std__tree *this, _bstr_t bstrKeyId, tagKeyName *KeyName, HKEY hRootKey, OLECHAR *lpszKey);
HANDLE __stdcall PE_OpenFile(OLECHAR *lpszKeyName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile); // idb
LONG __cdecl sub_FD6700(OLECHAR *psz, int a2, int a3, int a4, int a5, int a6);
int __cdecl PE_OpenKey(HKEY bstrSlash, LPCWSTR lpszKeyName, LONG CreateOptions, DWORD DesiredAccess, PHKEY KeyHandle);
HANDLE AdjustRighToWinLogon();
char __cdecl sub_FD6CC0(WCHAR *pszText1, WCHAR *pszText2);
void __cdecl sub_FD6DD0(wchar_t *a1, int a2, int a3, int a4);
void __cdecl sub_FD7040(wchar_t *a1, int a2);
wchar_t **__cdecl sub_FD70E0(wchar_t **a1, int a2, tagPEStringStruct *a3, void *a4); // idb
int __thiscall sub_FD7AB0(std__tree *this, tagKeyName *KeyName, LPCWSTR lpszKey);
int __cdecl sub_FD7AE0(DWORD dwMessageId); // idb
CPEString *__cdecl MakeRegistryKeyName(CPEString *strResult, HKEY hKey, CPEString *strKeyName, CPEString *strValueName);
void __cdecl sub_FD7CC0(HWND a1, HWND a2);
CPEString __cdecl CPEString::AppendPath(CPEString *str, LPCWSTR lpszText);
_bstr_t *__cdecl tagKeyName::Update(_bstr_t *ret, LPCWSTR lpszKeyName, int Off, _bstr_t *pbstr);
void __cdecl sub_FD86F0(int a1, void *a2, void *a3);
void *__cdecl sub_FD87A0(int a1, void *a2, wchar_t *psz, void *a4);
void __cdecl sub_FD9030(void *a1, int a2, void *a3, wchar_t *a4);
void __cdecl PE_RefreshRegistry2(int a1, int a2, void *a3);
void *__cdecl sub_FD9270(int a1, int a2, wchar_t *psz, void *a4);
void __cdecl PE_LoadAutorunsDisabledFlags(DWORD dwValue, HKEY hKey, LPCWSTR lpszKeyName, bool bFlags1, bool bFlags2);
void *__cdecl sub_FD9B70(DWORD dwValue, HKEY hKey, LPCWSTR lpszKeyName, bool bFlags1, bool bFlags2, HANDLE handle, bool bFags3, bool bFlags4);
void __cdecl PE_UpdateRegistryEx(int a1, void *a2, wchar_t *psz, LPCWSTR lpValueName, int a5);
void *__cdecl sub_FDAB10(int a1, void *a2, wchar_t *psz, LPCWSTR lpValueName, int a5, void *a6);
void __cdecl LoadServiceRegistry(DWORD dwType, DWORD dwFlags);
void __cdecl sub_FDF2D0(int a1, void *a2, int a3, char a4, char a5);
char __cdecl UpdateMenuItemWithAccountInfo(HWND hWnd, tagAccountInfo *pInfo, DWORD dwMenuId);
int __cdecl sub_FDF8D0(int, wchar_t *); // idb
char __thiscall sub_FDF930(_DWORD *this, unsigned int a2);
_DWORD *std::_Tree_comp_alloc<std::_Tmap_traits<wchar_t const *,tagKeyName,std::less<wchar_t const *>,std::allocator<std::pair<wchar_t const * const,tagKeyName>>,0>>::_Buyheadnode();
int __thiscall sub_FDF9D0(string *this, unsigned int a2, int a3); // idb
_DWORD __stdcall nullsub_1(_DWORD, _DWORD); // weak
void __stdcall std::_Tree<std::_Tmap_traits<wchar_t const *,tagKeyName,std::less<wchar_t const *>,std::allocator<std::pair<wchar_t const * const,tagKeyName>>,0>>::clear(std__Tree_node *a1); // idb
BOOL __thiscall sub_FDFC40(string *this, int a2, int a3); // idb
int *__thiscall sub_FDFD00(int *this, unsigned int a2);
const wchar_t **__thiscall sub_FDFDF0(std__vector *this, unsigned int a2); // idb
int *__thiscall sub_FDFEE0(int *this, unsigned int a2);
unsigned int __thiscall std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(std__vector *this, unsigned int a2); // idb
void *__stdcall sub_FDFFE0(unsigned int a1);
int __thiscall sub_FE0010(int *this);
int __thiscall std::_Tree<std::_Tmap_traits<wchar_t const *,tagKeyName,std::less<wchar_t const *>,std::allocator<std::pair<wchar_t const * const,tagKeyName>>,0>>::erase(std__tree *this, std__Tree_node **a2, std__Tree_node *a3, std__Tree_node *Node);
int __thiscall std::_Tree<std::_Tmap_traits<wchar_t const *,tagKeyName,std::less<wchar_t const *>,std::allocator<std::pair<wchar_t const * const,tagKeyName>>,0>>::erase(std__tree *this, int a2, std__Tree_node *a3); // idb
UINT __thiscall sub_FE0440(BSTR **this);
const wchar_t **__thiscall sub_FE0460(int *this, const wchar_t **a2);
const wchar_t **__thiscall sub_FE0530(std__vector *this, const wchar_t **a2);
void *__cdecl PE_UpdateRegistry(int a1, HKEY hKey, LPCWSTR lpszKeyName, LPCWSTR lpValueName);
void *__cdecl sub_FE0790(int a1, HKEY hKey, LPCWSTR lpszKeyName, LPCWSTR lpszValueName, HANDLE Handle);
int __cdecl RequerySystemEnvironmentString(WCHAR **ppstr, LPCWSTR lpszName);
HANDLE __cdecl sub_FE0FC0(OLECHAR *psz, LPWIN32_FIND_DATAW lpFindFileData);
DWORD __cdecl sub_FE1040(OLECHAR *psz);
DWORD_PTR __cdecl GetSHFileInfo(OLECHAR *lpszKeyName, DWORD dwFileAttributes, SHFILEINFOW *pFileInfo, UINT cbFileInfo, UINT uFlags); // idb
bool __cdecl PE_GetPathName(int a1, LPCWSTR lpszSystemPath, LPCWSTR lpszPathName, CPEString *strRet);
LSTATUS __cdecl PE_LoadRegKeys(HKEY hKey, DWORD dwIndex, WCHAR **ppszKey);
LSTATUS __cdecl PE_LoadRegValues(HKEY hKey, DWORD dwIndex, LPWSTR *ppszValueName, LPDWORD lpReserved, LPDWORD lpType, void **ppv); // idb
LSTATUS __cdecl PE_ReadRegKey(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, void **ppv); // idb
LSTATUS __cdecl PE_LoadStrKey(HKEY hKey, LPCWSTR lpSubKey, WCHAR **ppszValues); // idb
HANDLE __cdecl sub_FE1610(int arg0, void *hKey, wchar_t *psz);
void *__cdecl sub_FE2060(int a1, int a2, int *a3);
void *__cdecl sub_FE2090(int a1, int a2, int a3, void *a4, char a5);
CPEString *__cdecl CPEString::Append(CPEString *ppv, CPEString *lpszText1, CPEString *lpszText2);
void __cdecl sub_FE30B0(int a1, void *a2, void *a3);
void *__cdecl sub_FE3160(int a1, void *a2, wchar_t *psz, void *a4);
void __cdecl sub_FE39D0(int a1, void *a2, void *a3);
void *__cdecl sub_FE3A80(int a1, void *a2, wchar_t *psz, void *a4);
void __cdecl sub_FE4150(int a1, void *a2, void *a3);
void *__cdecl sub_FE4200(int a1, void *a2, wchar_t *psz, void *a4);
void *__cdecl PE_RefreshRegistry_0(int a1, void *a2, OLECHAR *psz);
void *__cdecl sub_FE4FF0(int a1, void *a2, wchar_t *psz, void *a4, char a5);
void *__cdecl PE_UpdateRegistry2(int a1, void *a2, OLECHAR *psz);
void *__cdecl sub_FE5FF0(int a1, void *a2, wchar_t *a3, void *a4, char a5);
void *__cdecl sub_FE6A10(int a1, void *a2, wchar_t *psz, LPCWSTR lpValueName, wchar_t *a5, int a6, void *a7);
void *__cdecl sub_FE6E10(int a1, void *a2, OLECHAR *psz, LPCWSTR lpValueName);
void *__cdecl sub_FE7000(int a1, void *a2, wchar_t *psz, LPCWSTR lpValueName, int a5);
void __cdecl sub_FE7710(int a1, void *a2, void *a3);
void *__cdecl sub_FE77C0(int a1, void *a2, wchar_t *psz, void *a4);
void __cdecl PE_RefreshRegistry(int a1, HKEY hKey, CPEString *strKeyName);
void *__cdecl sub_FE8050(int a1, HKEY hKey, LPCWSTR lpszKeyName, HANDLE Handle);
void __cdecl LoadPrintServiceDirectory(DWORD dwValue, HKEY hRootKey, LPCWSTR lpszKeyName, DWORD dwArgs);
void *__cdecl sub_FE8C20(DWORD dwValue, HKEY hRootKey, LPCWSTR lpszKeyName, HANDLE Handle, bool bFlags, DWORD dwArgs);
char __cdecl PE_GetServiceDescription(LPCWSTR lpServiceName, CPEString *strServiceDescription); // idb
void *__cdecl sub_FE9580(int a1, void *a2, wchar_t *psz);
void __cdecl sub_FEA070(int a1, void *a2, void *a3);
void *__cdecl sub_FEA120(int a1, void *a2, wchar_t *psz, void *a4);
int __stdcall cbstrList::getInstance(int, int, int);
tagPEStringStruct *__thiscall tagPEStringStruct::tagPEStringStruct(tagPEStringStruct *this, int a2);
EventItem *__thiscall _bstr_t::_bstr_t(_bstr_t *this, VARIANTARG *pvarSrc); // idb
_bstr_t *__thiscall _bstr_t::_bstr_t(_bstr_t *this, LPCSTR lpString);
void __thiscall tagPEStringStruct::~tagPEStringStruct(tagPEStringStruct *this); // idb
Data_t_bstr_t *__thiscall bstr_t::Assign(_bstr_t *this, int a2);
char __cdecl PE_LoadConfigFiles(_bstr_t *bstrConfigFile, std__List *pList); // idb
void *__cdecl sub_FED790(HWND hWndIn); // idb
_bstr_t *__cdecl MakeSectionName(_bstr_t *a1, int a2);
_bstr_t *__cdecl QuerySideBarConfigPath(_bstr_t *bstrText); // idb
_DWORD *__stdcall cbstrList::cbstrList(_DWORD *a1, _DWORD *a2);
void __thiscall sub_FEE360(std__List *this); // idb
void *__cdecl sub_FEE3A0(int a1, void *a2, wchar_t *a3, void *a4, char a5);
void *__cdecl sub_FEEFA0(int a1, int a2, OLECHAR *psz, LPCWSTR lpValueName);
void *__cdecl sub_FEEFE0(int a1, int a2, OLECHAR *psz, LPCWSTR lpValueName, void *a5, char a6);
void *__cdecl sub_FEF0E0(int a1, wchar_t *a2, wchar_t *a3, void *a4, char a5);
CPEString *__cdecl operator+(CPEString *pszResult, LPCWSTR ppszText1, CPEString *ppszText2);
void __cdecl sub_FEF260(int a1, int a2, wchar_t *a3, void *a4, int a5);
void __cdecl sub_FF0760(int a1);
void __cdecl sub_FF0EA0(int a1);
wchar_t *__cdecl sub_FF11B0(wchar_t *a1, int a2, wchar_t *a3);
int __cdecl sub_FF1290(wchar_t *, int); // idb
CSystemProcessInfoMapNode *__thiscall sub_FF1310(CSystemProcessInfoMap *this, int *a2);
_DWORD *__thiscall sub_FF1350(_DWORD *this);
void *__thiscall std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>>>,std::_Iterator_base0>::operator--(void *this);
bool __stdcall sub_FF14B0(Data_t_bstr_t *a1, Data_t_bstr_t *a2); // idb
void __cdecl sub_FF1590(char a1, int a2, OLECHAR *a3, OLECHAR *a4, OLECHAR *psz, int a6);
CSystemProcessInfoMapNode *std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>>,0>>::_Buyheadnode();
CSystemProcessInfoMapNode *__thiscall std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>>,0>>::_Buynode0(CSystemProcessInfoMap *this); // idb
_DWORD *__thiscall sub_FF17F0(int **this, int a2);
void *__cdecl sub_FF1840(int a1);
void *__cdecl sub_FF1860(int a1, void *a2, char a3);
void __cdecl sub_FF2060(int a1, void *a2, void *a3);
void *__cdecl sub_FF2110(int a1, void *a2, wchar_t *psz, void *a4);
void __cdecl sub_FF27D0(int a1, OLECHAR *psz);
void __cdecl sub_FF3190(int a1, OLECHAR *psz);
_DWORD *__thiscall sub_FF3B60(_DWORD *this, int a2, _DWORD **a3, int a4);
CSystemProcessInfoMapNode *__thiscall sub_FF3BA0(CSystemProcessInfoMap *this, int a2, const wchar_t ***a3, int a4);
int __thiscall sub_FF3BE0(_DWORD *this, int a2, char a3, int a4, int a5, void *a6);
int __thiscall sub_FF3E00(_DWORD *this, int a2, char a3, int a4, int a5, void *a6);
int __thiscall sub_FF4040(_DWORD *this, int a2, int a3, int a4, void *a5);
int __thiscall sub_FF4270(_DWORD *this, int a2, int a3, int a4, void *a5);
int __thiscall sub_FF44A0(_DWORD *this, int a2, int a3, int a4, void *a5);
int __thiscall sub_FF45C0(_DWORD *this, int a2, int a3, int a4, void *a5);
void **__cdecl sub_FF4700(const wchar_t **a1, const wchar_t **a2, void **a3);
void *__thiscall ActiveScriptEventConsumer::ActiveScriptEventConsumer(void *this);
void *__thiscall CommandLineEventConsumer::CommandLineEventConsumer(void *this);
_DWORD *__thiscall GetQueryEnumObject(IEnumWbemClassObject **ppEnumOut, IWbemServices *pWbemServices, const wchar_t *lpszQuery);
volatile LONG *__thiscall sub_FF4A70(volatile LONG *this, volatile LONG a2);
void __thiscall sub_FF4B00(CSystemProcessInfoMap *this);
void **__thiscall sub_FF4B60(void **this, void **a2);
_DWORD *__thiscall sub_FF4BC0(int *this, _DWORD *a2);
std_Tree_node_for_tagKeyName **__thiscall sub_FF4C50(CSystemProcessInfoMap *this, _DWORD *a2);
std__tree *__thiscall sub_FF4CE0(std__tree *this);
void *__thiscall std::error_category::`vector deleting destructor'(void *this, char a2);
void sub_FF4D60();
HRESULT __cdecl LoadWbemServices(const wchar_t *lpszServerName, IWbemServices **ppv);
HRESULT __thiscall StreamThreadInfo_Load(tagStreamThreadInfo *lpParameter, IWbemServices **ppWbemServices);
void *__cdecl sub_FF4FE0(int a1, void *a2);
int __cdecl sub_FF5120(IWbemServices *pWbemServices, int a2);
char __stdcall sub_FF5350(int a1, void *pClassObject, int a3);
bool __stdcall sub_FF5440(int a1, void *lpszName, void *a3);
int __cdecl sub_FF55B0(const wchar_t **a1);
char __thiscall sub_FF5630(void *this, int a2, wchar_t *lpszName, void **a4);
char __thiscall sub_FF56B0(void *this, int a2, wchar_t *lpszName, void **a4);
int __cdecl sub_FF5730(LPVOID ppv, int, OLECHAR *psz, void *); // idb
HRESULT __cdecl sub_FF5850(LPVOID ppv, wchar_t *psz, int a3);
wchar_t **__stdcall sub_FF5910(wchar_t **a1, int a2);
int __stdcall sub_FF5940(int, void *); // idb
char __stdcall sub_FF5A00(void *lpszName, int a2, int a3);
char __stdcall sub_FF5AA0(int a1, int a2, int a3);
int __cdecl GetClassObjectName(wchar_t **lpszName, IWbemClassObject *pClassObject);
HRESULT __cdecl sub_FF5BE0(LPVOID *ppv, wchar_t *a2);
bool __stdcall sub_FF5C50(void *pClassObject, int a2);
void __thiscall StreamThreadInfo_Release(tagStreamThreadInfo *this); // idb
void __cdecl sub_FF5D10(int a1);
unsigned int __cdecl sub_FF6830(int a1, int a2, LPVOID ppv, int a4, int a5);
DWORD __stdcall StreamToWbemServicesThreadProc(IWbemLocator *pLocator); // idb
_DWORD *__thiscall sub_FF6B70(_DWORD *this);
_DWORD *__thiscall sub_FF6BB0(_DWORD *this, int a2, size_t a3);
void __stdcall sub_FF6D00(void *a1);
void __stdcall sub_FF6D40(void *a1);
void __stdcall sub_FF6D60(void *a1);
void __stdcall sub_FF6DC0(void *a1);
BOOL __thiscall sub_FF6E00(void *this, size_t a2, int a3);
void *__stdcall sub_FF6EC0(size_t a1);
string *__thiscall sub_FF6F00(string *this, int a2, int a3, size_t a4);
string *__thiscall sub_FF7030(string *this, void *a2, size_t a3); // idb
int *__stdcall std::_System_error_category::default_error_condition(int *a1, int a2);
bool __thiscall std::error_category_equivalent(void *this, _DWORD *a2, int a3);
bool __thiscall std::error_category_equivalent2(void *this, int a2, _DWORD *a3);
int __thiscall sub_FF71F0(CSystemProcessInfoMap *this, int a2, void *a3, int a4);
int __thiscall sub_FF72B0(CSystemProcessInfoMap *this, int a2, void *a3);
CSystemProcessInfoMapNode **__thiscall sub_FF7560(CSystemProcessInfoMap *this, CSystemProcessInfoMapNode **a2, CSystemProcessInfoMapNode *a3, CSystemProcessInfoMapNode *a4);
CSystemProcessInfoMapNode **__thiscall sub_FF7620(CSystemProcessInfoMap *this, CSystemProcessInfoMapNode **a2, CSystemProcessInfoMapNode *a3);
_DWORD *__thiscall sub_FF7890(_DWORD *this, unsigned int a2, unsigned int a3);
int __stdcall std::_Generic_error_category_message(int a1, int a2);
int __stdcall std::_Iostream_error_category_message(int a1, int a2);
int __stdcall std::_System_error_category_message(int a1, int a2);
const char *std::_Generic_error_category_name();
const char *std::_Iostream_error_category_name();
const char *std::_System_error_category_name();
_DWORD __stdcall nullsub_2(_DWORD); // weak
int swprintf(wchar_t *pszBuffer, const wchar_t *lpszFormat, ...);
EventItem *__thiscall tagEventItem::tagEventItem(EventItem *this, const GUID *a2, __int16 a3, __int16 a4, char a5); // idb
_DWORD **__cdecl sub_FF7B60(int a1, OLECHAR *psz, int a3, int a4);
int *__thiscall sub_FF7C40(char *this, _DWORD **a2);
LONG __cdecl sub_FF7CE0(int a1);
_bstr_t *__thiscall QueryEventTraceName(tagWbemServicesList *ppWbemServices, GUID *pIID, WORD bVersion, BYTE cLevel, WORD aType);
// signed int __usercall sub_FF8250@<eax>(int a1@<edi>, int a2@<esi>, int a3, int a4);
_bstr_t *__thiscall sub_FF8730(tagWbemServicesList *pWbemServicesList, GUID *pIID, int Type, int Version, int Level);
_bstr_t *__thiscall QueryEventTraceNameEx(tagWbemServicesList *this, IEnumWbemClassObject *pClassObject_1, const GUID *a3, unsigned __int16 Version, char Level, __int16 Type);
int __cdecl sub_FF92A0(wchar_t *Dst, size_t SizeInWords, int); // idb
HRESULT __cdecl SetProxyAccessRight(tagWbemServicesList *pWbemServicesList); // idb
_DWORD *__thiscall sub_FF9380(_DWORD *this, int a2);
_WORD *__thiscall sub_FF93D0(_WORD *this, OLECHAR *psz);
// int __usercall QueryShellDispatch@<eax>(int a1@<esi>, IShellFolderViewDual *pShellFolderViewDual, GUID *iid, IDispatch *ppDispApplication);
// HRESULT __usercall QueryShellView@<eax>(_GUID *iid, IShellView **ppv);
// int __usercall PE_ShellExecute@<eax>(const wchar_t *lpszFile, const wchar_t *lpszParameters, const wchar_t *lpszDir);
CRYPT_PROVIDER_SGNR *__cdecl sub_FF9700(HANDLE StateHandle, char bFlags, WINTRUST_DATA_EX **ActionData, PDWORD pdwValues, _CRYPT_PROVIDER_CERT **ppCertProviderContext, PCCERT_CONTEXT *ppCertContext);
LONG __cdecl PE_CryptedVerify(HCATADMIN hCatAdmin, WCHAR *pcwszMemberFilePath, char fdwRevocationChecks, BYTE *pbHash, DWORD cbHash, WINTRUST_DATA_EX *pActionData, WCHAR **ppcwszCatalogFilePathIn, int dwIndex);
LONG __cdecl PE_VerifyFile(WCHAR *pcwszMemberFilePath, char fdwRevocationChecks, WCHAR *lpszText, DWORD TextLen, WINTRUST_DATA_EX *pActionData, WCHAR *pcwszCatalogFilePathIn, WCHAR **ppcwszCatalogFilePath, int dwIndex);
LONG __cdecl PE_DoubleVerify(LPCWSTR pcwszMemberFilePath, LPCWSTR pcwszCatalogFilePath, HCATADMIN hCatAdmin, bool fdwRevocationChecks, WINTRUST_DATA_EX **ppActionData, DWORD *pdwCertEncodingTypeCount1, PCCERT_CONTEXT *ppCertContext1, PCCERT_CHAIN_CONTEXT *ppCertChainContext1, DWORD *pdwCertEncodingTypeCount2, PCCERT_CONTEXT *ppCertContext2, PCCERT_CHAIN_CONTEXT *ppChainContext2, WCHAR **ppcwszCatalogFilePath, DWORD dwIndex);
bool __cdecl LoadWintrust(); // weak
CTreeList *__thiscall CTreeList::CTreeList(CTreeList *this);
HTHEME __thiscall CTreeList::~CTreeList(CTreeList *this);
void __thiscall sub_FFA2C0(tagTreeViewChildItem *this); // idb
_bstr_t *__thiscall sub_FFA320(_bstr_t *this, LPCSTR lpString);
BOOL __thiscall sub_FFA3E0(BSTR **this, BSTR **a2);
void *__thiscall CTreeListData::`scalar deleting destructor'(void *this, char a2);
HWND __cdecl CTreeList::Init(HWND hWndParent, HINSTANCE hInstance, HMENU hMenu, int a4, RECT *lprc); // idb
HWND __stdcall CTreeList::CreateTooltips(HINSTANCE hInstance, HWND hWndParent);
LRESULT __stdcall CThemedWindow::HandleMessage(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int __stdcall sub_FFA5C0(int);
int __thiscall CTreeList::OnDestroy(CTreeList *this); // idb
bool __thiscall sub_FFA690(HWND *this, WPARAM wParam);
void __thiscall sub_FFA7D0(CTreeList *this, tagTreeViewChildItem *pChild); // idb
signed int __thiscall TreeViewChildItem_GetSiblingCount(tagTreeViewChildItem *this); // idb
void __thiscall CTreeList::DrawHeader(CTreeList *this, int hWndHeader, HDC hDC, RECT rect);
LRESULT __thiscall CTreeList::SendNotify(CTreeList *this, HWND hWnd, int code, int Msg, tagTreeViewChildItem *pSibling, tagTreeViewChildItem *pChild, int nItem);
void __thiscall CTreeList::DrawTree(CTreeList *this, HDC *a2, HRGN a3); // idb
HGDIOBJ __thiscall sub_FFBC20(CThemedWindow *this, int a2, HDC hDC, char a4, LPRECT lprc); // idb
char __thiscall sub_FFBDA0(CTreeList *this, char a2); // idb
char __thiscall CTreeList::UpdateSB(CTreeList *this, char a2); // idb
UINT __thiscall sub_FFBE30(CTreeList *this, signed int a2); // idb
int __thiscall CTreeList::OnMsg2001(CTreeList *thisIn, tagTreeViewChildItem *pItem, char fChild);
signed int __thiscall CTreeList::FindChild(CTreeList *this, tagTreeViewChildItem *pChild); // idb
CTreeList *__cdecl CTreeList::GetTreeList(HWND hWnd);
int __thiscall CTreeList::GetChildWidth(CTreeList *this, int nChildID); // idb
char __thiscall sub_FFC210(HWND *this, int a2, int a3, char a4, char a5, int a6, LPARAM lParam);
int __thiscall sub_FFC420(_DWORD *this);
BOOL __thiscall CTreeList::MapToHeader(CTreeList *this, WPARAM wParam, RECT *lParam); // idb
HWND __thiscall CTreeList::GetTooltipOfRightHeader(CTreeList *this);
int __stdcall sub_FFC4A0(int, int);
int __stdcall sub_FFC530(int a1, int a2);
HIMAGELIST __thiscall CTreeList::GetImageList(CTreeList *this);
char __thiscall sub_FFC550(_DWORD *this, int a2, struct tagRECT *a3);
int __thiscall CTreeList::GetLineHeight(CTreeList *this); // idb
int __thiscall CTreeList::GetScrollInfos(CTreeList *this_, SCROLLINFO *RightScrollInfo, SCROLLINFO *BottomScrollInfo); // idb
signed int __thiscall sub_FFC8A0(CTreeList *this, bool *a2); // idb
int __stdcall CListViewData::GetItemText(tagTreeViewChildItem *pChildItem, UINT iSubItem, WCHAR *pszText, PDWORD cbSize);
const wchar_t *__stdcall sub_FFCA20(int a1, int a2, int a3, int a4);
const wchar_t *CTreeList::GetName();
HWND __thiscall CTreeList::GetTooltipOfTreeList(CTreeList *this);
int __thiscall sub_FFCA50(void *this);
int __thiscall TreeViewChildItem_GetChildCount(tagTreeViewChildItem *this); // idb
LRESULT __thiscall CTreeList::HeaderWndProc(CTreeList *this, HWND hWndFrom, UINT Msg, WPARAM wParam, tagNMLVGETINFOTIPW *lParamIn); // idb
signed int __thiscall CTreeList::Query(CTreeList *this, LONG xPos, LONG yPos, int *pxx, WPARAM *pnItem, tagTreeViewChildItem **pyy); // idb
int __thiscall CTreeList::UpdateHeaderPos(CTreeList *this, HWND hWnd, int a3); // idb
int __thiscall CTreeList::SetHScrollPos(CTreeList *this, HWND hwnd, int a3);
void __thiscall sub_FFD310(CTreeList *this, int a2, int a3); // idb
char __thiscall CTreeList::OnInited(CTreeList *hData); // idb
int *__thiscall sub_FFD640(_DWORD *this, int a2, CListViewData *pListViewData, int (__cdecl *pfnCallback)(int, _DWORD, int, _DWORD), int a5);
char __thiscall sub_FFD750(CTreeList *this, int a2, int a3);
tagTreeViewChildItem *__thiscall sub_FFD7E0(CTreeList *this, int a2, int a3, int (__cdecl *a4)(int, _DWORD, int, _DWORD), int a5);
int __stdcall CTreeList::SetVScrollbarPos(int yPos, int cy);
bool __thiscall sub_FFD980(_DWORD *this, int a2);
tagTreeViewChildItem *__thiscall TreeViewChildItem_GetChild(tagTreeViewChildItem *pItem, int nPos); // idb
int __thiscall CTreeList::GetLineHeight(CTreeList *this); // idb
int __cdecl pfnCallback(CListViewData *pListViewData, int a2, int a3);
int __cdecl sub_FFDBC0(int a1, int a2, int (__stdcall *a3)(_DWORD, _DWORD, int), int a4);
HWND __thiscall CTreeList::HandleListViewMsg(CTreeList *this, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); // idb
int __stdcall sub_FFE5D0(int a1);
int __stdcall CTreeList::OnMsg2004(int, int, int);
int __thiscall sub_FFE650(_DWORD *this);
int __thiscall CTreeList::SendNotifyEx(CTreeList *this, HWND hWndParent, TVNMHDR *pNMHDR); // idb
BOOL __thiscall sub_FFE900(_DWORD *this, int a2, int a3, int a4, int a5, const __m128i *a6);
char __stdcall sub_FFE9C0(int a1, int a2, int a3, int a4, int a5);
int __thiscall sub_FFE9D0(_DWORD *this);
int __thiscall CTreeList::Refresh(CTreeList *this);
BOOL __thiscall CTreeList::RefreshHeaderItem(CTreeList *this, int nItem); // idb
int __thiscall CTreeList::RefreshChildItem(CTreeList *thisIn, tagTreeViewChildItem *pChild);
void __thiscall CTreeList::RedrawZone(CTreeList *thisIn, int nStart, int nEnd);
ATOM CTreeList::Register();
int __cdecl CTreeList::RepositionTooltips();
LRESULT __thiscall CTreeList::MoveHeaders(CTreeList *this, int a2); // idb
int __thiscall CTreeList::OnSize(CTreeList *this);
int __cdecl CTreeList::RepositionHeaders();
void __thiscall CTreeList::RedrawChild(CTreeList *pThis, tagTreeViewChildItem *pItem); // idb
LRESULT __thiscall sub_FFF110(HWND *this, int a2, int a3);
int __stdcall CTreeList::OnMsg2000(tagTreeViewChildItem *pItem, char a2);
LRESULT __thiscall CTreeList::SetSortFlagsImageList(CTreeList *this, LPARAM lParam, int a3, int a4);
char __thiscall CTreeList::ResetImageList(CTreeList *this, int a2, char a3); // idb
int __thiscall sub_FFF210(CTreeList *this, int a2); // idb
// void __thiscall CTreeList::SetSplitterCursor(CTreeList *this, HCURSOR a2);
int __thiscall sub_FFF230(CTreeList *this, int a2); // idb
BOOL __thiscall CTreeList::ShowCaption(CTreeList *this, char fVisible); // idb
bool __thiscall CTreeList::UpdateLeftBottomSB(CTreeList *this, HWND hWnd, char a3, char a4); // idb
bool __thiscall CTreeList::UpdateRightRightSB(CTreeList *this, bool fHide, bool fSBVisible);
unsigned int __cdecl sub_FFF500(unsigned int *a1, unsigned int a2, int (__cdecl *a3)(_DWORD, _DWORD, int, int), int a4, int a5, int a6);
LRESULT __stdcall CTreeList::Proxy_HeaderWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT __stdcall CTreeList::Proxy_TooltipWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
HWND __stdcall CTreeList::WndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
tagTreeViewChildItem *__thiscall CTreeList::GetCurScrollChildItem(CTreeList *this);
int __thiscall CTreeList::GetRightScrollbarPos(CTreeList *this); // idb
bool __thiscall CTreeList::InitHeaderColumn(CTreeList *this, HWND hWnd, char a3); // idb
LRESULT __thiscall CTreeList::PopTooltip(CTreeList *this, HWND hWnd, POINT *pt); // idb
unsigned int __thiscall CTreeList::UpdateVScrollBars(CTreeList *this, int nPos); // idb
// unsigned int __userpurge CTreeList::SetVScrollPos@<eax>(CTreeList *this@<ecx>, int a2, int a3);
HWND __thiscall CTreeList::TreeWndProc(CTreeList *this, HWND hWndIn, UINT Msg, WPARAM wParamIn, LPARAM lParam); // idb
CSystemProcessInfoMapNode *__thiscall sub_10011F0(std__tree *this, std__List *a2); // idb
int __thiscall sub_1001240(int *this, int a2, int a3, int a4, void *a5);
int sub_10013E0(wchar_t *Dst, wchar_t *Format, ...);
void __thiscall sub_1001400(CSystemProcessInfoMap *this);
void __thiscall sub_1001430(std__List *this); // idb
_bstr_t *__cdecl sub_10014F0(_bstr_t *a1, LPCSTR lpString, _bstr_t *a3); // idb
bool __stdcall AskForAgreementLicense(HWND hWnd, OLECHAR *psz, char a3, char a4, int a5);
int __stdcall sub_10018A0(int, FILETIME *lpFileTime); // idb
int __stdcall sub_1001BC0(int, OLECHAR *psz); // idb
DWORD __thiscall sub_1001FC0(_DWORD *this);
Data_t_bstr_t *__thiscall sub_10037E0(_DWORD *this);
int __stdcall sub_1004320(int, DWORD dwMessageId); // idb
DWORD __stdcall sub_1004420(void *a1, int a2, int a3);
BSTR **__thiscall sub_1004530(void *this, int a2, OLECHAR psz, int a4);
int __stdcall sub_1004810(int, OLECHAR *psz, __int16); // idb
_bstr_t *__stdcall sub_1004950(int a1, int a2, void *a3);
DWORD __stdcall sub_1004AA0(HINTERNET hRequest, int a2);
int __stdcall sub_1004CA0(HINTERNET hRequest, int, DWORD dwInfoLevel, int); // idb
int __stdcall sub_1004D50(void *); // idb
DWORD __thiscall HttpInfo_Open(tagHttpInfo *this, HWND hWnd, OLECHAR *psz, char a4, char a5, char a6);
DWORD __thiscall sub_1004F00(HINTERNET *this, void *a2, void *a3, void *a4, int a5);
std__list_node *__thiscall sub_1005160(tagHttpInfo *this, char a2);
char __thiscall LoadConfigItemFromRegistry(tagRegKeyInfo *this, tagConfigItem *pConfigItem);
LSTATUS __thiscall RegKeyInfo_LoadDwordArray(tagRegKeyInfo *pThis, LPCWSTR lpValueName, DWORD cbSize, PVOID pMap);
int __thiscall RegKeyInfo_LoadWord(tagRegKeyInfo *this, LPCWSTR lpValueName, WORD *dwValue, DWORD dwDefValue);
LSTATUS __thiscall RegKeyInfo_LoadShortArray(tagRegKeyInfo *pThis, LPCWSTR lpValueName, DWORD dwCount, PVOID pArray);
DWORD __thiscall sub_10055A0(HINTERNET *this, int a2, OLECHAR psz);
LSTATUS __thiscall SaveConfigItemToRegistry(tagRegKeyInfo *pThis, tagConfigItem *pConfigItem);
LSTATUS __thiscall RegKeyInfo_SaveLongArray(HKEY *this, LPCWSTR lpSubKey, int a3, BYTE *lpData);
LSTATUS __thiscall RegKeyInfo_SaveShortArray(tagRegKeyInfo *pThis, LPCWSTR lpValueName, DWORD dwCount, PVOID pData);
void __stdcall sub_1006500(void *a1);
CSystemProcessInfoMapNode **__thiscall sub_1006540(CSystemProcessInfoMap *this, CSystemProcessInfoMapNode **a2, CSystemProcessInfoMapNode *a3, CSystemProcessInfoMapNode *a4);
CSystemProcessInfoMapNode **__thiscall sub_1006600(CSystemProcessInfoMap *this, CSystemProcessInfoMapNode **a2, CSystemProcessInfoMapNode *a3);
unsigned int __cdecl sub_1006870(int a1, const unsigned __int16 *a2);
HBRUSH __stdcall DlgLicenseInfo(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4);
_BYTE *sub_1006A40();
BOOL __cdecl License_IsEulaAccepted(HKEY hKey, LPCWSTR lpSubKey);
BOOL __cdecl License_CheckEulaAccepted(LPCWSTR lpszText); // idb
signed int sub_1006C00();
signed int sub_1006CC0();
BOOL __cdecl sub_1006D40(HWND a1);
BOOL __cdecl LicenseCheck(WCHAR *lpszText, int a2, int a3); // idb
signed int sub_1007020();
void __noreturn sub_1007080();
BOOL __cdecl LicensePropSheet(WCHAR *lpszText, BYTE Data); // idb
BOOL __cdecl sub_1007390(LPARAM a1, int *a2, int a3);
int __stdcall sub_1007910(int, void *, int, int); // idb
signed int CAboutWnd::HandleInitDialog();
LRESULT __cdecl CAboutWnd::HandleCommand(HWND hWnd, int a2, WPARAM wParam, LPARAM lParam);
int __cdecl Command_OkOrCancel(HWND hDlg); // idb
HBRUSH __stdcall DlgAbout(HWND hDlg, UINT Msg, WPARAM hdc, LPARAM lParam);
int __cdecl Command_About(HWND hWndParent); // idb
int *__cdecl sub_1007DF0(int *a1, const unsigned __int16 *a2);
struct std::_Facet_base *__cdecl sub_1008150(int *a1);
_DWORD *__thiscall sub_1008270(_DWORD *this);
char *__thiscall sub_1008300(char *this, int a2, int a3);
struct std::_Locinfo *__thiscall sub_1008360(struct std::_Locinfo *this, char *a2);
std::exception *__thiscall sub_1008420(std::exception *this, int a2, int a3, int a4);
std::exception *__thiscall sub_10084F0(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_1008520(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_1008550(std::exception *this, struct exception *a2);
_DWORD *__thiscall sub_1008570(_DWORD *this, int a2);
std::exception *__thiscall sub_1008600(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_1008630(std::exception *this, int a2, int a3, void *a4);
int __thiscall sub_10087D0(_DWORD *this);
int __thiscall sub_1008880(std::_Lockit *this); // idb
// _DWORD __thiscall std::locale::~locale(std::locale *__hidden this); idb
void __thiscall sub_1008990(_DWORD *this);
void __fastcall sub_1008A1C(unsigned int a1, int a2, int a3);
void __fastcall sub_1008A24(unsigned int a1, int a2, int a3);
char *__thiscall sub_1008A2C(_DWORD *this, char a2);
void *__thiscall sub_1008B10(void *this, char a2);
_DWORD *__thiscall sub_1008B60(void *this, char a2);
_DWORD *__thiscall sub_1008BC0(struct std::ios_base *this, char a2);
void **__thiscall sub_1008C00(void *this, char a2);
void *__thiscall sub_1008C50(void *this, char a2);
struct std::ios_base *__thiscall sub_1008C80(struct std::ios_base *this, char a2);
void *__thiscall sub_1008CB0(void *this, char a2);
void __cdecl sub_1008CE0(int a1, int a2, wchar_t *a3);
int __cdecl sub_1009000(int a1, int a2, int a3, int a4);
volatile signed __int32 *__thiscall sub_1009070(volatile signed __int32 *this);
signed int __cdecl sub_1009090(char **a1, int *a2);
__int64 __thiscall sub_1009140(_DWORD **this);
signed __int32 __thiscall sub_1009160(volatile signed __int32 *this);
struct std::locale::_Locimp *__thiscall sub_1009170(_DWORD *this);
void *__cdecl sub_10091F0(void *a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
int __thiscall sub_10092D0(_DWORD *this);
__int64 __thiscall sub_1009400(_DWORD **this);
_DWORD *__thiscall sub_1009420(int this);
_DWORD *__thiscall sub_1009490(void *this, int a2, int a3, int a4);
_DWORD *__thiscall sub_1009550(void *this, void *a2, size_t a3);
int *__thiscall sub_1009640(int *this, int *a2, unsigned int a3, unsigned int a4);
int *__thiscall sub_1009760(int *this, void *a2, int a3);
int __thiscall sub_1009860(_DWORD *this, char a2);
BOOL __stdcall sub_1009900(__int16 a1, WCHAR SrcStr);
char __thiscall sub_1009930(const _Cvtvec *this, wchar_t a2, int a3);
wchar_t *__thiscall sub_1009980(const _Cvtvec *this, wchar_t *a2, unsigned int a3, char a4, int a5);
unsigned __int16 *__thiscall sub_1009A20(void *this, int a2, unsigned __int16 *a3, unsigned __int16 *a4);
unsigned __int16 *__thiscall sub_1009A60(void *this, int a2, unsigned __int16 *a3, unsigned __int16 *a4);
int __thiscall sub_1009AA0(void *this, wchar_t Src);
wchar_t *__thiscall sub_1009AC0(char *this, wchar_t *a2, unsigned int a3);
int __thiscall sub_1009B10(void *this, wchar_t Src);
wchar_t *__thiscall sub_1009B30(char *this, wchar_t *a2, unsigned int a3);
wchar_t __thiscall sub_1009B80(const _Cvtvec *this, char a2);
char *__thiscall sub_1009BD0(const _Cvtvec *this, wchar_t a2, char a3, mbstate_t a4);
_DWORD *__thiscall sub_1009C60(_DWORD *this, unsigned int a2, unsigned int a3);
char *__thiscall sub_1009D10(char *this);
int *__thiscall sub_1009E40(_DWORD *this, int *a2);
void __thiscall sub_1009E70(struct std::ios_base *this, int a2, char a3);
int __thiscall sub_1009F90(_DWORD **this, int a2);
__int16 __thiscall sub_1009FC0(_DWORD *this, __int16 a2);
signed int __stdcall sub_100A1E0(int a1);
signed __int16 __thiscall sub_100A1F0(int this, __int16 a2);
_DWORD *__stdcall sub_100A260(_DWORD *a1, int a2, int a3, int a4, int a5);
signed int *__thiscall sub_100A290(int this, signed int *a2, __int64 a3, int a4, char a5);
_DWORD *__stdcall sub_100A480(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8);
signed int *__thiscall sub_100A4B0(int this, signed int *a2, __int64 a3, __int64 a4, int a5, int a6, char a7);
void *__thiscall sub_100A600(void *this, int a2, int a3, int a4);
__int64 sub_100A610();
void *__thiscall sub_100A620(_DWORD *this, void *a2);
void *__thiscall sub_100A6E0(_DWORD *this, void *a2);
signed int __thiscall sub_100A700(_DWORD **this);
signed int sub_100A730();
signed __int16 __thiscall sub_100A740(int this);
unsigned int __thiscall sub_100A7B0(_DWORD **this, void *a2, int a3, int a4);
unsigned int __thiscall sub_100A8C0(_DWORD **this, void *a2, int a3, int a4);
void *__thiscall CObjSecurity::`scalar deleting destructor'(void *this, char a2);
int __cdecl CObjSecurity::~CObjSecurity(int a1);
int __cdecl CObjSecurity::Create(tagHANDLELISTITEMPARAM *pItem, LPCWSTR lpszText, CObjSecurity **ppv, int nType, BOOL fObjSecurity);
int __stdcall CObjSecurity::AddRef(int a1);
int __stdcall CObjSecurity::GetAccessRights(int a1, int a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6);
int __stdcall CObjSecurity::GetInheritTypes(int a1, _DWORD *a2, _DWORD *a3);
int __stdcall CObjSecurity::GetObjectInformation(_DWORD *a1, _DWORD *a2);
int __stdcall CObjSecurity::GetSecurity(int, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, int); // idb
int __stdcall CObjSecurity::Init(CObjSecurity *a1, int a2, int a3, int a4, wchar_t *Src, int a6, int a7); // idb
int __cdecl CopyServerName(int, wchar_t *Src); // idb
int __stdcall CObjSecurity::MapGeneric(int, int, int, PDWORD AccessMask); // idb
int __stdcall CObjSecurity::PropertySheetPageCallback(int a1, int a2, int a3, int a4);
signed int __stdcall CObjSecurity::QueryInterface(int a1, _DWORD *a2, _DWORD *a3);
int __stdcall CObjSecurity::Release(_DWORD *a1);
int __stdcall CObjSecurity::SetSecurity(int, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor); // idb
int __thiscall sub_100AEE0(_DWORD *this, int a2, char a3, int a4, int a5, void *a6);
int __thiscall sub_100B100(std__tree *this, int a2, int a3, int a4, void *a5); // idb
CString *__thiscall ATL::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::Format(CString *this, UINT nID); // idb
CString *__thiscall ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>(CString *this);
ATL::CAtlStringMgr *__thiscall ATL::CAtlStringMgr::Clone(ATL::CAtlStringMgr *this);
volatile signed __int32 *__thiscall ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>(CString *this);
CString *__cdecl ATL::CSimpleStringT<wchar_t,0>::Append(CString *str1, CString *str2, WCHAR *lpszSource2); // idb
void *__thiscall ATL::CAtlStringMgr::`scalar deleting destructor'(void *this, char a2);
void *__thiscall ATL::CWin32Heap::`vector deleting destructor'(void *this, char a2);
ATL::CAtlStringMgr **__thiscall ATL::CAtlStringMgr::Allocate(ATL::CAtlStringMgr *this, int a2, unsigned int a3);
LPVOID __thiscall ATL::CWin32Heap::Allocate(HANDLE *this, SIZE_T dwBytes);
int __cdecl sub_100B650(int a1);
CHAR *__cdecl ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>::FindStringResourceInstance(int a1, WORD wLanguage);
void __cdecl __noreturn ATL::AtlThrowImpl(int a1);
void __cdecl sub_100B780(HWND hWnd, CString lpCommandLine);
HANDLE StartBackendThread();
CStringData *__cdecl sub_100B970(CStringData *a1);
CHAR *__cdecl ATL::CSimpleStringT<wchar_t,0>::Concatenate(CString *this, WCHAR *lpszSource, int nLength, void *lpszSource2, int nLength2); // idb
CStringData *__thiscall ATL::CSimpleStringT<wchar_t,0>::Empty(CString *this);
volatile signed __int32 *__thiscall ATL::CSimpleStringT<wchar_t,0>::Fork(CString *this, int nLength); // idb
int __thiscall ATL::CAtlStringMgr::Free(ATL::CAtlStringMgr *this, struct CStringData *a2);
LPVOID __thiscall ATL::CWin32Heap::Free(HANDLE *this, LPVOID lpMem);
wchar_t *__cdecl sub_100BB70(wchar_t *a1, wchar_t *a2);
IAtlStringMgr *__stdcall ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>::GetDefaultManager();
char *__thiscall ATL::CAtlStringMgr::GetNilString(ATL::CAtlStringMgr *this);
SIZE_T __thiscall ATL::CWin32Heap::GetSize(HANDLE *this, LPCVOID lpMem);
int __thiscall ATL::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::LoadStringW(CString *this, HMODULE hModule, int nID); // idb
volatile signed __int32 *__thiscall ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2(CString *this, int nLength_1); // idb
volatile signed __int32 *__cdecl sub_100BF00(OLECHAR *lpszText1, OLECHAR *lpszText2, OLECHAR *lpszText3);
CStringData *__thiscall ATL::CSimpleStringT<wchar_t,0>::Reallocate(CString *this, int nLength);
int __thiscall ATL::CAtlStringMgr::Reallocate(ATL::CAtlStringMgr *this, struct CStringData *a2, int a3, unsigned int a4);
LPVOID __thiscall ATL::CWin32Heap::Reallocate(HANDLE *this, LPVOID lpMem, SIZE_T dwBytes);
CStringData *__thiscall ATL::CSimpleStringT<wchar_t,0>::SetString(CString *this, void *Src, int a3); // idb
HGLOBAL __cdecl ATL::AtlGetStringResourceImage(HMODULE hModule, HRSRC hResInfo, int id); // idb
void __stdcall sub_100C750(void *a1);
tagPEStringStruct *__thiscall sub_100C770(tagPEStringStruct *this, _bstr_t *a2);
int __cdecl sub_100C7E0(int a1, int a2, int a3, _DWORD *a4, unsigned __int8 (__cdecl *a5)(_DWORD, _DWORD));
void *__cdecl sub_100C880(void *a1, int a2, int a3);
int __cdecl sub_100C930(int a1, int a2, unsigned __int8 (__cdecl *a3)(_DWORD, _DWORD));
int __cdecl sub_100C9E0(int *a1, int *a2, int *a3, unsigned __int8 (__cdecl *a4)(int, int));
int __cdecl sub_100CBC0(int a1, int a2, int a3, _DWORD *a4, unsigned __int8 (__cdecl *a5)(_DWORD, _DWORD));
void *__cdecl sub_100CC30(void *a1, int a2, int a3, int a4);
signed int __cdecl sub_100CD10(_DWORD *a1, int a2, unsigned __int8 (__cdecl *a3)(_DWORD, _DWORD));
int **__cdecl sub_100CD70(int **a1, int *a2, int *a3, unsigned __int8 (__cdecl *a4)(int, int));
_DWORD *__cdecl sub_100CF50(_DWORD *a1, _WORD *a2, _WORD *a3, _WORD *a4);
void **__thiscall sub_100CF80(void **this, void *Src, int a3, int a4);
AppDomain *__thiscall AppDomain::AppDomain(AppDomain *this, int a2, int a3);
CString *__thiscall Assembly::Assembly(CString *this, int a2, int a3, void *a4, void *Src);
CResizer *__thiscall CResizer::CResizer(CResizer *this, HWND hWnd);
_DWORD *__thiscall sub_100D260(_DWORD *this);
Runtime *__thiscall Runtime::Runtime(Runtime *this, unsigned int a2, unsigned __int16 a3);
volatile signed __int32 *__thiscall AppDomain::~AppDomain(void (__stdcall *****this)(signed int));
volatile signed __int32 *__thiscall Assembly::~Assembly(Assembly *this);
HTHEME __thiscall CResizer::~CResizer(CResizer *this);
volatile signed __int32 *__thiscall Process::~Process(void (__stdcall *****this)(signed int));
volatile signed __int32 *__thiscall Runtime::~Runtime(void (__stdcall *****this)(signed int));
CString *__thiscall sub_100D840(CString *this, void **a2);
void *__thiscall AppDomain::`vector deleting destructor'(void *this, char a2);
void *__thiscall Assembly::`scalar deleting destructor'(void *this, char a2);
void *__thiscall Process::`scalar deleting destructor'(void *this, char a2);
void *__thiscall Runtime::`scalar deleting destructor'(void *this, char a2);
int __thiscall sub_100D970(_DWORD *this, CTreeList *thisIn);
int __cdecl sub_100DB10(wchar_t *Dst, rsize_t SizeInWords, int); // idb
CHAR *__thiscall sub_100DB40(CString *this, wchar_t *Src);
CHAR *__thiscall sub_100DB80(CString *this, wchar_t *Src, size_t MaxCount);
int __cdecl sub_100DC50(wchar_t *Dst, rsize_t SizeInWords, int); // idb
int __thiscall CResizer::InitWnd(CResizer *hData, HWND hWnd); // idb
// ULONG __userpurge sub_100DD40@<eax>(int a1@<ecx>, int a2@<edi>, int a3@<esi>, int a4, int a5);
// int __userpurge sub_100DE80@<eax>(int a1@<edi>, int *a2);
signed int __thiscall sub_100DEA0(void *this, int a2, DWORD ThreadId);
int __thiscall sub_100DF10(DWORD *this);
int __stdcall PageProcCclr(HWND hWnd, int, WPARAM, int); // idb
BOOL __cdecl sub_100E780(int a1, int a2);
bool __cdecl sub_100E7A0(int a1, int a2);
LRESULT __thiscall CResizer::HandleMessage(WNDPROC *this, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int __stdcall sub_100E7F0(int a1);
int __thiscall sub_100E810(_DWORD *this, int a2, int a3);
struct tagResizerItem *__thiscall CResizer::AddItem(CResizer *this, HWND hWndEdit, int a3); // idb
int __cdecl sub_100E970(wchar_t *Dst, rsize_t SizeInWords, int, int, int); // idb
__int16 __thiscall sub_100E9F0(_WORD *this);
__int16 __thiscall sub_100EA10(_WORD *this);
__int16 __thiscall sub_100EA30(_WORD *this);
HWND __thiscall CTreeList::GetTooltipOfLeftHeader(CTreeList *this);
const WCHAR **sub_100EA80();
int __thiscall sub_100EA90(_WORD *this);
_WORD *__thiscall sub_100EAB0(_WORD *this);
AppDomain *__thiscall sub_100EAD0(_DWORD *this, int a2, AppDomain *a3);
Runtime *__thiscall sub_100EBA0(_DWORD *this, unsigned int a2, Runtime *a3);
int __cdecl ProcessIsNetCclr(DWORD th32ProcessID, PDWORD pdwFlags);
wchar_t *__thiscall sub_100EE50(_DWORD *this, int a2, int a3, wchar_t *Dst, int a5);
wchar_t *__thiscall sub_100EEA0(int this, int a2, int a3, wchar_t *Dst, int a5);
wchar_t *__thiscall sub_100EFF0(int this, int a2, int a3, wchar_t *Dst, int a5);
wchar_t *__stdcall sub_100F070(int a1, int a2, wchar_t *Dst, int a4);
const wchar_t *CResizer::GetName();
int __thiscall sub_100F0A0(_DWORD *this, int a2);
int __cdecl sub_100F690(const unsigned __int16 *a1);
bool __cdecl sub_100F710(int a1, int a2, int a3);
bool __cdecl sub_100F730(int a1, int a2);
void **__thiscall sub_100F760(_DWORD *this, void **a2, int a3);
void **__thiscall sub_100F790(CString *this, void **a2, int a3, int a4); // idb
signed int __thiscall sub_100F840(char *this, WCHAR *a2);
BOOL __stdcall CResizer::EnumChildCallback(HWND hWnd, CResizer *a2); // idb
int __thiscall CResizer::Refresh(CResizer *lParam); // idb
int __thiscall sub_100FE80(const wchar_t **this, wchar_t a2);
CStringData *__thiscall sub_100FEB0(CString *this, void *Src);
CStringData *__thiscall sub_100FF00(CString *this, void *Src);
CStringData *__thiscall sub_100FF50(CString *this, void *Src);
CStringData *__thiscall sub_100FFA0(CString *this, void *Src);
int __thiscall sub_100FFF0(CString *this, void *Src);
CStringData *__thiscall sub_10100E0(CString *this, void *Src);
int __thiscall sub_1010130(HWND *this);
void *__thiscall sub_10101B0(int this);
int __cdecl sub_10101D0(wchar_t *Dst, rsize_t SizeInWords, int); // idb
int __cdecl sub_1010200(wchar_t *Src, int); // idb
LRESULT __stdcall CResizer::Proxy_WndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
char *__thiscall sub_1010650(const void **this, unsigned int a2);
char *__thiscall std::vector<tagAccountInfo *,std::allocator<tagAccountInfo *>>::_Reallocate(std__vector *this, unsigned int a2); // idb
unsigned int __thiscall sub_1010750(int this, unsigned int a2);
unsigned int __thiscall std::vector<tagAccountInfo *,std::allocator<tagAccountInfo *>>::_Reserve(std__vector *this, unsigned int a2); // idb
int __thiscall sub_1010840(_DWORD *this, int a2, void *a3);
__int16 __thiscall sub_1010880(_DWORD *this, _WORD *a2);
tagAccountInfo *__thiscall std::vector<tagAccountInfo *,std::allocator<tagAccountInfo *>>::push_back(std__vector *this, tagAccountInfo *pInfo); // idb
bool __cdecl ProcessIsNetCclr_0(tagTREEVIEWLISTITEMPARAM *a1); // idb
int __cdecl sub_10109A0(wchar_t *Dst, int, __int64); // idb
int __cdecl sub_10109F0(wchar_t *Dst, int, __int64); // idb
errno_t __cdecl sub_1010A40(wchar_t *a1, int a2, __int64 a3);
int wsprintfW(wchar_t *Dst, wchar_t *Format, ...);
int __thiscall sub_1010A90(BitmapItem *this, int a2, int a3, int a4, int a5, unsigned int a6, int a7);
char __thiscall BitmapItem_Create(BitmapItem *this, LONG nWidth, signed int nHeight); // idb
char __thiscall BitmapItem_SetRectColor(BitmapItem *this, RECT *lprc, unsigned int color); // idb
int __cdecl sub_1010E00(wchar_t *Dst, size_t SizeInWords, int, __int64); // idb
char __thiscall sub_1010E50(BitmapItem *this, int a2, int a3, int a4, int a5, unsigned int a6, int a7);
char __thiscall sub_1010ED0(_DWORD *this, int a2, int a3, int a4, int a5, unsigned int a6, char a7);
void __cdecl CGraphData_Update(CGraphData *pGraphData, FILETIME time, double dbMemorySize, double a5, wchar_t *a6);
CGraphData *__cdecl InitGraphData(int nCount, int nChildID, BOOL fFlags);
void __cdecl GraphData_Release(CGraphData *pGraphData, int nCount); // idb
HWND __cdecl CreateGraphWindow(HWND hDlg, int nIDDlgItem, PVOID pParam); // idb
HGDIOBJ __cdecl GraphData_DrawGraph(CGraphData *pGraphData, HDC hDC, RECT *lprc);
HICON __cdecl GraphData_DrawChart(CGraphData *pGraphData, HDC hDC, RECT *lprc, COLORREF Color, DWORD dwValue, double dbValue);
char *__cdecl sub_1011FD0(FILETIME *a1, HDC hDC, RECT *lprc, COLORREF ColorBack); // idb
int __cdecl GraphData_QueryData(CGraphData *pGraphData, double *pArg1, double *pArg2);
int __cdecl PE_FormatDouble(char bFlags, wchar_t *pszText, size_t dwLength, double dbValue1, double dbValue2, double dbValue3);
errno_t __cdecl sub_1012410(wchar_t *a1, rsize_t SizeInWords, int a3, __int64 a4);
void __cdecl sub_10124C0(int a1);
int __cdecl sub_1012A70(HWND hWnd); // idb
PerformanceInfo *__thiscall PerformanceInfo::PerformanceInfo(PerformanceInfo *this, HKEY hSubKey); // idb
void __thiscall PerformanceInfo::~PerformanceInfo(void **this);
int __thiscall PerformanceInfo::FindPerf(PerformanceInfo *pThis, LPCWSTR lpszName); // idb
int __thiscall sub_1012D20(unsigned int *this, unsigned int a2);
LRESULT __cdecl HandleCmdHandler(int a1, HWND hWnd, WPARAM wParam, LPARAM lParam);
LRESULT __cdecl HandleMsgHandler(tagMSGHANDLER *pMsgHander, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); // idb
bool __cdecl CDriver::SaveDriverFromResource(LPCWSTR lpName, const wchar_t *lpszFileName);
BOOL __cdecl CDriver::OpenEx(const WCHAR *lpszDriverName, WCHAR *lpszPathName, PHANDLE DriverHandle); // idb
BOOL __cdecl CDriver::Open(const WCHAR *lpszDriverName, PHANDLE DriverHandle); // idb
_DWORD *__stdcall sub_1013310(_DWORD *a1, _DWORD *a2, _DWORD *a3);
char __cdecl sub_1013340(HANDLE ProcessHandle, int a2, int a3, int time, int time_4, tagTREEVIEWLISTITEMPARAM *pItemParam, WPARAM wParam);
void __cdecl sub_10138F0(FILETIME time, signed __int64 a2, int a3, int a4, int a5, CGraphData *a6, CGraphData *a7);
BOOL __cdecl Init3DStatistics(unsigned __int64 *a1, unsigned __int64 *a2);
_DWORD *__stdcall sub_1014360(_DWORD *a1, _DWORD *a2);
CGraphData *__thiscall GraphInfo_Init(tagGraphInfo *pThis); // idb
signed __int64 __thiscall GraphInfo_Refresh(tagGraphInfo *pGrahInfo_1); // idb
void __thiscall sub_10144A0(tagGraphInfo *this, TreeList_Item1 *pItem); // idb
int __stdcall sub_10147C0(int a1, TreeList_Item1 *a2);
int __cdecl CMainWnd::Create(HINSTANCE hInstance, int nCmdShow); // idb
int __cdecl wsprintf(wchar_t *Dst, wchar_t *Format, char ArgList); // idb
int MakeHandlePropSheetCaption(wchar_t *Dst, wchar_t *Format, ...);
CString *__thiscall sub_1014BD0(CString *this, LPCSTR lpMultiByteStr);
CString *__thiscall ATL::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::operator=(CString *this, LPCSTR lpMultiByteStr);
int __stdcall PE_AutoAppendPostfix(HDC hDC, WCHAR *pszText, DWORD dwLength, LONG nWidth);
signed int __cdecl sub_1014EF0(unsigned int *a1, _DWORD *a2);
char __cdecl sub_1014F50(CRegSettings *pConfig, DWORD *pdwValue, unsigned int a3); // idb
BOOL __stdcall PE_DrawText(HDC hDC, LPCWSTR lpszText, RECT *lprc, BOOL fAlignRight);
char __cdecl sub_10156D0(char a1, tagTREEVIEWLISTITEMPARAM *pTreeItem, WORD uID, HDC hDC, RECT *lprc); // idb
errno_t __cdecl sub_1015AD0(int a1, int a2, int a3, int a4, int a5, wchar_t *Dst, rsize_t SizeInWords);
LPCWSTR __cdecl PE_GetDoubleString(wchar_t *pszText, double dbValue); // idb
char __cdecl QueryListItemColor(HWND hWnd, int nItem, BOOL bFocused, COLORREF *pTextColor, COLORREF *pBackColor);
BOOL __cdecl CTreeList::SetHeaderItem(HWND hWndHeader, WPARAM wParam, int fImage); // idb
BOOL __stdcall EnumFunc(HWND, LPARAM); // idb
char __cdecl IsStringID(signed int uID); // idb
unsigned __int16 __cdecl sub_1016210(double a1, unsigned __int16 a2, unsigned __int16 a3);
int __cdecl sub_1016270(int a1, int a2);
void __cdecl RegVar_ReadWrite(int fSave, int nCount, CRegVar *pVariable); // idb
int __cdecl sub_10173D0(HWND hWnd, char); // idb
char __cdecl CTreeList_InsertVerifyColumn(HWND hWnd, UINT uID, int *pnIDs, int pnLength); // idb
int __cdecl sub_1017790(HWND hWnd, char); // idb
wchar_t *__cdecl sub_10178D0(HWND a1, wchar_t *a2);
int sub_1017A90(HWND hWnd, ...);
tagTREEVIEWLISTITEMPARAM *__cdecl CTreeList::FindItem(HWND hWnd, LPARAM lParam);
tagTREEVIEWLISTITEMPARAM *__cdecl sub_1017DD0(HWND hWnd, void *pItem); // idb
tagItem290_PageProcThreads *__cdecl tagItem290_PageProcThreads_InsertToList(HWND hWnd, char a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50, int a51, int a52, int a53, int a54, int a55, int a56, int a57, int a58, int a59, int a60, int a61, int a62, int a63);
int __cdecl sub_1017F20(HWND hWnd, tagTREEVIEWLISTITEMPARAM *pItemParam); // idb
void __cdecl TreeViewItemParam_InitGraph(tagTREEVIEWLISTITEMPARAM *pItem); // idb
struct _IMAGELIST *InitSortableImageList();
HWND __cdecl CreateListCtrl(HWND hWnd, DWORD dwStyle, int a3, int a4, LONG dwNewLong, HMENU hMenu);
void __cdecl sub_1018460(tagTREEVIEWLISTITEMPARAM *a1); // idb
tagTREEVIEWLISTITEMPARAM *__cdecl sub_1018570(HWND hWnd, tagTREEVIEWLISTITEMPARAM *a2);
void __cdecl DLLLISTITEMPARAM_Release(tagTREEVIEWLISTITEMPARAM *lpAddend); // idb
void __cdecl TreeViewListItemParam_Release(tagTREEVIEWLISTITEMPARAM *a1); // idb
char __cdecl CMainWnd::DrawList(LPDRAWITEMSTRUCT pDrawItemStruct); // idb
int __cdecl UpdateMenuStatus(char bEnabled, int nPos); // idb
BOOL __cdecl sub_1018DA0(tagTREEVIEWLISTITEMPARAM *pItemParam); // idb
char __cdecl ProcStrings_FindItem(HWND hDlg, HWND hWndList, tagFINDREPLACEW *pFindReplace, LPCWSTR lpszFindWhat, PBOOL pbFound, wchar_t *pszBuffer);
void InitDrawEngine();
BOOL __cdecl PE_SelectFont(HWND hWnd);
LRESULT __cdecl ProcPageInitList(HWND hWnd, LONG dwNewLong, UINT *pnIDs, WORD *pnWidths, char fSortable);
char __cdecl IsColumnIDValid(HWND hWnd, DWORD dwId);
int __stdcall Proxy_ListCtrlWndProc(HWND hWnd, UINT Msg, WPARAM wParamIn, LPARAM lParamIn);
LRESULT __cdecl sub_101A880(HWND hWnd, WPARAM uMsg, WPARAM wParam_1, RECT *lParam_1); // idb
BOOL __cdecl CTreeList::InitListCtrl(HWND hWnd, WPARAM wParam);
int __stdcall PropProcThreadsSortCallback(int a1, int a2, int *a3);
int __stdcall InitListHeader(HWND hWnd, UINT *pnIDs, WORD *pnWidths, LONG nColumnCount); // idb
int __cdecl sub_101CDD0(int a1, int a2);
int __cdecl PE_ShowProcessTree(WPARAM uTabID, tagHwndID *pThis); // idb
int __cdecl sub_101D4B0(signed int a1, int a2);
int __cdecl FillList(int nID); // idb
int __cdecl sub_101D7A0(int a1);
int __cdecl sub_101D7B0(signed int a1, int pItem); // idb
int __cdecl sub_101F490(int a1, int a2);
int __cdecl sub_101F4D0(HMENU uCtrlID); // idb
int __cdecl UpdateListViewContextMenu(UINT nID, HWND hWnd, POINT *pt);
bool __cdecl CTreeList::InitHeaderColumn(HWND hWnd, WPARAM wParam, HWND nItem, char flags); // idb
LRESULT __cdecl sub_101FAA0(HWND hWnd);
BOOL __stdcall DlgColumnSets(HWND hWndIn, UINT msg, WPARAM nID, NMLVDISPINFOW *lParam);
BOOL __cdecl CMainWnd::Draw(int nColumn, HDC hdc, COLORREF *pColorReturned); // idb
HCURSOR __cdecl CMainWnd::GetDynamicCursor(int a1, int nIndex); // idb
char __cdecl RedrawColumn(int fRedraw, HWND hWnd, int uID, WPARAM wParam); // idb
BOOL __stdcall DlgColumnSetSave(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
void __cdecl UpdateWindowPlacement(HWND hWnd, char bSave); // idb
int __stdcall PropColumnSetsForDlls(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __stdcall PropColumnSetsForHandles(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __stdcall PropColumnSetsForNet(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __stdcall PropColumnSetsForProcess(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __cdecl sub_1021AF0(_DWORD *a1, _DWORD *a2);
signed int __cdecl sub_1021B70(int a1, HWND *a2);
signed int __cdecl sub_1021C50(int a1, int a2);
BOOL RefreshTreeView();
int MakeAddressInfo(char *DstBuf, char *Format, ...);
int sub_1021D80(wchar_t *Dst, wchar_t *Format, ...);
int *__thiscall sub_1021DA0(int *this, void *a2);
string *__thiscall sub_1021E00(void *this, void *a2);
HRESULT __cdecl sub_1021E50(char a1, OLECHAR *a2);
void *__cdecl sub_10226B0(void *a1);
errno_t __cdecl sub_1022850(wchar_t *Dst, rsize_t SizeInWords);
char __cdecl sub_1022910(int a1, int a2, int a3, wchar_t *Dst, rsize_t SizeInWords);
WCHAR *__cdecl PE_LoadEnvKey(HKEY hKey, LPCWSTR lpValueName);
void __cdecl tagItem124_InTcpUdp_Query(tagItem124_InTcpUdp *a1); // idb
char __cdecl WriteStringToList(HWND a1, unsigned int a2, int a3, unsigned int a4);
BOOL __cdecl IsServer(LPCWSTR lpszServerName);
string *__thiscall sub_10230E0(void *this, int a2, int a3, int a4);
string *__thiscall sub_10231B0(void *this, void *a2, int a3);
LPCWSTR __cdecl PE_GetNumberFormat(LPCWSTR lpValue, rsize_t SizeInWords);
void __cdecl sub_1023300(wchar_t *a1);
BOOL __cdecl ReplaceMenuIconFromStockIcon(HMENU hmenu, UINT item);
bool __cdecl sub_10236B0(int a1, unsigned int a2, char a3, char a4);
HWND __cdecl PropSheet_UpdateTab(HWND hWnd);
signed int __cdecl sub_10237B0(unsigned __int64 a1, unsigned __int64 a2);
BOOL __cdecl sub_10237F0(char a1);
LRESULT __cdecl CTreeList::InitToolTips(HWND hWnd);
BOOL __cdecl DrawLine(HWND hWnd, int y);
char __cdecl MakeApplicationName(LPCWSTR lpFileName, wchar_t *Src, int a3, wchar_t *Dst);
HWND __cdecl QueryTopMostWindowByProcessID(int dwProcessId_1); // idb
int __cdecl PE_FormatDoubleFlow(WCHAR *pszText, DWORD dwLength, double dbValue);
char __cdecl UserInfoWithSIDList_Find(PSID pSID, LPWSTR pszName, DWORD cbName, LPWSTR pszDomainName, DWORD cbDomainName); // idb
int *__cdecl sub_1023E70(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION pSystemLogicalProcessorInfo, int dwCount, signed int dwProcessorID, signed int *pnValue1, int *pnValue2);
int __cdecl sub_1023F20(_DWORD *a1, unsigned int a2, int a3);
void __cdecl PE_LoadProductCopyright(wchar_t *pszFileName_1, _bstr_t *strText1, _bstr_t *strText2, _bstr_t *bstrDesc, _bstr_t *strCopyright); // idb
wchar_t *__cdecl sub_1024280(wchar_t *a1);
DWORD __cdecl PE_GetProductCopyright(LPCWSTR lpszFileName, wchar_t *pszBuffer, rsize_t cbBufLen, WCHAR **ppszDesc, WCHAR **ppszCopyright); // idb
char __cdecl sub_10244B0(int a1, char a2, int a3, u_long hostlong, tagItem124_InTcpUdp *a5, wchar_t *Dst, size_t SizeInWords); // idb
wchar_t *__cdecl sub_1024670(char a1, int port, char *proto, wchar_t *Dst, size_t SizeInWords);
wchar_t *__cdecl ProcessComment_Find(wchar_t *ProcessName); // idb
int __cdecl sub_1024730(wchar_t *, int);
WCHAR *__cdecl sub_1024780(wchar_t *a1, LPCWSTR lpServiceName);
wchar_t *__cdecl sub_1024990(int a1);
BOOL __cdecl DrawHungWindow(HWND hWnd);
// bool __usercall IsProcessExplorerRunAtStartup@<al>(int a1@<ebp>, _DWORD *a2@<edi>);
bool IsXPDll();
char __cdecl sub_10250E0(wchar_t *a1);
char IsPAEEnabled();
char CanReplaceTaskManager();
// int __usercall IsWinServer@<eax>(int a1@<ebx>, int a2@<esi>);
BOOL __cdecl CMainWnd::Hide(HWND hWnd);
// _DWORD __cdecl unknown_libname_2(char); weak
char *__cdecl Fake_GetLogicalProcessorInformation(PDWORD pdwCount);
BOOL __cdecl PE_SetWindowPlacement(HWND hWnd, POINT pt);
char __cdecl LaunchWebBrowser(HWND hWnd, bool flags, LPCWSTR lpszURL);
int __cdecl sub_1025A60(const void *, const void *); // idb
LSTATUS LoadHiddenProcessesFromRegistry();
LSTATUS LoadProcessCommentsFromRegistry();
char __cdecl ReplaceTaskManager(HWND a1, char a2);
char __thiscall sub_1025E40(HKEY this);
DWORD __cdecl LaunchProcExplorer64(int a1, WORD a2);
DWORD __cdecl sub_1026180(const WCHAR *a1, int a2, char a3);
int Fake_IsWow64Process();
LSTATUS __cdecl sub_10262A0(int a1, wchar_t *a2);
char __cdecl sub_10264C0(HWND hWnd, LPCWSTR lpFileName);
HCURSOR __cdecl LoadStringToList(HWND hWnd, HANDLE ProcessHandle, LPCVOID lpBaseAddress, DWORD dwSize);
int __cdecl PE_FillControl(int, HDC hdc); // idb
int __cdecl QueryTagInformationEx(PVOID *ppv, PDWORD pdwValue2, PDWORD pdwValue3, PDWORD pdwValue4);
BOOL __cdecl TrayIcon_Add(HWND hWnd, UINT nID, CGraphData *pGraphData, LPCWSTR lpszTipText);
BOOL __cdecl TrayIcon_Delete(HWND hWnd, UINT nID);
BOOL __cdecl sub_1026910(int a1, int a2, int a3, wchar_t *Src);
BOOL __cdecl RefreshVirusTotalMenuItem(tagTREEVIEWLISTITEMPARAM *pItemParam); // idb
BOOL __cdecl RefreshMenuWithTreeViewItemStatus(tagTREEVIEWLISTITEMPARAM *pItem); // idb
bool __cdecl sub_1026B90(HWND hWnd, int a2, int a3);
LSTATUS SaveHiddenProcessesToRegistry();
HANDLE __cdecl sub_1026DB0(HANDLE TokenHandle);
BOOL __cdecl QueryCurrentAuthorityInfo(wchar_t **a1);
BOOL __cdecl QueryAuthorityInfoFromSID(PSID pSid, wchar_t *Dst, int a3);
char IsBuiltinAdministrative();
_DWORD *__cdecl sub_1027450(PSID AccountSid);
int sub_1027500(wchar_t *Dst, wchar_t *Format, ...);
_DWORD *__thiscall sub_1027520(_DWORD *this, int (__stdcall ***a2)(_DWORD, GUID *, _DWORD *));
_DWORD *__thiscall sub_1027560(_DWORD *this, int (__stdcall ***a2)(_DWORD, GUID *, _DWORD *));
_DWORD *__thiscall sub_10275A0(_DWORD *this);
int __thiscall sub_1027600(_DWORD *this, int a2);
_DWORD *__thiscall sub_1027640(void *this, char a2);
unsigned int __thiscall sub_10276F0(_DWORD *this, int *a2);
_DWORD *__thiscall sub_1027740(_DWORD *this, int *a2);
void __stdcall sub_10277E0(int *a1);
void __cdecl sub_10279A0(_DWORD *a1, int a2);
int __cdecl sub_10279D0(int a1, unsigned int a2);
int __cdecl sub_1027A00(HWND hWnd, int, char); // idb
signed int __stdcall sub_1027DD0(int (__stdcall ***a1)(_DWORD, GUID *, int *));
int __cdecl sub_1027F10(int, LPCWSTR lpsz, int); // idb
int __thiscall sub_1027F60(_DWORD *this);
void __thiscall sub_1027F70(_DWORD *this);
signed int __stdcall sub_1027FF0(unsigned int a1, _DWORD *a2, unsigned int *a3);
signed int __stdcall sub_10280C0(int (__stdcall ***a1)(_DWORD, GUID *, int *), _DWORD *a2);
int __stdcall sub_10286C0(int a1, _DWORD *a2);
int *__cdecl sub_10286E0(wchar_t *a1, int a2);
int __cdecl sub_1028790(wchar_t *Src, wchar_t *Dst); // idb
int __stdcall sub_10287D0(int, DWORD dwThreadId, int, int, int); // idb
char __thiscall sub_10288A0(const void **this, unsigned int a2);
FARPROC __thiscall sub_1028940(_DWORD *this, _DWORD *a2);
int __thiscall sub_1028A30(_DWORD *this, int a2, int a3, int a4, int a5);
int __thiscall sub_1028A90(_DWORD *this, int a2, int a3, int a4, int a5);
void __thiscall sub_1028AE0(int *this, unsigned int a2, int *a3, unsigned int a4);
int (__stdcall ***__stdcall sub_1028C80(int (__stdcall ***a1)(_DWORD, GUID *, int *)))(_DWORD, GUID *, int *);
signed int __thiscall sub_1028D10(_DWORD *this, int a2);
BOOL __cdecl sub_1028DE0(int a1);
int __thiscall sub_1028E20(void *this, int a2, int a3, int *a4, _DWORD *a5, _DWORD *a6, int a7, unsigned int a8, unsigned int *a9);
signed int __thiscall sub_1029500(_DWORD *this, int a2, int a3, int a4);
signed int __stdcall sub_1029620(int a1, int a2, int a3, int a4, HMODULE *a5);
signed int __stdcall sub_1029780(int a1, _DWORD *a2, _DWORD *a3);
signed int __stdcall sub_1029800(int a1, _DWORD *a2, _DWORD *a3);
signed int __stdcall sub_1029880(int a1, _DWORD *a2, _DWORD *a3);
signed int __stdcall sub_10298D0(int a1, int a2, int a3);
int __stdcall sub_10298E0(int, LPCVOID lpBaseAddress, int, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead); // idb
int __stdcall sub_1029910(void *); // idb
int __stdcall sub_1029940(_DWORD *a1);
int __stdcall sub_1029960(void *); // idb
int __stdcall sub_10299B0(void *); // idb
int __cdecl sub_1029A00(void *Dst, void *Src, int); // idb
_DWORD *__thiscall sub_1029A30(_DWORD *this);
_DWORD *__thiscall sub_1029AC0(int *this, _DWORD *a2);
int __stdcall sub_1029B40(DWORD dwThreadId); // idb
char __thiscall sub_1029B80(int this, unsigned int a2, int a3);
int __thiscall sub_1029C50(_DWORD *this, int a2, int a3, int a4);
signed int __stdcall sub_102A3A0(_WORD *a1, unsigned int a2, int a3);
signed int __stdcall sub_102A440(_WORD *a1, unsigned int a2, int a3, unsigned int a4);
signed int __stdcall sub_102A490(_WORD *a1, int a2, _DWORD *a3, int a4, int a5);
signed int __stdcall sub_102A500(_WORD *a1, unsigned int a2, _DWORD *a3, unsigned int a4);
HANDLE __thiscall sub_102A570(void *this, DWORD dwThreadId, int a3, int a4, int a5, int a6, int a7);
char __cdecl sub_102A870(tagTREEVIEWLISTITEMPARAM *pItem, WPARAM wParam); // idb
int __thiscall sub_102B0A0(_DWORD *this, DWORD dwThreadId, int a3);
int __thiscall sub_102B680(_DWORD *this, DWORD dwThreadId, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12);
void LoadNetClrMemoryPerformanceInfo();
void *__cdecl sub_102B9D0(int a1);
int __stdcall PageProcNet(HWND hWnd, unsigned int a2, WPARAM wParam, int a4);
int dynamic_initializer_for_gPerformanceInfoInMemory__();
char __cdecl sub_102C540(tagTREEVIEWLISTITEMPARAM *a1, WPARAM wParam); // idb
CSystemProcessInfoMapNode *__thiscall std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>>,0>>::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long &&>,std::tuple<>>(CSystemProcessInfoMap *this, CSystemProcessInfoMapPair *a1); // idb
CSystemProcessInfoMapNode **__thiscall sub_102C630(CSystemProcessInfoMap *thisMap, CSystemProcessInfoMapNode **ppNode, char a3, CSystemProcessInfoMapNode *pNode, CSystemProcessInfoMapPair *pair, int a6); // idb
int __thiscall std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const,unsigned long>>>::operator[](CSystemProcessInfoMap *thisMap, int a2, _DWORD *a3, _DWORD *dwThreadId, int a5); // idb
signed int __stdcall LogBufferCallback(int a1);
HANDLE ScanAllThreads();
ULONG __thiscall TraceEventThreadProc(EVENT_TRACE_PROPERTIES_EXT *this);
ULONG __stdcall TraceEventThreadProcEx(EVENT_TRACE_PROPERTIES_EXT *a1);
__int64 __thiscall PE_ComputeTime(PE_TIME *this, __int64 time);
unsigned __int8 *__cdecl sub_102CC70(int a1, int a2, int a3, wchar_t *Dst, rsize_t SizeInWords);
ULONG __thiscall PE_FlushTrace(LPEVENT_TRACE_PROPERTIES_EXT Properties); // idb
int __cdecl NetworkMsgItem2_FindID(WCHAR *lpszText); // idb
std_Tree_node_for_tagKeyName *__cdecl sub_102D2B0(unsigned int a1);
signed int __thiscall PE_RunTrace(EVENT_TRACE_PROPERTIES_EXT *PropertiesIn, char fStart);
void __cdecl sub_102D510(EVENT_TRACE *EventTrace, EventList *Param); // idb
void __stdcall LogEventCallback(PEVENT_TRACE EventTrace); // idb
void __cdecl sub_102DB50(EVENT_TRACE *EventTrace, EventList *a2); // idb
void __cdecl sub_102DCE0(EVENT_TRACE *EventTrace, EventList *a2); // idb
int **__cdecl sub_102E310(int a1, int a2);
int __cdecl sub_102E4E0(int, PSID Sid); // idb
_DWORD *__thiscall sub_102E560(int *this, _DWORD *a2, unsigned int *a3);
void __stdcall sub_102E5E0(CSystemProcessInfoMapNode *a1); // idb
CSystemProcessInfoMapNode *__thiscall sub_102E620(CSystemProcessInfoMap *this);
_DWORD *__thiscall sub_102E670(_DWORD *this, int a2, int a3, int a4, int a5, int a6);
wchar_t **__thiscall sub_102E6A0(int **this, wchar_t *a2);
wchar_t **__thiscall sub_102E760(PerformanceInfo **this, LPCWSTR lpsz);
wchar_t **__thiscall sub_102E830(int this);
wchar_t **__thiscall sub_102E840(int this);
int __thiscall sub_102E850(int *this, wchar_t *Dst, rsize_t SizeInWords);
// PE_PerfInfo *__thiscall unknown_libname_3(PE_PerfInfo *this, int a2, int a3);
PE_PerfInfo_Item *__thiscall PE_PerfInfo::Load(PE_PerfInfo *this, LPCWSTR lpszName);
char __cdecl PE_CheckExeFile(LPCWSTR lpFileName, DWORD *pTimeDateStamp, BOOL *pbRet, LPCVOID lpBaseAddress); // idb
wchar_t **__thiscall sub_102EC40(wchar_t **this, wchar_t *a2, int a3, void *a4, unsigned int a5);
void __thiscall sub_102EC80(void **this);
signed int __thiscall sub_102ECA0(int this, _DWORD *a2, int a3);
PE_PerfInfo_Item *__thiscall sub_102ED40(PE_PerfInfo_Item *this, int a2, PerformanceInfo *a3); // idb
_DWORD *__thiscall sub_102ED60(_DWORD *this);
_DWORD *__thiscall sub_102EE00(_DWORD *this);
PerformanceInfoInMemory *__thiscall PE_PerfInfo::PE_PerfInfo(PerformanceInfoInMemory *this, PerformanceInfo *a2);
int __thiscall PerformanceInfoInMemory::FindPerf(PerformanceInfoInMemory *this, LPCWSTR lpszName, wchar_t *pszBuffer, int nLength); // idb
int __thiscall sub_102EF90(PerformanceInfoInMemory *this); // idb
WCHAR *__thiscall sub_102EFA0(PerformanceInfoInMemory *this);
int __thiscall PerformanceInfoInMemory::Load(PerformanceInfoInMemory *pThis, LPCWSTR lpszRootName, LPCWSTR lpszName); // idb
int __cdecl CMainWnd::HandleMsg7FD(int, int, int, void *); // idb
int __cdecl CMainWnd::HandleDeviceChange(HWND a1, unsigned int a2, unsigned int wParam, _DEV_BROADCAST_HDR *lParam); // idb
int __cdecl CMainWnd::HandleMsg7F9(int a1, int a2, int a3, int a4);
int __cdecl Command_CreateDump(HWND a1, __int16 a2);
int Command_RestartProcess();
int Command_KillProcess();
int __cdecl Command_Exit(HWND hWnd); // idb
int Command_OpenProcExp();
int Command_CopyAllThreadStack();
int Command_RefreshNow();
int __cdecl Command_SelectColumn(HWND hWnd, signed __int16 uID); // idb
int __cdecl Command_ShowDllsPane(HWND hWnd); // idb
int __cdecl Command_ShowHandlesPane(HWND hWnd); // idb
int __cdecl Command_ViewDllsProperties(HWND hWnd);
int __cdecl Command_UnnamedHandlesAndMappings(HWND hWnd); // idb
int __cdecl Command_HighlightRelocatedDlls(HWND hWnd); // idb
int __cdecl Command_ScrollToNewProcess(HWND hWnd); // idb
int __cdecl Command_Help(int a1);
int __cdecl Command_SearchOnline(HWND hWnd, __int16 a2);
int __cdecl Command_FindInProcess(HWND a1, __int16 nID); // idb
int __cdecl Command_Cancel(HWND hWnd); // idb
int Options_ShowHiddenProcess();
int __cdecl Command_Font(HWND hWnd); // idb
int Command_OnProperties();
int __cdecl sub_1030970(int a1, __int16 a2);
int Command_OptionsToConfirmKill();
int Command_ShowNewProcesses();
int Command_SaveHiddenProcesses();
int __cdecl Command_DifferenceHiliteDuration(HWND hWndParent); // idb
int Command_Save();
int __cdecl Command_CpuHistory(HWND hWndParent); // idb
int Command_SaveAs();
int Command_CloseHandle();
int Command_SuspendProcess();
int __cdecl Command_ShowLowerPane(HWND a1);
int __cdecl OnProperties(HWND a1, __int16 nID); // idb
int __cdecl UpdateSpeedOptions_Update(HWND a1, UINT a2);
int OnProcessProperties();
// int __usercall ProcessPriority_Update@<eax>(int a1@<edi>, HWND a2, __int16 a3);
int Options_AllowOneInstance();
int __cdecl Command_Run(HWND hWndParent, int); // idb
int __cdecl Command_RunAs(HWND hWndParent, int); // idb
int __cdecl Options_HideWhenMinimized(HWND hWnd); // idb
int __cdecl OpacityOptions_Update(HWND hWnd, int); // idb
int __cdecl UserAccount_Refresh(HWND a1, __int16 a2);
int __cdecl Command_ReplaceTaskManager(HWND hWnd); // idb
int __cdecl Command_ConfigSymbols(HWND hWndParent); // idb
int Command_SystemInformation();
int __cdecl Command_ConfirmToKillProcess(HWND hWnd); // idb
int __cdecl Command_ConfigColors(HWND hWndParent); // idb
int Process_CleanMemory();
int __cdecl WindowOptions_Refresh(HWND a1, int a2);
int Command_ShowColumnHeatmaps();
int __cdecl Command_VerifyImage(HWND hWnd); // idb
int __cdecl Command_CheckVirusTotalDotCom(HWND hWnd); // idb
int __cdecl Command_SubmitUnkownExecutables(HWND hWnd); // idb
int Command_CheckVirusTotalDotCom();
int Command_Check_VirusTotalDotCom();
int Command_ShowDetailsForAllProcesses();
int __cdecl Command_SetTopmost(HWND hWnd); // idb
int __cdecl Command_ViewCpuHistory(HWND hWnd); // idb
int __cdecl Command_ViewIoHistory(HWND hWnd); // idb
int __cdecl Command_CommitNetworkHistory(HWND hWnd); // idb
int __cdecl Command_CommitDiskHistory(HWND hWnd); // idb
int __cdecl Command_CommitGPUHistory(HWND hWnd); // idb
// int __usercall Command_RunAtLogon@<eax>(_DWORD *a1@<edi>, HWND hWnd);
int __cdecl Command_ViewCommitHistory(HWND hWnd); // idb
int __cdecl Command_ViewPhysicalMemoryHistory(HWND hWnd); // idb
// signed int __usercall Command_SetColumn@<eax>(double a1@<st0>, double a2@<st1>, HWND hWnd, unsigned __int16 uID);
int sub_1032F00();
int sub_1032F10();
int __cdecl Command_LaunchDepends(HWND a1, __int16 a2);
int Command_DebugProcess();
int __cdecl Command_ShowProcessesForAllUsers(HWND hWnd); // idb
int __cdecl Command_SaveColumnSet(HWND hWndParent); // idb
int __cdecl Command_OrganizeColumnSets(HWND hWnd); // idb
LRESULT __cdecl CMainWnd::HandleCommand(HWND hWnd, int a2, WPARAM wParam, LPARAM lParam);
int __cdecl CMainWnd::HandlePaint(HWND hWnd); // idb
int __cdecl CMainWnd::HandleSize(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __cdecl CMainWnd::HandleGetMinmaxInfo(HWND a1, unsigned int a2, unsigned int a3, MINMAXINFO *a4); // idb
int __cdecl CMainWnd::HandleLBtnDown(HWND hWnd, int, int, int); // idb
int __cdecl CMainWnd::HandleLBtnUp(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __cdecl CMainWnd::HandleMouseMove(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
BOOL __cdecl CMainWnd::HandleMeasureItem(HWND a1, unsigned int a2, unsigned int a3, LPMEASUREITEMSTRUCT lpmis); // idb
int __cdecl CMainWnd::HandleNotify(HWND hWnd, UINT msg, WPARAM wParam, NMHDR *lParam);
int __cdecl CMainWnd::HandleCreate(HWND hWnd); // idb
int __cdecl CMainWnd::HandleClose(HWND hWnd);
int CMainWnd::HandleEndSession();
int __cdecl CMainWnd::HandleDestroy(HWND hWnd); // idb
int __cdecl CMainWnd::HandleDrawItem(HWND a1, unsigned int a2, unsigned int a3, LPDRAWITEMSTRUCT a4); // idb
signed int __cdecl CMainWnd::HandleSetFocus(HWND a1);
LRESULT __cdecl CMainWnd::HandleContextMenu(HWND hWnd_1, UINT Msg, HWND hWnd, LPARAM a4); // idb
int __cdecl CMainWnd::HandleMsg7EF(int, int, int, void *); // idb
int __cdecl CMainWnd::HandleMsg7F8(HWND a1, unsigned int a2, unsigned int a3, const wchar_t **a4);
int __cdecl CMainWnd::HandleMsg7F6(int, int, int, HWND hWnd); // idb
signed int CMainWnd::HandleKillFocus();
int __cdecl CMainWnd::HandleMsg7F0(HWND a1, unsigned int a2, unsigned int a3, int pListItem); // idb
_DWORD *__cdecl CMainWnd::HandleMsg7EE(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __cdecl CMainWnd::HandleInitMenuPopup(HWND hWnd, unsigned int nPos, HMENU hMenu);
LRESULT __cdecl CMainWnd::HandleMenuCommand(HWND hWnd, int a2, int nPos, HMENU hMenu);
signed int __cdecl CMainWnd::HandleCopyData(HWND hWnd, UINT msg, WPARAM wParam, PCOPYDATASTRUCT lParam);
int __cdecl CMainWnd::HandleMsg7F3(HWND a1, unsigned int a2, unsigned int a3, int a4);
int __cdecl CMainWnd::HandleMsg7E8(int, int, HWND hWnd); // idb
int __cdecl CMainWnd::HandleMsg7E9(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT __cdecl CMainWnd::HandleSysCommand(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int __cdecl CMainWnd::HandleMsg7EB(int, int, WPARAM wParam, WPARAM); // idb
int sub_10368E0(wchar_t *Dst, wchar_t *Format, ...);
CString *__thiscall ATL::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(CString *this, LPCSTR lpMultiByteStr, int cbMultiByte);
HBRUSH __stdcall DlgSelectColor(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam); // idb
int __stdcall PropColumnSetsForStatusBar(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
BOOL __stdcall DialogFunc(HWND, UINT, WPARAM, LPARAM); // idb
void __cdecl sub_1037930(int a1);
HBRUSH __cdecl BrushFromColor(COLORREF color, HBRUSH *BrushHandle); // idb
char __cdecl sub_10379E0(char a1);
BOOL __cdecl sub_1037A60(HWND hWnd);
int __cdecl SelectColor(HWND hWnd, COLORREF *ColorReturned); // idb
int __stdcall CMainWnd::BackendRefreshThreadProc(struct VOID *a1);
BOOL __stdcall sub_1037F60(HWND, UINT, WPARAM, LPARAM); // idb
int __stdcall sub_10385F0(HWND hDlg, int, int, int); // idb
BOOL __stdcall DlgSymbolConfig(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam); // idb
char __cdecl BrowseSymbolPath(HWND hWnd, LPWSTR pszPath); // idb
BOOL BackendSysInfoPropSheetThreadProc();
const wchar_t *__cdecl sub_1038D50(int a1);
BOOL __stdcall sub_1038DE0(HWND, UINT, WPARAM, LPARAM); // idb
CGraphData *HandleTaskbarCreated();
void __cdecl ShowSymbolConfigWarning(HWND hWnd); // idb
int __cdecl SearchWindow(HWND hWnd); // idb
LRESULT __stdcall CMainWnd::MainWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int __cdecl DumpFileProcess(int, HANDLE Process, char); // idb
int __cdecl sub_1039660(int, int, wchar_t *Dst); // idb
_DWORD *__thiscall sub_1039690(_DWORD *this, int a2);
int __thiscall std::_Tree<std::_Tmap_traits<unsigned long,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>>,0>>::_Insert_at<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *> &,std::_Tree_node<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>,void *> *>(CSystemProcessInfoMap *this, int a2, char a3, int a4, int a5, CSystemProcessInfoMapNode *_Node); // idb
_DWORD *__thiscall sub_10398E0(_DWORD *this, _DWORD *a2, char a3, _DWORD *a4, int a5, int a6);
int __thiscall std::_Tree<std::_Tmap_traits<unsigned long,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>>,0>>::_Insert_hint<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *> &,std::_Tree_node<std::pair<unsigned long const,_SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *>,void *> *>(CSystemProcessInfoMap *this, int a2, int _Where, int _Val, CSystemProcessInfoMapNode *_Newnode); // idb
int __thiscall sub_1039C10(_DWORD *this, int a2, _DWORD *a3, _DWORD *a4, int a5);
int MakeDriverName(wchar_t *pszText, wchar_t *lpszFormat, ...); // idb
int wsprintfW(wchar_t *Dst, wchar_t *Format, ...);
int sub_1039D60(wchar_t *Dst, wchar_t *Format, ...);
int wsprintf_s(wchar_t *Dst, wchar_t *Format, ...);
int sub_1039DA0(wchar_t *Dst, wchar_t *Format, ...);
int MakeDeviceName(wchar_t *Dst, wchar_t *Format, ...);
int sub_1039DE0(wchar_t *Dst, wchar_t *Format, ...);
int *__thiscall sub_1039E00(_DWORD *this, LPCWSTR lpWideCharStr);
CString *__thiscall ATL::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(CString *this, LPCSTR lpMultiByteStr); // idb
void __thiscall sub_1039F20(void **this);
void __thiscall PerformanceInfoInMemory::~PerformanceInfoInMemory(PerformanceInfoInMemory *this); // idb
void __thiscall sub_1039FB0(CSystemProcessInfoMap *this);
int *__thiscall sub_1039FE0(int *this, LPCWSTR lpWideCharStr);
tagTREEVIEWLISTITEMPARAM *__cdecl sub_103A070(HWND hWnd, char a2, int a3, int a4, int a5, int a6, int a7, u_long hostlong, int a9, int port, int a11, int a12, int a13, int a14);
CHAR *__thiscall sub_103A4A0(CString *this, __int16 a2);
int __cdecl sub_103A500(SYSTEM_PROCESS_INFORMATION *pSystemProcessInfo); // idb
int __stdcall pfnAclChangeCallback(HWND Owner, HANDLE Instance, PVOID CallbackContext, PSECURITY_DESCRIPTOR NewSD, PSECURITY_DESCRIPTOR NewObjectSD, BOOLEAN ApplyToSubContainers, BOOLEAN ApplyToSubObjects, PDWORD ChangeContextStatus);
HBRUSH __stdcall DlgDllInfo(HWND hWnd, UINT msg, WPARAM uID, DLLINFOLISTITEMPARAM *pListItem); // idb
BOOL __stdcall ProcPropSheet(HWND hDlg, UINT uMsg, WPARAM wParam, PROPITEM *PropItem); // idb
signed int CDriver::Load();
HCURSOR __cdecl sub_103B490(HWND hWnd, tagTREEVIEWLISTITEMPARAM **pData); // idb
_BYTE *__thiscall sub_103B8D0(_DWORD *this);
void __cdecl QueryProcessCommandLineArgs(HANDLE hProcess, LPCVOID lpBaseAddress, WCHAR **ppCommandBuffer, WCHAR **ppszCurrentDirectory, WCHAR **ppszEnvBlock); // idb
int __stdcall FindDlg_SortCallback(int, int, int); // weak
HANDLE __stdcall FindExecutableImageExW_1(PCWSTR FileName, PCWSTR SymbolPath, PWSTR ImageFilePath, PFIND_EXE_FILE_CALLBACKW Callback, PVOID CallerData);
int __stdcall sub_103BC50(LPCWSTR, LPCWSTR, int); // idb
// int __userpurge FindDlg_SearchThreadProc@<eax>(signed int a1@<ebx>, _BYTE *wParam);
HWND __cdecl sub_103BDA0(HWND hWndParent);
int *__thiscall sub_103BDF0(int *this, int a2);
HLOCAL __cdecl GetErrorMsg(wchar_t *Dst, size_t SizeInWords);
int __cdecl PE_MakeFileVersion(int, int, wchar_t *Dst, size_t SizeInWords); // idb
unsigned int __cdecl Fake_GetProcessMitigationPolicy(tagTREEVIEWLISTITEMPARAM *pItem, HANDLE ProcessHandle);
int __stdcall BackendQueryObjectThreadProc(void *a1);
int __stdcall sub_103C090(DWORD nLengthNeeded); // idb
LPVOID __cdecl PE_QueryVersionInfo(LPCVOID pBlock, int a2, unsigned __int16 a3, LPCWSTR lpszName); // idb
__int16 *__cdecl sub_103C270(int a1, rsize_t SizeInWords);
void __cdecl PE_GetFullPathName(LPCWSTR *ppszShortPath); // idb
int __stdcall QueryProcessDebugInforThreadProc(_DWORD *a1);
char __cdecl sub_103C400(int *a1, _DWORD *a2);
char __cdecl sub_103C4F0(tagHandleTableEntryInfo *pInfo, int a2, int a3, int a4); // idb
void __cdecl PE_QueryObject(wchar_t *pszObjectTypeName, _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX *pTableEntry, wchar_t *pszBuffer, rsize_t cbBufLen, WCHAR **ppszText); // idb
int __cdecl sub_103CE20(DWORD BytesReturned, LPVOID lpOutBuffer); // idb
char __cdecl sub_103CF30(HANDLE hProcess, WCHAR **ppszFileName);
HICON __cdecl ExtractApplicationIcon(LPCWSTR pszPath, int uFlags); // idb
char __cdecl sub_103D0C0(HANDLE hProcess, tagTREEVIEWLISTITEMPARAM *pItem);
WCHAR *__cdecl VerifyImage(tagTREEVIEWLISTITEMPARAM *pItem, char fNeedVerify);
SYSTEM_HANDLE_INFORMATION *__cdecl SystemHandleInfo_GetHandlesNumber(SYSTEM_HANDLE_INFORMATION *a1);
SYSTEM_HANDLE_TABLE_ENTRY_INFO **__cdecl GetHandleTableEntry(SYSTEM_HANDLE_INFORMATION *pHandleInfo, int nIndex, SYSTEM_HANDLE_TABLE_ENTRY_INFO **pEntry);
struct _FILETIME __cdecl GetSystemProcessInfo(SYSTEM_PROCESS_INFORMATION **ppSystemProcessInfo, PULONG cbRet); // idb
FILETIME __cdecl RequerySystemStatus(SYSTEM_PROCESS_INFORMATION **ppSystemProcessInfo, PULONG cbRet, SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION *pSystemProcessorPerformanceInfo, SYSTEM_INTERRUPT_INFORMATION *pSystemInterruptInfo, SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *pSystemProcessorCycleTimeInfo, CSystemProcessInfoMap *pMap, int dwBufLen);
void QueryServiceNames();
void __cdecl sub_103DD60(char a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int *a8);
int __cdecl sub_103E420(HANDLE hObject); // idb
int __cdecl sub_103E4B0(CSystemProcessInfoMap *theMap, SYSTEM_PROCESS_INFORMATION *pSystemProcessInfo, SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *pProcessorIdleCycleTimeInfo, unsigned int dwProcessorIdleCycleTimeInfoLen); // idb
signed int sub_103E920();
LPVOID __cdecl PE_QueryFileVersionBlock(LPCVOID pBlock, LPCWSTR lpszBlockName);
DWORD __cdecl sub_103EB20(void *a1, PVOID *a2, DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, DWORD *a7);
BOOL __stdcall DlgSystemInfoGPUNodes(HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam);
signed int __cdecl sub_103F3E0(int ThreadId, int a2, int a3);
char __cdecl PE_QueryObjectInfo(int pObjectInfo);
int __cdecl sub_103F4D0(int, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_DESCRIPTOR pSecurityDescriptor, int); // idb
int __stdcall Fake_GetProcessDEPPolicy(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent);
int __stdcall sub_103F5C0(int a1, int a2, int a3, int a4);
char __cdecl sub_103F600(_DWORD *a1, int a2, int a3, int a4);
int __thiscall sub_103F660(int *this, HMODULE hModule, int a3);
char LoadSystemApis();
char InitTlhlpApis();
void __cdecl QueryProcessArguments(HANDLE hProcess, ULONG_PTR dwProcessId, WCHAR **ppszCommandLine, WCHAR **ppszCurrentDirectory, WCHAR **ppszEnvBlock, PDWORD pbFlagsInExtendedProcessBasicInfo);
char __cdecl sub_10403E0(HANDLE hProcess, DWORD dwPid, LPCWSTR lpszProcessName, LPVOID *ppBufer, PDWORD pdwSize);
DWORD __cdecl LoadSystemModulesSymbolAddress(LPCWSTR lpszName); // idb
char __cdecl sub_1040A90(HANDLE hProcess, DWORD dwProcessId, LPWSTR *ppszFileName, tagTREEVIEWLISTITEMPARAM *pItem);
PE_ImageItemVerified *__cdecl PE_ImageItemVerified_Find(wchar_t *pszText); // idb
void __cdecl sub_1040DD0(wchar_t *a1);
int __cdecl sub_1040EE0(wchar_t *pszBuffer); // idb
char __cdecl ReportMsg(int ArgList);
// signed int __userpurge PropHandleInfo@<eax>(char a1@<bl>, HWND hWnd, unsigned int a2, unsigned __int16 a3, int a4);
int __stdcall PropSecurity(HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam);
int __cdecl PE_DuplicateProcessHandle(DWORD dwProcessId, HANDLE hSourceHandle, DWORD dwDesiredAccess); // idb
int *__thiscall sub_1042330(int *this, int a2);
int __stdcall PageProcCPU(HWND hWnd, int, WPARAM wParam, LONG dwNewLong); // idb
int __stdcall PageProcEnv(HWND hWnd, int, WPARAM wParam, int); // idb
HBRUSH __stdcall PageProcInfo(HWND hWnd, UINT a2, WPARAM a3, TreeViewParamInfo *dwNewLong); // idb
int __stdcall PageProcJob(HWND hWnd, int, WPARAM wParam, LONG dwNewLong); // idb
int __stdcall PageProcGPU(HWND hWnd, int, WPARAM wParam, LONG dwNewLong); // idb
signed int __stdcall PageProcPerf(HWND hWnd, unsigned int a2, HDC hdc, int a4);
int __stdcall PageProcPerfETW(HWND hWnd, int, HDC hdc, int); // idb
BOOL __stdcall ProcPropSheet(HWND hDlg, UINT uMsg, WPARAM wParam, PROPITEM *PropItem); // idb
void __cdecl __noreturn CTreeList::BackendFillTreeViewParamThreadProc(tagTREEVIEWLISTITEMPARAM *pItem); // idb
int __stdcall sub_1047440(volatile LONG *lpAddend); // idb
int __stdcall PageProcSecurity(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
int __stdcall PageProcServices(HWND hDlg, int, WPARAM, int); // idb
// int __userpurge PageProcTcpUdp@<eax>(signed int a1@<ebx>, HWND hWnd, int a3, WPARAM wParam, int a5);
int __stdcall PageProcThreads(HWND hWnd, int uMsg, WPARAM wParam, LPARAM lParam);
int __stdcall UpdateProcThreadsInfoThreadProc(tagThreadItem *pThreadItem); // idb
int __stdcall sub_104D400(int); // weak
BOOL __stdcall PageProcWMIProviders(HWND hDlg, int a2, WPARAM wParam, int a4);
char __cdecl PE_IsProcessInJob(HANDLE ProcessHandle, DWORD dwProcessId, DWORD *dwValue3, DWORD dwValue4);
HANDLE __cdecl PE_OpenProcess(DWORD dwDesiredAccess, int a2, DWORD dwProcessId);
BOOL __cdecl sub_104DC50(HWND hWnd_1, tagTREEVIEWLISTITEMPARAM *pItem); // idb
int __thiscall sub_104DE20(int *this, int a2);
_DWORD *__cdecl sub_104DE60(DWORD dwProcessId);
int __cdecl TreeViewListItemParam_GetSystemInfo(SYSTEM_PROCESS_INFORMATION *pSystemProcessInfo, HANDLE ProcessHandleIn, int a3, int a4, int a5, int a6, tagTREEVIEWLISTITEMPARAM *pItemParam, WPARAM wParam);
int __thiscall TreeList_Item1::Reset(TreeList_Item1 *this); // idb
// char __usercall sub_104F870@<al>(int a1@<ebx>, int a2, int a3, int a4, DWORD dwProcessId, int a6, int a7, int a8);
BOOL __stdcall DlgServiceControl(HWND, UINT, WPARAM, LPARAM); // idb
BOOL __cdecl sub_1050400(HWND hDlg, int nIDDlgItem, int ArgList, int a4);
BOOL __cdecl sub_1050460(HWND hDlg, int nIDDlgItem, int a3, int a4);
BOOL (__stdcall *__thiscall sub_10504E0(CResizer *this, int a2, int a3))(HWND hWnd, LPRECT lpRect);
BOOL (__stdcall *__thiscall sub_1050510(CResizer *this, int a2, int a3, int a4))(HWND hWnd, LPRECT lpRect);
BOOL (__stdcall *__thiscall sub_1050550(CResizer *this, int a2, int a3))(HWND hWnd, LPRECT lpRect);
BOOL __stdcall sub_1050640(int a1, PVOID pApplicationAddress, DWORD BytesReturned, LPVOID lpOutBuffer, DWORD nOutBufferSize, DWORD *pcbRet); // idb
int __cdecl PE_SuspendOneProcess(char bSuspended, SYSTEM_PROCESS_INFORMATION *pSystemProcessInfo, int a3);
DWORD64 __stdcall SymLoadModuleExW_0(HANDLE hProcess, HANDLE hFile, PCWSTR ImageName, PCWSTR ModuleName, DWORD64 BaseOfDll, DWORD DllSize, PMODLOAD_DATA Data, DWORD Flags);
int __stdcall sub_10508E0(int, int, LPCWSTR, LPCWSTR lpWideCharStr, int, int, int); // idb
int __stdcall PropSystemInfoSumETW(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
int __stdcall PropSystemInfoGPU(HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam);
int __stdcall PropSystemInfoIO(HWND hDlg, int, HDC hdc, int); // idb
int __stdcall PropSystemInfoMem(HWND hWnd, int, HDC hdc, int); // idb
int __stdcall PropSummary(HWND hDlg, int, HDC hdc, int); // idb
_DWORD *__cdecl sub_10539C0(SYSTEM_HANDLE_INFORMATION *pSystemHandleInfo, DWORD dwProcessId); // idb
BOOL __stdcall DlgThreadStack(HWND, UINT, WPARAM, LPARAM); // idb
BOOL __stdcall DlgThreadStack(HWND, UINT, WPARAM, LPARAM); // idb
void __noreturn ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException();
BOOL __stdcall EnumChildrenWindows(HWND hWnd, LPARAM dwPId); // idb
// signed int __usercall sub_1055140@<eax>(int a1@<ebx>, int a2, _BYTE *a3);
errno_t __cdecl wcsncpy_s(wchar_t *Dst, rsize_t SizeInWords, int a3);
int __cdecl sub_1055250(int *a1);
int __cdecl sub_1055310(int *a1);
void __cdecl PE_ImageItemVerified_Create(wchar_t *a1, int a2, wchar_t *a3);
_DWORD *sub_1055440();
_DWORD *__thiscall sub_1055470(_DWORD *this);
std_Tree_node_for_tagKeyName *__thiscall sub_10554B0(std__tree *this, std__Tree_node *_Node);
int **__thiscall sub_1055510(CSystemProcessInfoMap *this, int **a2, CSystemProcessInfoMapNode *a3, int *a4); // idb
_DWORD *__thiscall sub_10555B0(CSystemProcessInfoMap *this, _DWORD *a2, _DWORD *a3); // idb
_DWORD *__thiscall sub_1055820(int *this, _DWORD *a2, unsigned int *a3);
HANDLE __cdecl Fake_OpenThread(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess);
// char __usercall sub_10558D0@<al>(signed int a1@<ebx>, HWND hWnd, LVITEMW *pItem, LPARAM pItemParam, int a5); idb
BOOL __cdecl CDriver::Control(DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize);
int __stdcall CGraphWnd::ChartWndProc(HWND hWnd, UINT Msg, WPARAM wParam, int lParam); // idb
char __cdecl sub_1056020(tagTREEVIEWLISTITEMPARAM *pItem); // idb
int *__cdecl FillHandleListParam(HWND hWndList, tagHANDLELISTITEMPARAM *pListParam); // idb
HANDLE __cdecl CTreeList::FillTreeViewParam(tagTREEVIEWLISTITEMPARAM *pInfo); // idb
BOOL __cdecl PropertiesThreadProc(HACCEL hAccTable);
HANDLE CDriver::Close();
bool __cdecl GetProcessDEPStatus(); // weak
BOOL __stdcall DlgFind(HWND hDlg, UINT uMsg, WPARAM wParamIn, LPARAM lParamIn); // idb
void __cdecl sub_1057400(signed __int64 a1, double *a2, double *a3, double *a4);
int __cdecl sub_1057720(int, wchar_t *Dst, rsize_t SizeInWords); // idb
int __cdecl sub_1057790(int, wchar_t *Dst, size_t SizeInWords); // idb
void *__cdecl QuerySystemHandleInfo(ULONG ReturnLength);
signed int OnBeforeInit();
LRESULT __cdecl sub_1057F90(HWND hWnd, int a2, int a3);
char __cdecl sub_1058030(int ArgList, DWORD dwProcessId);
void __cdecl sub_1058140(int ArgList, int a2);
int __cdecl SystemProcessInfo_GetSystemProcessName(DWORD dwProcessId, LARGE_INTEGER *FileTime, WCHAR *pszText, DWORD dwSize);
bool __cdecl QueryProcessUsers(HANDLE ProcessHandle, DWORD dwProcessId, int LowTime, wchar_t *pszUserName, DWORD cbUserName, WCHAR *szDomainName, DWORD cbDomainName, LPWSTR pszText, DWORD cbText, BOOL *pbVirtualizationEnabled, BOOL *pbUIAccess);
int GetDriverNameAndLinkInfo();
char __cdecl sub_1058A20(int a1);
int __cdecl ReportMsg(int ArgList, HWND hWnd);
int __stdcall PageProcStrings(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
// char __usercall CMainWnd::RefreshDllsView@<al>(signed int a1@<ebx>, HWND hWnd, DWORD dwProcessId, WPARAM wParam);
// char __usercall CMainWnd::RefreshHandlesView@<al>(signed int a1@<ebx>, HWND hWnd_1, DWORD dwProcessId, void *pItem); idb
// char __usercall CTreeList::InitTreeList@<al>(HWND hWndListCtrl, char flags);
HCURSOR __cdecl sub_105E3B0(int a1);
HCURSOR __cdecl SaveProcessStrings(HWND hWnd, LPCWSTR lpszFileName);
BOOL __stdcall sub_105EDC0(HWND, UINT, WPARAM, LPARAM); // idb
int __cdecl sub_105EF00(HMENU hmenu, int); // idb
int __cdecl sub_105EFB0(int);
PBOOL __cdecl PE_SuspendProcess(unsigned __int8 bFlags, DWORD dwProcessId, PBOOL pbRet); // idb
bool __cdecl LoadDbgHelp(LPCWSTR lpLibFileName);
BOOL __stdcall SysinfoPropSheet(HWND hDlg, UINT uMsg, WPARAM wParamIn, LPARAM lParamIn);
bool __cdecl sub_105F8F0(double a1, double *a2);
char __cdecl sub_105F920(int a1, int a2, _DWORD *a3);
void __cdecl VerifyImageThreadProc(tagTREEVIEWLISTITEMPARAM *pItemParam); // idb
int __thiscall ATL::CComCriticalSection::Init(LPCRITICAL_SECTION lpCriticalSection); // idb
int __cdecl sub_105F9B0(wchar_t *DstBuf, size_t MaxCount, wchar_t *Format, char ArgList); // idb
LRESULT __cdecl CMainWnd::InitStatusBar(HWND hWnd);
int __cdecl GetStringByMenuID(WPARAM wParam, void *pItem);
void __cdecl sub_105FCA0(CGraphData *pGraphData, __int64 a2);
char __cdecl sub_105FD50(CGraphData *pGraphData, double a2, int a3, double a4);
CGraphData *__cdecl sub_1060010(CGraphData *a1, int a2, __int64 a3, __int64 a4, __int64 a5);
CGraphData *__cdecl sub_1060130(CGraphData *a1, int a2, __int64 a3, __int64 a4, __int64 a5);
CGraphData *__cdecl sub_1060250(CGraphData *a1, int a2, __int64 a3, __int64 a4, __int64 a5);
void __cdecl sub_1060360(CGraphData *pGraphData, __int64 a2);
// double *__usercall sub_1060410@<eax>(double a1@<st0>, double st6_0@<st1>, HWND a2, int a3, double *a4, double *a5);
HWND __cdecl InitToolbar(HWND hWnd, unsigned int nIDToolbar);
LPARAM GetButtonSize();
_DWORD *__stdcall std::_List_buy<tagEventItem *,std::allocator<tagEventItem *>>::_Buynode<tagEventItem * const &>(EventList *a1, _DWORD *a2, _DWORD *a3); // idb
CSystemProcessInfoMapNode **__thiscall sub_1061440(CSystemProcessInfoMap *this, CSystemProcessInfoMapNode **a2, char a3, CSystemProcessInfoMapNode *a4, int *a5, int a6);
int __thiscall sub_1061650(CSystemProcessInfoMap *this, int a2, CSystemProcessInfoMapNode *a3, int *a4, int a5);
char SubmitExeToVirusTotalDotCom();
char __cdecl sub_1061820(ListItemData1 *a1); // idb
BOOL __cdecl sub_1061840(LPCWSTR lpFileName, wchar_t *Dest, int a3);
int __cdecl sub_1061A50(int pHash, wchar_t *Dest); // idb
void StartVirusTotalCheck();
char __cdecl sub_1061C10(ListItemData1 *a1); // idb
void __cdecl sub_1061C30(DLLLISTITEMPARAM *pItemParam, char a2, int a3); // idb
int __stdcall BackendThreadProc2(void *a1);
int __stdcall BackendThreadProc1(int a1);
LRESULT __stdcall EditVTClassCallback(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, UINT_PTR uIdSubclass, DWORD_PTR dwRefData); // idb
char __cdecl sub_1062910(ListItemData1 *a1); // idb
int __stdcall BackendThreadProc3(void *a1);
_DWORD *__stdcall std::_List_alloc<std::_List_base_types<tagEventItem *,std::allocator<tagEventItem *>>>::_Buynode0(_DWORD *a1, _DWORD *a2);
void __stdcall sub_1062AB0(void *a1);
_bstr_t *__thiscall sub_1062B40(void *this, _bstr_t *a2);
std_Tree_node_for_tagKeyName *__thiscall sub_1062BB0(std__tree *this, std__Tree_node *a2);
int **__thiscall sub_1062C10(int **this, int **a2, int **a3, int **a4);
_DWORD *__thiscall sub_1062CD0(_DWORD *this, _DWORD *a2, _DWORD *a3);
int *__thiscall sub_1062F90(int *this, int *a2, volatile LONG **a3);
HANDLE LoadSharedMemory();
signed int sub_1063150();
int __stdcall wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
wchar_t *__cdecl sub_10636C0(wchar_t *Src);
int __cdecl sub_1063720(int, int, wchar_t *, int, int); // idb
int __cdecl sub_10637B0(int *a1, int a2, int a3, _DWORD *a4);
int __cdecl sub_10638A0(wchar_t *, int, int, int, int); // idb
MACRO_HRESULT __cdecl sub_10639A0(int *a1);
int __cdecl sub_1063A00(int ArgList, int a2);
signed int __cdecl sub_1063CB0(int a1, int a2, void **a3);
// DWORD __stdcall WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength);
// BOOL __stdcall SetWindowSubclass(HWND hWnd, SUBCLASSPROC pfnSubclass, UINT_PTR uIdSubclass, DWORD_PTR dwRefData);
// LRESULT __stdcall DefSubclassProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
// DWORD __stdcall GetFileVersionInfoSizeW(LPCWSTR lptstrFilename, LPDWORD lpdwHandle);
// BOOL __stdcall GetFileVersionInfoW(LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
// BOOL __stdcall VerQueryValueW(LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen);
// HANDLE __stdcall CreateToolhelp32Snapshot(DWORD dwFlags, DWORD th32ProcessID);
// BOOL __stdcall Process32FirstW(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
// BOOL __stdcall Process32NextW(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
// BOOL __stdcall Module32FirstW(HANDLE hSnapshot, LPMODULEENTRY32W lpme);
// BOOL __stdcall Module32NextW(HANDLE hSnapshot, LPMODULEENTRY32W lpme);
// BOOL __stdcall Thread32First(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// BOOL __stdcall Thread32Next(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// NTSTATUS __stdcall LsaFreeMemory(PVOID Buffer);
// NTSTATUS __stdcall LsaClose(LSA_HANDLE ObjectHandle);
// NTSTATUS __stdcall LsaOpenPolicy(PLSA_UNICODE_STRING SystemName, PLSA_OBJECT_ATTRIBUTES ObjectAttributes, ACCESS_MASK DesiredAccess, PLSA_HANDLE PolicyHandle);
// NTSTATUS __stdcall LsaEnumerateAccountRights(LSA_HANDLE PolicyHandle, PSID AccountSid, PLSA_UNICODE_STRING *UserRights, PULONG CountOfRights);
// BOOL __stdcall ConvertSidToStringSidW(PSID Sid, LPWSTR *StringSid);
void __stdcall __noreturn _com_issue_error(int a1);
_DWORD *__thiscall sub_1064190(_DWORD *this, int a2);
HLOCAL __thiscall ATL::_com_error::~_com_error(ATL::_com_error *this);
HLOCAL *__thiscall ATL::_com_error::`scalar deleting destructor'(void *this, char a2);
void __cdecl __noreturn sub_1064240(int, int);
CHAR *__stdcall sub_1064270(LPCWSTR lpWideCharStr);
BSTR __stdcall _com_util::ConvertStringToBSTR(LPCSTR lpszText); // idb
std::exception *__thiscall sub_1064501(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_106451C(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_1064537(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_1064552(std::exception *this, struct exception *a2);
void __thiscall sub_106456D(std::exception *this);
void *__thiscall sub_1064585(void *this, char a2);
void *__thiscall sub_10645AA(void *this, char a2);
// void __noreturn std::_Xbad_alloc();
// void __cdecl __noreturn std::_Xlength_error(const char *); idb
// void __cdecl __noreturn std::_Xout_of_range(const char *); idb
// void *__cdecl operator new[](unsigned int); idb
int __cdecl sub_106465F(int a1);
int __cdecl sub_1064689(int a1);
// _DWORD __thiscall std::_Init_locks::_Init_locks(std::_Init_locks *__hidden this); idb
// _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *this, int); idb
// _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this); idb
bool __cdecl __uncaught_exception(); // idb
// _Ctypevec *__cdecl _Getctype(_Ctypevec *__return_ptr __struct_ptr retstr);
// _Cvtvec __cdecl _Getcvt();
// int __cdecl _Wcrtomb(char *, wchar_t, mbstate_t *, const _Cvtvec *);
// int __cdecl _Mbrtowc(wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *);
// int __cdecl _Getwctype(WCHAR SrcStr); idb
// int __cdecl _Towlower(wchar_t Src, int); idb
// int __cdecl _Towupper(wchar_t Src, int); idb
// _DWORD __thiscall std::_Fac_tidy_reg_t::~_Fac_tidy_reg_t(std::_Fac_tidy_reg_t *__hidden this); idb
// void __cdecl std::_Facet_Register(struct std::_Facet_base *); idb
int sub_1064C4A();
// struct std::locale::_Locimp *__cdecl std::locale::_Init(bool); idb
// void __cdecl std::_Locinfo::_Locinfo_ctor(struct std::_Locinfo *, const char *); idb
// void __cdecl std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *); idb
// void __cdecl std::ios_base::_Addstd(struct std::ios_base *); idb
// void __cdecl std::ios_base::_Ios_base_dtor(struct std::ios_base *); idb
// int __cdecl _Mtxdst(LPCRITICAL_SECTION lpCriticalSection); idb
void __cdecl sub_1064F3E(LPCRITICAL_SECTION lpCriticalSection);
void __cdecl sub_1064F4C(LPCRITICAL_SECTION lpCriticalSection);
// _DWORD __thiscall _Init_atexit::~_Init_atexit(_Init_atexit *__hidden this); idb
// char *__cdecl wmemset(char *a1, unsigned __int16 a2, unsigned int a3);
CAtlBaseModule *__thiscall ATL::CAtlWinModule::CAtlWinModule(char *this);
_DWORD *__thiscall ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70(_DWORD *this);
void __thiscall ATL::CAtlBaseModule::~CAtlBaseModule(int this);
int __thiscall ATL::CSimpleArray<HINSTANCE__ *,ATL::CSimpleArrayEqualHelper<HINSTANCE__ *>>::operator[](_DWORD *this, int a2);
CHAR *__thiscall ATL::CAtlBaseModule::GetHInstanceAt(CAtlBaseModule *this, int a2); // idb
void __cdecl j__free(void *);
// void *__cdecl memmove(void *, const void *, size_t);
// wchar_t *__cdecl _wcsdup(const wchar_t *);
// void __cdecl free(void *);
// void *__cdecl malloc(size_t);
// void *__cdecl realloc(void *, size_t);
// void __cdecl __security_check_cookie(char a1);
// enum _EXCEPTION_DISPOSITION __cdecl CatchGuardHandler(struct EHExceptionRecord *, struct CatchGuardRN *, void *, void *); idb
// void *__cdecl _CallCatchBlock2(struct EHRegistrationNode *, const struct _s_FuncInfo *, void *, int, unsigned int); idb
// _DWORD __cdecl __CxxFrameHandler3(PEXCEPTION_RECORD ExceptionRecord, struct EHRegistrationNode *, struct _CONTEXT *, void *); weak
// void *__cdecl memmove_0(void *, const void *, size_t);
// void *__cdecl memset(void *, int, size_t);
// void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *)); idb
// void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *)); idb
// void __stdcall __ArrayUnwind(void *, unsigned int, int, void (__thiscall *)(void *)); idb
// void *__cdecl operator new(size_t); idb
// int __cdecl atexit(void (__cdecl *)());
// void __cdecl __noreturn __report_gsfailure(char); weak
// int __report_rangecheckfailure(void); weak
// int __cdecl isalpha(int);
// int __cdecl isspace(int);
// int __cdecl toupper(int);
// int __cdecl iswalpha(wint_t);
// int __cdecl iswspace(wint_t);
// errno_t __cdecl memcpy_s(void *Dst, rsize_t DstSize, const void *Src, rsize_t MaxCount);
// wchar_t *__cdecl wcschr(const wchar_t *, wchar_t);
// errno_t __cdecl wcscpy_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src);
// int __cdecl wcsncmp(const wchar_t *, const wchar_t *, size_t);
// errno_t __cdecl wcsncpy_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src, rsize_t MaxCount);
// wchar_t *__cdecl wcsrchr(const wchar_t *, wchar_t);
// wchar_t *__cdecl wcsstr(const wchar_t *, const wchar_t *);
// int __cdecl _wcsicmp(const wchar_t *, const wchar_t *);
// int __cdecl _wcsnicmp(const wchar_t *, const wchar_t *, size_t);
// wchar_t *__cdecl _wcslwr(wchar_t *);
// errno_t __cdecl _wcslwr_s(wchar_t *Str, size_t SizeInWords);
// wchar_t *__cdecl _wcsupr(wchar_t *);
// errno_t __cdecl _wcsupr_s(wchar_t *Str, size_t Size);
void **sub_1067B15();
// int __cdecl fputws(const wchar_t *, FILE *);
// int fwprintf(FILE *, const wchar_t *, ...);
// int wprintf(const wchar_t *, ...);
// int wprintf_s(const wchar_t *Format, ...);
// int _snwprintf_s(wchar_t *DstBuf, size_t SizeInWords, size_t MaxCount, const wchar_t *Format, ...);
// int _swprintf(wchar_t *Dest, const wchar_t *Format, ...);
// int swprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, ...);
// int __cdecl scan_fn(wchar_t *, int, int); idb
// int __cdecl vscan_fn(int, wchar_t *, int, int, int); idb
// wint_t __cdecl _fputwc_nolock(wchar_t Ch, FILE *File);
void __cdecl j_j__free(void *);
// int __cdecl _ismbcprint(unsigned int);
// void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD); weak
// void *__cdecl calloc(size_t, size_t);
// int __cdecl _wtoi(const wchar_t *);
// size_t __cdecl wcscspn(const wchar_t *, const wchar_t *);
// int __cdecl _beginthreadex(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, int, int, DWORD dwCreationFlags, LPDWORD lpThreadId); idb
// wchar_t *__cdecl fgetws(wchar_t *, int, FILE *);
// FILE *__cdecl _wfopen(const wchar_t *, const wchar_t *);
// errno_t __cdecl _wfopen_s(FILE **File, const wchar_t *Filename, const wchar_t *Mode);
// int __cdecl fclose(FILE *);
int __thiscall sub_10689CE(_DWORD *this);
void *__thiscall sub_10689FA(void *this, char a2);
// int __cdecl _vsnwprintf_s(wchar_t *DstBuf, size_t SizeInWords, size_t MaxCount, const wchar_t *Format, va_list ArgList);
// int __cdecl vswprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, va_list ArgList);
// int __cdecl _stricmp(const char *, const char *);
// char *__cdecl strrchr(const char *, int);
// errno_t __cdecl wcscat_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src);
// wchar_t *__cdecl _getws_s(wchar_t *Str, size_t SizeInWords);
int sub_106918B();
// int __cdecl fflush(FILE *);
// _DWORD __cdecl flsall(_DWORD); weak
// int __fastcall _ftol3_except(_DWORD, _DWORD); weak
// void _dtoui3();
// int __usercall _dtol3@<eax>(__m128d a1@<xmm0>);
// void __cdecl __noreturn exit(int);
// int printf(const char *, ...);
// int __cdecl _getch();
// wchar_t *__cdecl wcsncpy(wchar_t *, const wchar_t *, size_t);
std::exception *__thiscall sub_1069CF7(std::exception *this, struct exception *a2);
std::exception *__thiscall sub_1069D12(std::exception *this, char *a2);
// _DWORD __thiscall std::exception::exception(std::exception *this, const char *const *); idb
// _DWORD __thiscall std::exception::exception(std::exception *this, const char *const *, int); idb
// _DWORD __thiscall std::exception::exception(std::exception *this, const struct exception *); idb
void __thiscall std::_system_error::~_system_error(std::exception *this);
void *__thiscall sub_1069DCF(void *this, char a2);
// void __thiscall std::exception::_Tidy(std::exception *__hidden this); idb
// errno_t __cdecl memmove_s(void *Dst, rsize_t DstSize, const void *Src, rsize_t MaxCount);
// int __cdecl wmemcpy_s(void *, int, void *, int); idb
// HANDLE __cdecl _beginthread(int a1, SIZE_T dwStackSize, int a3);
// int _endthread(void); weak
// DWORD __stdcall _threadstart(LPVOID lpThreadParameter); idb
// size_t __cdecl wcsnlen(const wchar_t *Src, size_t MaxCount);
// size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
// void __cdecl qsort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *));
// errno_t __cdecl strcpy_s(char *Dst, rsize_t SizeInBytes, const char *Src);
// errno_t __cdecl _strlwr_s(char *Str, size_t Size);
// int __cdecl vsprintf_s(char *DstBuf, size_t SizeInBytes, const char *Format, va_list ArgList);
// errno_t __cdecl _wsplitpath_s(const wchar_t *FullPath, wchar_t *Drive, size_t DriveSize, wchar_t *Dir, size_t DirSize, wchar_t *Filename, size_t FilenameSize, wchar_t *Ext, size_t ExtSize);
// wchar_t *__cdecl wcstok_s(wchar_t *Str, const wchar_t *Delim, wchar_t **Context);
// wchar_t *__cdecl _wctime32(const __time32_t *Time);
// _DWORD __cdecl _dosmaperr(_DWORD); weak
// int *__cdecl _errno();
// errno_t __cdecl _get_errno(int *Value);
// _DWORD __cdecl _get_errno_from_oserr(_DWORD); weak
// errno_t __cdecl _set_errno(int Value);
// unsigned int __cdecl wcstoul(const wchar_t *, wchar_t **, int);
std::exception *__thiscall sub_106B822(std::exception *this, struct exception *a2);
void __thiscall sub_106B83D(std::exception *this);
void *__thiscall sub_106B848(void *this, char a2);
// _DWORD __cdecl _calloc_crt(_DWORD, _DWORD); weak
// int __crtIsPackagedApp(void); weak
// int __cdecl __crtSetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter); idb
void __cdecl sub_106D342(DWORD dwMilliseconds);
// size_t __cdecl wcslen(const wchar_t *);
void *__cdecl sub_106F821(void *a1);
// int _invalid_parameter_noinfo(void); weak
// int __cdecl _invoke_watson(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
void *__cdecl sub_106F8CF(void *a1);
DWORD sub_106FAF6();
// int _getptd(void); weak
// _DWORD __cdecl _initptd(_DWORD, _DWORD); weak
// _DWORD __stdcall _CallSettingFrame(_DWORD, _DWORD, _DWORD); weak
void sub_107007A();
// int __cdecl _winput_l(int, int, struct localeinfo_struct *, int); idb
void *__cdecl sub_107533B(void *a1);
// _DWORD __cdecl unknown_libname_8(_DWORD); weak
void sub_1077C9C();
void __cdecl sub_1077CBC(); // idb
PVOID sub_1077CDC();
int __cdecl sub_1077EFA(int a1);
HANDLE sub_1078B73();
// int __stdcall __CxxUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo); idb
int sub_1079F90();
int __cdecl sub_107A2BD(int a1);
// const WCHAR **_wwincmdln();
int *sub_107B1A0();
int *sub_107B1A6();
int *sub_107B1AC();
void **sub_107B1B2();
signed int __cdecl sub_107B1B8(_DWORD *a1);
signed int __cdecl sub_107B1E2(_DWORD *a1);
signed int __cdecl sub_107B20C(_DWORD *a1);
int __cdecl sub_107B5FC(const WCHAR *a1, int a2, int a3);
int sub_107F550();
signed int __cdecl sub_107FE30(unsigned __int16 *a1, int *a2);
signed int __cdecl sub_10803A2(unsigned __int16 *a1, int *a2);
signed int __cdecl sub_1081B17(_DWORD *a1);
HANDLE sub_1081C0E();
// DWORD __stdcall GetModuleFileNameExW(HANDLE hProcess, HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
int __cdecl SEH_402480(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_402D60(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_403440(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4035A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4038F0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4314F0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_403D40(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_404130(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_404890(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_404AC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_404F20(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_404FB0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4052B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_405520(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_405C70(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_406440(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_406090(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4067A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_406CC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_406DD0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4070E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_407CC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4085A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4087A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_409270(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_409B70(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425730(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40AB10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40B220(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40F2D0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40F610(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40F9D0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40FD00(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_40FDF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_410460(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_410790(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_411150(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_411610(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_412090(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_413160(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_413A80(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_414200(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_414FF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_415FF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_416A10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_416E10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_417000(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4177C0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_417FE0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_418050(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_418A90(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_418C20(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4193C0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_419580(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41A120(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41AD20(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45ED60(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41B1A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41D790(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41E3A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41EFE0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41F0E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_41F260(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_420760(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_420EA0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4211B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4013A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_421590(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_421860(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_422060(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_422110(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4227D0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_423190(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_424040(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_424270(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4244A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4245C0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_424740(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_424920(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_424FE0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425120(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425350(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425440(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425850(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425940(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425AB0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_425D10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_426830(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4269A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_426BB0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_427AC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45E760(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_428730(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_428970(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_429580(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_42A1F0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_42FAF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_431240(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_431560(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4318A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_431BC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_431FC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4337E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_434530(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_434810(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_434AA0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_434F00(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4355A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_437DF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_438150(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_438360(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_438570(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_438630(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_438CE0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_439090(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4391F0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4392D0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_439D10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_439E70(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43B100(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43B460(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43B780(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43BF00(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43D080(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43D1D0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43D3B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43D590(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43D670(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43DF10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43E1A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43EAD0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43EBA0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43EEA0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43F0A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_43FFF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_469E00(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_445F60(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_446270(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_451E50(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4526B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_457640(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_457740(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4577E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_457DD0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4580C0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_458AE0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_458C80(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_458D10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_458E20(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_459500(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_459C50(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45A570(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45B0A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45B680(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45B8A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45C840(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45EE00(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45D510(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45DCE0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45E4E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_45E8B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_466900(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_469AF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_469C10(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_469EA0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46A670(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46ADD0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46B930(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46BC50(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46C350(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46DAF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46DD60(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_46EC30(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4703E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4723A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_472810(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_472C20(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_473C50(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_474990(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4766A0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_477710(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_478E00(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_479A30(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_47ACF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_47D5B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4808E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4809B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4818B0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_482010(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_4825E0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_483260(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_483AF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_483FC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_491650(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_401FF0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_491C30(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_491EC0(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_492230(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_494270(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl sub_108A093(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl sub_108A0AE(EXCEPTION_RECORD *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
void __cdecl sub_108A0D0(); // idb
void __thiscall sub_108A0F0(void *this);
void __cdecl sub_108A150(); // idb
void __cdecl sub_108A160(); // idb
void __cdecl sub_108A1C0(); // idb
void __cdecl sub_108A220(); // idb
void __cdecl sub_108A230(); // idb
void __cdecl sub_108A240(); // idb
void __cdecl dynamic_atexit_destructor_for__gKeyNameMap__(); // idb
void __cdecl sub_108A2D0(); // idb
void __cdecl sub_108A2E0(); // idb
void __cdecl sub_108A2F0(); // idb
void __cdecl sub_108A300(); // idb
void __cdecl sub_108A310(); // idb
void __cdecl sub_108A320(); // idb
void __cdecl sub_108A3F0(); // idb
void __cdecl sub_108A4C0(); // idb
void __cdecl sub_108A590(); // idb
void __cdecl sub_108A610(); // idb
void __cdecl sub_108A620(); // idb
void __cdecl sub_108A630(); // idb
void __cdecl sub_108A640(); // idb
void __cdecl sub_108A660(); // idb
void __cdecl sub_108A680(); // idb
void __cdecl sub_108A700(); // idb
void __cdecl sub_108A720(); // idb
void __cdecl sub_108A7F0(); // idb
void __cdecl sub_108A820(); // idb
void __cdecl sub_108A840(); // idb
void __cdecl sub_108A910(); // idb
void __cdecl sub_108A970(); // idb
void __cdecl sub_108A9D0(); // idb
void __cdecl sub_108A9E0(); // idb
void __cdecl sub_108A9F0(); // idb
void __cdecl sub_108AA50(); // idb
void __cdecl sub_108AB20(); // idb
void __cdecl sub_108ABA0(); // idb
void __cdecl sub_108AC00(); // idb
void __cdecl sub_108AC60(); // idb
void __cdecl sub_108ACC0(); // idb
void __cdecl sub_108AD40(); // idb
void __cdecl sub_108ADC0(); // idb
void __cdecl HttpInfo_Release(); // idb
void __cdecl sub_108AE00(); // idb
void __cdecl sub_108AED0(); // idb
void __cdecl sub_108AFA0(); // idb
void __cdecl sub_108B070(); // idb
void __cdecl sub_108B0F0(); // idb
void __cdecl sub_108B0FC(); // idb
void __cdecl sub_108B106(); // idb
void __cdecl sub_108B110(); // idb
void __cdecl sub_108B11A(); // idb
void __cdecl sub_108B124(); // idb
void __cdecl ATL::_dynamic_atexit_destructor_for___AtlBaseModule__(); // idb
// LSTATUS __stdcall RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// BOOL __stdcall LookupPrivilegeNameW(LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
// BOOL __stdcall SetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
// BOOL __stdcall IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor);
// BOOL __stdcall GetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
// BOOL __stdcall CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// LSTATUS __stdcall RegConnectRegistryW(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult);
// ULONG __stdcall FlushTraceW(TRACEHANDLE TraceHandle, LPCWSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties);
// LSTATUS __stdcall RegCloseKey(HKEY hKey);
// DWORD __stdcall SetSecurityInfo(HANDLE handle, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl);
// DWORD __stdcall GetSecurityInfo(HANDLE handle, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID *ppsidOwner, PSID *ppsidGroup, PACL *ppDacl, PACL *ppSacl, PSECURITY_DESCRIPTOR *ppSecurityDescriptor);
// BOOL __stdcall AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
// BOOL __stdcall GetAce(PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
// BOOL __stdcall AddAce(PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
// BOOL __stdcall InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
// PUCHAR __stdcall GetSidSubAuthorityCount(PSID pSid);
// PDWORD __stdcall GetSidSubAuthority(PSID pSid, DWORD nSubAuthority);
// PSID_IDENTIFIER_AUTHORITY __stdcall GetSidIdentifierAuthority(PSID pSid);
// BOOL __stdcall IsValidSid(PSID pSid);
// BOOL __stdcall SetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);
// BOOL __stdcall QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
// BOOL __stdcall CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
// BOOL __stdcall RevertToSelf();
// BOOL __stdcall OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
// BOOL __stdcall GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
// BOOL __stdcall AdjustTokenPrivileges(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
// BOOL __stdcall EqualSid(PSID pSid1, PSID pSid2);
// BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
// DWORD __stdcall GetLengthSid(PSID pSid);
// ULONG __stdcall CloseTrace(TRACEHANDLE TraceHandle);
// ULONG __stdcall ProcessTrace(PTRACEHANDLE HandleArray, ULONG HandleCount, LPFILETIME StartTime, LPFILETIME EndTime);
// TRACEHANDLE __stdcall OpenTraceW(PEVENT_TRACE_LOGFILEW Logfile);
// ULONG __stdcall ControlTraceW(TRACEHANDLE TraceHandle, LPCWSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties, ULONG ControlCode);
// ULONG __stdcall StartTraceW(PTRACEHANDLE TraceHandle, LPCWSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties);
// BOOL __stdcall SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor);
// BOOL __stdcall QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
// void __stdcall MapGenericMask(PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
// LSTATUS __stdcall RegCreateKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult);
// BOOL __stdcall StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors);
// BOOL __stdcall QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus);
// PVOID __stdcall FreeSid(PSID pSid);
// BOOL __stdcall LookupAccountSidW(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
// BOOL __stdcall LookupAccountNameW(LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
// BOOL __stdcall LookupPrivilegeValueW(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
// BOOL __stdcall ImpersonateLoggedOnUser(HANDLE hToken);
// BOOL __stdcall DuplicateTokenEx(HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
// LSTATUS __stdcall RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
// LSTATUS __stdcall RegDeleteKeyW(HKEY hKey, LPCWSTR lpSubKey);
// LSTATUS __stdcall RegEnumKeyW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName);
// LSTATUS __stdcall RegEnumValueW(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// LSTATUS __stdcall RegLoadKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile);
// LSTATUS __stdcall RegOpenKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult);
// LSTATUS __stdcall RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
// LSTATUS __stdcall RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// LSTATUS __stdcall RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// LSTATUS __stdcall RegUnLoadKeyW(HKEY hKey, LPCWSTR lpSubKey);
// LSTATUS __stdcall RegQueryValueW(HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpData, PLONG lpcbData);
// BOOL __stdcall CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags);
// BOOL __stdcall CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags);
// BOOL __stdcall CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
// BOOL __stdcall CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash);
// BOOL __stdcall CryptHashData(HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags);
// BOOL __stdcall CryptDestroyHash(HCRYPTHASH hHash);
// LSTATUS __stdcall RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName);
// BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject);
// SC_HANDLE __stdcall OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess);
// SC_HANDLE __stdcall OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess);
// BOOL __stdcall ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus);
// HIMAGELIST __stdcall ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow);
// HWND __stdcall CreateStatusWindowW(LONG style, LPCWSTR lpszText, HWND hwndParent, UINT wID);
// HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
// HWND __stdcall CreateToolbarEx(HWND hwnd, DWORD ws, UINT wID, int nBitmaps, HINSTANCE hBMInst, UINT_PTR wBMID, LPCTBBUTTON lpButtons, int iNumButtons, int dxButton, int dyButton, int dxBitmap, int dyBitmap, UINT uStructSize);
// int __stdcall ImageList_ReplaceIcon(HIMAGELIST himl, int i, HICON hicon);
// int __stdcall ImageList_Add(HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask);
// BOOL __stdcall InitCommonControlsEx(const INITCOMMONCONTROLSEX *picce);
// BOOL __stdcall ImageList_Destroy(HIMAGELIST himl);
// BOOL __stdcall ImageList_DrawEx(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, UINT fStyle);
// void __stdcall InitCommonControls();
// INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW);
// HWND __stdcall FindTextW(LPFINDREPLACEW);
// BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);
// BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW);
// BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW);
// BOOL __stdcall PrintDlgW(LPPRINTDLGW pPD);
// BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);
// PCCERT_CONTEXT __stdcall CertDuplicateCertificateContext(PCCERT_CONTEXT pCertContext);
// DWORD __stdcall CertGetNameStringW(PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
// int __stdcall StartDocW(HDC hdc, const DOCINFOW *lpdi);
// int __stdcall SetMapMode(HDC hdc, int iMode);
// COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color);
// int __stdcall SetBkMode(HDC hdc, int mode);
// COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color);
// BOOL __stdcall GetTextMetricsW(HDC hdc, LPTEXTMETRICW lptm);
// int __stdcall EndDoc(HDC hdc);
// int __stdcall StartPage(HDC hdc);
// int __stdcall EndPage(HDC hdc);
// HFONT __stdcall CreateFontIndirectW(const LOGFONTW *lplf);
// BOOL __stdcall GetTextExtentPoint32W(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl);
// UINT __stdcall SetTextAlign(HDC hdc, UINT align);
// BOOL __stdcall Polyline(HDC hdc, const POINT *apt, int cpt);
// BOOL __stdcall MoveToEx(HDC hdc, int x, int y, LPPOINT lppt);
// int __stdcall SetROP2(HDC hdc, int rop2);
// int __stdcall SaveDC(HDC hdc);
// BOOL __stdcall RestoreDC(HDC hdc, int nSavedDC);
// BOOL __stdcall Rectangle(HDC hdc, int left, int top, int right, int bottom);
// BOOL __stdcall LineTo(HDC hdc, int x, int y);
// HBITMAP __stdcall CreateDIBSection(HDC hdc, const BITMAPINFO *lpbmi, UINT usage, void **ppvBits, HANDLE hSection, DWORD offset);
// int __stdcall GetObjectW(HANDLE h, int c, LPVOID pv);
// BOOL __stdcall DeleteObject(HGDIOBJ ho);
// BOOL __stdcall BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
// HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int cx, int cy);
// HDC __stdcall CreateCompatibleDC(HDC hdc);
// HPEN __stdcall CreatePen(int iStyle, int cWidth, COLORREF color);
// HRGN __stdcall CreateRectRgn(int x1, int y1, int x2, int y2);
// HRGN __stdcall CreateRectRgnIndirect(const RECT *lprect);
// HBRUSH __stdcall CreateSolidBrush(COLORREF color);
// BOOL __stdcall DeleteDC(HDC hdc);
// COLORREF __stdcall GetBkColor(HDC hdc);
// int __stdcall GetBkMode(HDC hdc);
// int __stdcall GetDeviceCaps(HDC hdc, int index);
// HGDIOBJ __stdcall GetStockObject(int i);
// BOOL __stdcall RectInRegion(HRGN hrgn, const RECT *lprect);
// int __stdcall SelectClipRgn(HDC hdc, HRGN hrgn);
// HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h);
// BOOL __stdcall ExtTextOutW(HDC hdc, int x, int y, UINT options, const RECT *lprect, LPCWSTR lpString, UINT c, const INT *lpDx);
// DWORD __stdcall GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
// SIZE_T __stdcall VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
// BOOL __stdcall GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
// DWORD __stdcall GetCurrentProcessId();
// DWORD_PTR __stdcall SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask);
// DWORD __stdcall SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
// UINT __stdcall GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize);
// BOOL __stdcall DeleteFileW(LPCWSTR lpFileName);
// DWORD __stdcall SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// HANDLE __stdcall OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
// BOOL __stdcall GetThreadContext(HANDLE hThread, LPCONTEXT lpContext);
// DWORD __stdcall SuspendThread(HANDLE hThread);
// DWORD __stdcall ResumeThread(HANDLE hThread);
// BOOL __stdcall ResetEvent(HANDLE hEvent);
// BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
// BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency);
// int __stdcall lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2);
// void __stdcall GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer);
// BOOL __stdcall SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
// BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode);
// DWORD __stdcall GetProcessId(HANDLE Process);
// BOOL __stdcall PulseEvent(HANDLE hEvent);
// BOOL __stdcall SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass);
// BOOL __stdcall GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize);
// LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
// BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
// BOOL __stdcall GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
// BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
// BOOL __stdcall DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions);
// UINT __stdcall GetDriveTypeW(LPCWSTR lpRootPathName);
// DWORD __stdcall GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
// int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar);
// PVOID __stdcall DecodePointer(PVOID Ptr);
// void __stdcall RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
// BOOL __stdcall InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
// void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
// DWORD __stdcall ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
// HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName);
// BOOL __stdcall IsDebuggerPresent();
// PVOID __stdcall EncodePointer(PVOID Ptr);
// int __stdcall lstrlenA(LPCSTR lpString);
// int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2);
// BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
// HANDLE __stdcall OpenEventW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// void __stdcall SetLastError(DWORD dwErrCode);
// BOOL __stdcall IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax);
// BOOL __stdcall SystemTimeToFileTime(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
// void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
// void __stdcall GetSystemTime(LPSYSTEMTIME lpSystemTime);
// void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// BOOL __stdcall TerminateThread(HANDLE hThread, DWORD dwExitCode);
// BOOL __stdcall GlobalUnlock(HGLOBAL hMem);
// LPVOID __stdcall GlobalLock(HGLOBAL hMem);
// HGLOBAL __stdcall GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
// HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
// HRSRC __stdcall FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
// HRSRC __stdcall FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
// DWORD __stdcall SizeofResource(HMODULE hModule, HRSRC hResInfo);
// HGLOBAL __stdcall LoadResource(HMODULE hModule, HRSRC hResInfo);
// HANDLE __stdcall GetProcessHeap();
// SIZE_T __stdcall HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
// BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
// LPVOID __stdcall HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
// LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
// BOOL __stdcall HeapDestroy(HANDLE hHeap);
// LPVOID __stdcall LockResource(HGLOBAL hResData);
// LPWSTR __stdcall GetCommandLineW();
// DWORD __stdcall GetFileType(HANDLE hFile);
// HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes);
// DWORD __stdcall FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);
// ATOM __stdcall GlobalAddAtomW(LPCWSTR lpString);
// DWORD __stdcall GetTickCount();
// int __stdcall MulDiv(int nNumber, int nNumerator, int nDenominator);
// BOOL __stdcall GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize);
// BOOL __stdcall GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode);
// HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
// HANDLE __stdcall CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
// DWORD __stdcall WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds);
// DWORD __stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);
// BOOL __stdcall SetEvent(HANDLE hEvent);
// void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// HANDLE __stdcall GetCurrentThread();
// void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// BOOL __stdcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
// BOOL __stdcall FindClose(HANDLE hFindFile);
// int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
// HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName);
// BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
// HMODULE __stdcall LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
// BOOL __stdcall FreeLibrary(HMODULE hLibModule);
// DWORD __stdcall GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
// HANDLE __stdcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
// DWORD __stdcall GetFileAttributesW(LPCWSTR lpFileName);
// int __stdcall GetNumberFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber);
// int __stdcall GetDateFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
// int __stdcall GetTimeFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
// int __stdcall GetLocaleInfoW(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
// HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// DWORD __stdcall GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// UINT __stdcall GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
// void __stdcall OutputDebugStringW(LPCWSTR lpOutputString);
// DWORD __stdcall ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
// BOOL __stdcall SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue);
// BOOL __stdcall CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// DWORD __stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
// HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName);
// HANDLE __stdcall CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
// BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue);
// DWORD __stdcall TlsAlloc();
// int __stdcall lstrlenW(LPCWSTR lpString);
// BOOL __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress);
// LPVOID __stdcall MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
// DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
// BOOL __stdcall FileTimeToSystemTime(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
// BOOL __stdcall FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
// BOOL __stdcall CloseHandle(HANDLE hObject);
// BOOL __stdcall GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
// BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
// HANDLE __stdcall GetStdHandle(DWORD nStdHandle);
// DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);
// void __stdcall Sleep(DWORD dwMilliseconds);
// void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// UINT __stdcall SetErrorMode(UINT uMode);
// DWORD __stdcall GetLastError();
// void __stdcall __noreturn ExitThread(DWORD dwExitCode);
// HANDLE __stdcall GetCurrentProcess();
// HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
// HLOCAL __stdcall LocalFree(HLOCAL hMem);
// DWORD __stdcall GetVersion();
// FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
// LONG __stdcall InterlockedDecrement(volatile LONG *lpAddend);
// LONG __stdcall InterlockedIncrement(volatile LONG *lpAddend);
// LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex);
// BOOL __stdcall IsBadReadPtr(const void *lp, UINT_PTR ucb);
// HRESULT __stdcall SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound);
// BSTR __stdcall SysAllocStringLen(const OLECHAR *strIn, UINT ui);
// HRESULT __stdcall SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv);
// HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY *psa);
// HRESULT __stdcall SafeArrayAccessData(SAFEARRAY *psa, void **ppvData);
// BSTR __stdcall SysAllocString(const OLECHAR *psz);
// void __stdcall SysFreeString(BSTR bstrString);
// UINT __stdcall SysStringLen(BSTR);
// BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT len);
// void __stdcall VariantInit(VARIANTARG *pvarg);
// HRESULT __stdcall VariantClear(VARIANTARG *pvarg);
// HRESULT __stdcall VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt);
// HRESULT __stdcall SafeArrayDestroy(SAFEARRAY *psa);
// HRESULT __stdcall SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound);
// HDEVINFO __stdcall SetupDiGetClassDevsW(const GUID *ClassGuid, PCWSTR Enumerator, HWND hwndParent, DWORD Flags);
// BOOL __stdcall SetupDiGetDeviceInterfaceDetailW(HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData);
// BOOL __stdcall SetupDiEnumDeviceInterfaces(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID *InterfaceClassGuid, DWORD MemberIndex, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData);
// BOOL __stdcall SetupDiDestroyDeviceInfoList(HDEVINFO DeviceInfoSet);
// BOOL __stdcall SHGetPathFromIDListW(LPCITEMIDLIST pidl, LPWSTR pszPath);
// HRESULT __stdcall SHGetSpecialFolderLocation(HWND hwnd, int csidl, LPITEMIDLIST *ppidl);
// LPITEMIDLIST __stdcall SHBrowseForFolderW(LPBROWSEINFOW lpbi);
// HRESULT __stdcall SHGetMalloc(IMalloc **ppMalloc);
// BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);
// BOOL __stdcall ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo);
// DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);
// HINSTANCE __stdcall ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
// COLORREF __stdcall ColorHLSToRGB(WORD wHue, WORD wLuminance, WORD wSaturation);
// void __stdcall ColorRGBToHLS(COLORREF clrRGB, WORD *pwHue, WORD *pwLuminance, WORD *pwSaturation);
// HRESULT __stdcall IUnknown_QueryService(IUnknown *punk, const GUID *const guidService, const IID *const riid, void **ppvOut);
// HRESULT __stdcall UrlUnescapeW(LPWSTR pszUrl, LPWSTR pszUnescaped, LPDWORD pcchUnescaped, DWORD dwFlags);
// HWND __stdcall GetWindow(HWND hWnd, UINT uCmd);
// HWND __stdcall GetDesktopWindow();
// BOOL __stdcall KillTimer(HWND hWnd, UINT_PTR uIDEvent);
// DWORD __stdcall MsgWaitForMultipleObjects(DWORD nCount, const HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
// int __stdcall GetDlgCtrlID(HWND hWnd);
// BOOL __stdcall CheckRadioButton(HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
// LRESULT __stdcall SendMessageTimeoutW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
// BOOL __stdcall PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// BOOL __stdcall GetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);
// BOOL __stdcall SetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
// BOOL __stdcall IsDialogMessageW(HWND hDlg, LPMSG lpMsg);
// BOOL __stdcall DrawIconEx(HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
// BOOL __stdcall CheckMenuRadioItem(HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);
// HWND __stdcall WindowFromPoint(POINT Point);
// BOOL __stdcall RedrawWindow(HWND hWnd, const RECT *lprcUpdate, HRGN hrgnUpdate, UINT flags);
// BOOL __stdcall TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const RECT *prcRect);
// BOOL __stdcall RemoveMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
// HMENU __stdcall CreateMenu();
// BOOL __stdcall DrawMenuBar(HWND hWnd);
// HMENU __stdcall LoadMenuW(HINSTANCE hInstance, LPCWSTR lpMenuName);
// int __stdcall TranslateAcceleratorW(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
// HACCEL __stdcall LoadAcceleratorsW(HINSTANCE hInstance, LPCWSTR lpTableName);
// BOOL __stdcall IsWindowEnabled(HWND hWnd);
// UINT __stdcall GetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax);
// HWND __stdcall CreateDialogParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
// BOOL __stdcall IsWindow(HWND hWnd);
// void __stdcall PostQuitMessage(int nExitCode);
// BOOL __stdcall ExitWindowsEx(UINT uFlags, DWORD dwReason);
// LRESULT __stdcall DispatchMessageW(const MSG *lpMsg);
// BOOL __stdcall TranslateMessage(const MSG *lpMsg);
// BOOL __stdcall GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
// BOOL __stdcall DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);
// UINT __stdcall RegisterWindowMessageW(LPCWSTR lpString);
// HDC __stdcall GetWindowDC(HWND hWnd);
// BOOL __stdcall SetMenuItemInfoW(HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOW lpmii);
// BOOL __stdcall IsIconic(HWND hWnd);
// BOOL __stdcall ShowWindowAsync(HWND hWnd, int nCmdShow);
// BOOL __stdcall SystemParametersInfoW(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
// BOOL __stdcall EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam);
// DWORD __stdcall SetClassLongW(HWND hWnd, int nIndex, LONG dwNewLong);
// int __stdcall GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount);
// BOOL __stdcall InvalidateRgn(HWND hWnd, HRGN hRgn, BOOL bErase);
// BOOL __stdcall TrackPopupMenuEx(HMENU, UINT, int, int, HWND, LPTPMPARAMS);
// BOOL __stdcall ModifyMenuW(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
// BOOL __stdcall AppendMenuW(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
// int __stdcall GetMenuItemCount(HMENU hMenu);
// UINT __stdcall GetMenuItemID(HMENU hMenu, int nPos);
// BOOL __stdcall EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
// HMENU __stdcall CreatePopupMenu();
// BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable);
// UINT __stdcall IsDlgButtonChecked(HWND hDlg, int nIDButton);
// BOOL __stdcall CheckDlgButton(HWND hDlg, int nIDButton, UINT uCheck);
// BOOL __stdcall GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT *lpwndpl);
// HANDLE __stdcall LoadImageW(HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad);
// BOOL __stdcall SetWindowPlacement(HWND hWnd, const WINDOWPLACEMENT *lpwndpl);
// ATOM __stdcall RegisterClassW(const WNDCLASSW *lpWndClass);
// LRESULT __stdcall DefFrameProcW(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
// LRESULT __stdcall DefDlgProcW(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
// HICON __stdcall CreateIconIndirect(PICONINFO piconinfo);
// int __stdcall FrameRect(HDC hDC, const RECT *lprc, HBRUSH hbr);
// BOOL __stdcall ClientToScreen(HWND hWnd, LPPOINT lpPoint);
// BOOL __stdcall IsWindowVisible(HWND hWnd);
// BOOL __stdcall DestroyWindow(HWND hWnd);
// int __stdcall GetClassNameW(HWND hWnd, LPWSTR lpClassName, int nMaxCount);
// BOOL __stdcall EnumChildWindows(HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
// BOOL __stdcall PtInRect(const RECT *lprc, POINT pt);
// BOOL __stdcall UnionRect(LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2);
// BOOL __stdcall CopyRect(LPRECT lprcDst, const RECT *lprcSrc);
// BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint);
// BOOL __stdcall EmptyClipboard();
// HANDLE __stdcall SetClipboardData(UINT uFormat, HANDLE hMem);
// BOOL __stdcall CloseClipboard();
// BOOL __stdcall OpenClipboard(HWND hWndNewOwner);
// BOOL __stdcall IsZoomed(HWND hWnd);
// BOOL __stdcall EndDeferWindowPos(HDWP hWinPosInfo);
// HDWP __stdcall DeferWindowPos(HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
// HDWP __stdcall BeginDeferWindowPos(int nNumWindows);
// BOOL __stdcall DrawFrameControl(HDC, LPRECT, UINT, UINT);
// HWND __stdcall ChildWindowFromPoint(HWND hWndParent, POINT Point);
// BOOL __stdcall SetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
// INT_PTR __stdcall DialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
// BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint);
// BOOL __stdcall SetWindowTextW(HWND hWnd, LPCWSTR lpString);
// HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem);
// BOOL __stdcall EndDialog(HWND hDlg, INT_PTR nResult);
// INT_PTR __stdcall DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
// BOOL __stdcall GetScrollInfo(HWND hwnd, int nBar, LPSCROLLINFO lpsi);
// int __stdcall SetScrollInfo(HWND hwnd, int nBar, LPCSCROLLINFO lpsi, BOOL redraw);
// HWND __stdcall GetParent(HWND hWnd);
// DWORD __stdcall GetClassLongW(HWND hWnd, int nIndex);
// LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong);
// LONG __stdcall GetWindowLongW(HWND hWnd, int nIndex);
// BOOL __stdcall OffsetRect(LPRECT lprc, int dx, int dy);
// BOOL __stdcall IntersectRect(LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2);
// BOOL __stdcall InflateRect(LPRECT lprc, int dx, int dy);
// int __stdcall FillRect(HDC hDC, const RECT *lprc, HBRUSH hbr);
// HBRUSH __stdcall GetSysColorBrush(int nIndex);
// DWORD __stdcall GetSysColor(int nIndex);
// int __stdcall MapWindowPoints(HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
// BOOL __stdcall GetCursorPos(LPPOINT lpPoint);
// LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// DWORD __stdcall WaitForInputIdle(HANDLE hProcess, DWORD dwMilliseconds);
// BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow);
// HWND __stdcall SetFocus(HWND hWnd);
// HMENU __stdcall GetMenu(HWND hWnd);
// DWORD __stdcall CheckMenuItem(HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
// HMENU __stdcall GetSubMenu(HMENU hMenu, int nPos);
// BOOL __stdcall InsertMenuW(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
// BOOL __stdcall DeleteMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
// BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect);
// BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect);
// HANDLE __stdcall GetPropW(HWND hWnd, LPCWSTR lpString);
// BOOL __stdcall SetPropW(HWND hWnd, LPCWSTR lpString, HANDLE hData);
// int __stdcall ScrollWindowEx(HWND hWnd, int dx, int dy, const RECT *prcScroll, const RECT *prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);
// BOOL __stdcall ValidateRect(HWND hWnd, const RECT *lpRect);
// BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase);
// int __stdcall GetUpdateRgn(HWND hWnd, HRGN hRgn, BOOL bErase);
// BOOL __stdcall GetUpdateRect(HWND hWnd, LPRECT lpRect, BOOL bErase);
// BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint);
// HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint);
// BOOL __stdcall UpdateWindow(HWND hWnd);
// int __stdcall DrawTextW(HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format);
// int __stdcall GetSystemMetrics(int nIndex);
// UINT_PTR __stdcall SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
// BOOL __stdcall ReleaseCapture();
// BOOL __stdcall SetForegroundWindow(HWND hWnd);
// int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
// HCURSOR __stdcall SetCursor(HCURSOR hCursor);
// HWND __stdcall FindWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName);
// HWND __stdcall FindWindowExW(HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);
// DWORD __stdcall GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId);
// HCURSOR __stdcall LoadCursorW(HINSTANCE hInstance, LPCWSTR lpCursorName);
// HICON __stdcall LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName);
// BOOL __stdcall DestroyIcon(HICON hIcon);
// BOOL __stdcall EnumDisplaySettingsW(LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW *lpDevMode);
// HDC __stdcall GetDC(HWND hWnd);
// int __stdcall ReleaseDC(HWND hWnd, HDC hDC);
// int __stdcall LoadStringW(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
// HWND __stdcall SetCapture(HWND hWnd);
// HWND __stdcall GetCapture();
// SHORT __stdcall GetKeyState(int nVirtKey);
// HWND __stdcall GetFocus();
// BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
// HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
// ATOM __stdcall RegisterClassExW(const WNDCLASSEXW *);
// LRESULT __stdcall CallWindowProcW(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// LRESULT __stdcall DefWindowProcW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// BOOL __stdcall PostMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// LRESULT __stdcall DefMDIChildProcW(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
// HINTERNET __stdcall WinHttpOpenRequest(HINTERNET hConnect, LPCWSTR pwszVerb, LPCWSTR pwszObjectName, LPCWSTR pwszVersion, LPCWSTR pwszReferrer, LPCWSTR *ppwszAcceptTypes, DWORD dwFlags);
// BOOL __stdcall WinHttpSetOption(HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength);
// BOOL __stdcall WinHttpQueryDataAvailable(HINTERNET hRequest, LPDWORD lpdwNumberOfBytesAvailable);
// BOOL __stdcall WinHttpSendRequest(HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength, DWORD dwTotalLength, DWORD_PTR dwContext);
// BOOL __stdcall WinHttpReadData(HINTERNET hRequest, LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead);
// HINTERNET __stdcall WinHttpConnect(HINTERNET hSession, LPCWSTR pswzServerName, INTERNET_PORT nServerPort, DWORD dwReserved);
// BOOL __stdcall WinHttpCloseHandle(HINTERNET hInternet);
// HINTERNET __stdcall WinHttpOpen(LPCWSTR pszAgentW, DWORD dwAccessType, LPCWSTR pszProxyW, LPCWSTR pszProxyBypassW, DWORD dwFlags);
// BOOL __stdcall WinHttpReceiveResponse(HINTERNET hRequest, LPVOID lpReserved);
// BOOL __stdcall WinHttpQueryHeaders(HINTERNET hRequest, DWORD dwInfoLevel, LPCWSTR pwszName, LPVOID lpBuffer, LPDWORD lpdwBufferLength, LPDWORD lpdwIndex);
// BOOL __stdcall WinHttpGetProxyForUrl(HINTERNET hSession, LPCWSTR lpcwszUrl, WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions, WINHTTP_PROXY_INFO *pProxyInfo);
// BOOL __stdcall WinHttpWriteData(HINTERNET hRequest, LPCVOID lpBuffer, DWORD dwNumberOfBytesToWrite, LPDWORD lpdwNumberOfBytesWritten);
// u_long __stdcall ntohl(u_long netlong);
// u_long __stdcall htonl(u_long hostlong);
// u_short __stdcall htons(u_short hostshort);
// struct hostent *__stdcall gethostbyaddr(const char *addr, int len, int type);
// struct servent *__stdcall getservbyport(int port, const char *proto);
// int __stdcall WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData);
// u_short __stdcall ntohs(u_short netshort);
// int __stdcall CredUIPromptForCredentialsW(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// HRESULT __stdcall CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv);
// HRESULT __stdcall CoInitialize(LPVOID pvReserved);
// HRESULT __stdcall CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit);
// HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv);
// void __stdcall CoUninitialize();
// HRESULT __stdcall CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
// HRESULT __stdcall CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm);
// void __stdcall CoTaskMemFree(LPVOID pv);
LSTATUS __stdcall RegDeleteKeyExW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved);
HRESULT __stdcall SHGetFolderPathW(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPWSTR pszPath);
LONG __stdcall WinVerifyTrust(HWND hwnd, GUID *ActionID, WINTRUST_DATA_EX *ActionData);
CRYPT_PROVIDER_SGNR *__stdcall WTHelperGetProvSignerFromChain(CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSigner, DWORD idxCounterSigner);
CRYPT_PROVIDER_DATA *__stdcall WTHelperProvDataFromStateData(HANDLE hStateData);
BOOL __stdcall CryptCATAdminReleaseContext(HCATADMIN hCatAdmin, DWORD dwFlags);
BOOL __stdcall CryptCATAdminReleaseCatalogContext(HCATADMIN hCatAdmin, HCATINFO hCatInfo, DWORD dwFlags);
BOOL __stdcall CryptCATCatalogInfoFromContext(HCATINFO hCatInfo, CATALOG_INFO *psCatInfo, DWORD dwFlags);
HCATINFO __stdcall CryptCATAdminEnumCatalogFromHash(HCATADMIN hCatAdmin, BYTE *pbHash, DWORD cbHash, DWORD dwFlags, HCATINFO *phPrevCatInfo);
BOOL __stdcall CryptCATAdminCalcHashFromFileHandle(HANDLE hFile, DWORD *pcbHash, BYTE *pbHash, DWORD dwFlags);
BOOL __stdcall CryptCATAdminAcquireContext(HCATADMIN *phCatAdmin, const GUID *pgSubsystem, DWORD dwFlags);
DWORD __stdcall CertNameToStrW(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz);
HCATINFO __stdcall CryptCATAdminAddCatalog(HCATADMIN hCatAdmin, PWSTR pwszCatalogFile, PWSTR pwszSelectBaseName, DWORD dwFlags);
BOOL __stdcall CryptCATAdminRemoveCatalog(HCATADMIN hCatAdmin, LPCWSTR pwszCatalogFile, DWORD dwFlags);
BOOL __stdcall IsCatalogFile(HANDLE hFile, WCHAR *pwszFileName);
void __stdcall gpfnRtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
HMONITOR __stdcall MonitorFromPoint(POINT pt, DWORD dwFlags);
BOOL __stdcall GetMonitorInfoA(HMONITOR hMonitor, LPMONITORINFO lpmi);
TRACEHANDLE __stdcall OpenTraceW_0(PEVENT_TRACE_LOGFILEW Logfile);
ULONG __stdcall ProcessTrace_0(PTRACEHANDLE HandleArray, ULONG HandleCount, LPFILETIME StartTime, LPFILETIME EndTime);
BOOLEAN __stdcall SetSuspendState(BOOLEAN bHibernate, BOOLEAN bForce, BOOLEAN bWakeupEventsDisabled);
BOOL __stdcall LockWorkStation();
BOOLEAN __stdcall IsPwrHibernateAllowed();
BOOLEAN __stdcall IsPwrSuspendAllowed();
HPROPSHEETPAGE __stdcall CreateSecurityPage(LPSECURITYINFO psi);
DWORD __stdcall GetGuiResources(HANDLE hProcess, DWORD uiFlags);
DWORD __stdcall GetMappedFileNameW(HANDLE hProcess, LPVOID lpv, LPWSTR lpFilename, DWORD nSize);
DWORD __stdcall GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
BOOL __stdcall EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName);
BOOL __stdcall QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
BOOL __stdcall QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
DWORD __stdcall SymGetOptions();
PVOID __stdcall SymFunctionTableAccess64(HANDLE hProcess, DWORD64 AddrBase);
BOOL __stdcall SymFromAddrW(HANDLE hProcess, DWORD64 Address, PDWORD64 Displacement, PSYMBOL_INFOW Symbol);
BOOL __stdcall StackWalk64(DWORD MachineType, HANDLE hProcess, HANDLE hThread, LPSTACKFRAME64 StackFrame, PVOID ContextRecord, PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);
BOOL __stdcall QueryWorkingSet(HANDLE hProcess, PVOID pv, DWORD cb);
DWORD64 __stdcall SymLoadModule64(HANDLE hProcess, HANDLE hFile, PCSTR ImageName, PCSTR ModuleName, DWORD64 BaseOfDll, DWORD SizeOfDll);
DWORD64 __stdcall SymLoadModuleExW(HANDLE hProcess, HANDLE hFile, PCWSTR ImageName, PCWSTR ModuleName, DWORD64 BaseOfDll, DWORD DllSize, PMODLOAD_DATA Data, DWORD Flags);
BOOL __stdcall SymUnloadModule64(HANDLE hProcess, DWORD64 BaseOfDll);
BOOL __stdcall SymGetModuleInfoW64(HANDLE hProcess, DWORD64 qwAddr, PIMAGEHLP_MODULEW64 ModuleInfo);
BOOL __stdcall EnumerateLoadedModulesW64(HANDLE hProcess, PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, PVOID UserContext);
BOOL __stdcall EnumProcessModulesEx(HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded, DWORD dwFilterFlag);
BOOL __stdcall SymRegisterCallback64(HANDLE hProcess, PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, ULONG64 UserContext);
DWORD64 __stdcall SymGetModuleBase64(HANDLE hProcess, DWORD64 qwAddr);
PIMAGE_NT_HEADERS __stdcall ImageNtHeader(PVOID Base);
HANDLE __stdcall FindExecutableImageExW_0(PCWSTR FileName, PCWSTR SymbolPath, PWSTR ImageFilePath, PFIND_EXE_FILE_CALLBACKW Callback, PVOID CallerData);
HANDLE __stdcall FindExecutableImageExW(PCWSTR FileName, PCWSTR SymbolPath, PWSTR ImageFilePath, PFIND_EXE_FILE_CALLBACKW Callback, PVOID CallerData);
BOOL __stdcall SetProcessAffinityMask(HANDLE hProcess, DWORD dwProcessAffinityMask);
DWORD __stdcall GetExtendedTcpTable(PVOID pTcpTable, PDWORD pdwSize, BOOL bOrder, ULONG ulAf, TCP_TABLE_CLASS TableClass, ULONG Reserved);
DWORD __stdcall GetExtendedUdpTable(PVOID pUdpTable, PDWORD pdwSize, BOOL bOrder, ULONG ulAf, UDP_TABLE_CLASS TableClass, ULONG Reserved);
ULONG __stdcall GetTcpTable(PMIB_TCPTABLE TcpTable, PULONG SizePointer, BOOL Order);
ULONG __stdcall GetUdpTable(PMIB_UDPTABLE UdpTable, PULONG SizePointer, BOOL Order);
DWORD __stdcall WTSGetActiveConsoleSessionId();
HANDLE __stdcall CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
HANDLE __stdcall CreateToolhelp32Snapshot_0(DWORD dwFlags, DWORD th32ProcessID);
BOOL __stdcall Process32FirstW_0(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
BOOL __stdcall Process32NextW_0(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
BOOL __stdcall Thread32First_0(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
BOOL __stdcall Thread32Next_0(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
BOOL __stdcall Module32FirstW_0(HANDLE hSnapshot, LPMODULEENTRY32W lpme);
BOOL __stdcall Module32NextW_0(HANDLE hSnapshot, LPMODULEENTRY32W lpme);
BOOL __stdcall IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
BOOL __stdcall GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
BOOL __stdcall GetMenuInfo(HMENU, LPMENUINFO);
BOOL __stdcall SetMenuInfo(HMENU, LPCMENUINFO);

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN loc_FFFFFF; // weak
_UNKNOWN loc_1008A40; // weak
_UNKNOWN loc_1008A70; // weak
char algn_1022FF0[16] = { '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '' }; // weak
char algn_104224B[5] = { '', '', '', '', '' }; // weak
_UNKNOWN loc_1065090; // weak
const WCHAR *gszNullString = NULL;
GUID CLSID_IShellItem2 = { 2124394707u, 37279u, 17159u, { 171u, 46u, 155u, 24u, 96u, 49u, 12u, 147u } }; // weak
GUID CLSID_ITask = { 344708388u, 41643u, 4558u, { 177u, 31u, 0u, 170u, 0u, 83u, 5u, 3u } }; // weak
IID CLSID_ITaskScheduler = { 344708391u, 41643u, 4558u, { 177u, 31u, 0u, 170u, 0u, 83u, 5u, 3u } }; // idb
IID CLSID_CLSID_CTaskScheduler = { 344708394u, 41643u, 4558u, { 177u, 31u, 0u, 170u, 0u, 83u, 5u, 3u } }; // idb
wchar_t aWinIni[9] = L"\\win.ini"; // weak
void *std::error_category::`vftable' = &std::error_category::`vector deleting destructor'; // weak
IID CLSID_IWbemServices = { 2505497753u, 33420u, 4559u, { 163u, 126u, 0u, 170u, 0u, 50u, 64u, 199u } }; // idb
IID IID_IWbemLocator = { 3692209799u, 29567u, 4559u, { 136u, 77u, 0u, 170u, 0u, 75u, 46u, 36u } }; // idb
void *EventConsumerDescBase::`vftable' = &_purecall; // weak
void *CommandLineEventConsumer::`vftable' = &sub_FF5940; // weak
void *ActiveScriptEventConsumer::`vftable' = &sub_FF5910; // weak
__m128i GUID_PROCEXP_EVENT = { { 0, 217, 253, 104, 62, 74, 209, 17, 132, 244, 0, 0, 248, 4, 100, 227 } }; // idb
GUID CLSID_IDispatch = { 132096u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // weak
IID CLSID_IShellBrowser = { 136418u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
GUID CLSID_IShellFolderViewDual = { 3886133120u, 19862u, 4559u, { 150u, 12u, 0u, 128u, 199u, 244u, 238u, 133u } }; // weak
GUID CLSID_IShellView = { 136419u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
IID CLSID_IShellWindows = { 2244700416u, 19861u, 4559u, { 150u, 12u, 0u, 128u, 199u, 244u, 238u, 133u } }; // idb
GUID CLSID_IShellDispatch2 = { 2764474668u, 15273u, 4562u, { 157u, 234u, 0u, 192u, 79u, 177u, 97u, 98u } }; // idb
void *CThemedWindow::`vftable' = &_purecall; // weak
void *CTreeListData::`vftable' = &CTreeListData::`scalar deleting destructor'; // weak
void *CTreeList::`vftable' = &CTreeList::GetName; // weak
CHAR gszStatusBarText[4] = { '\0', '\0', '\0', '\0' }; // idb
void *CListViewData::`vftable' = &CTreeListData::`scalar deleting destructor'; // weak
RECT stru_1094280 = { 1, 1, 1, 1 }; // weak
RECT stru_1094290 = { 0, 0, 500, 500 }; // weak
void *std::runtime_error::`vftable' = &sub_1008CB0; // weak
void *std::_Facet_base::`vftable' = &sub_1008C50; // weak
void *std::ctype<unsigned short>::`vftable' = &sub_1008C00; // weak
void *std::_System_error::`vftable' = &sub_1008CB0; // weak
_UNKNOWN unk_109BEA4; // weak
void *std::system_error::`vftable' = &sub_1008CB0; // weak
void *std::ios_base::failure::`vftable' = &sub_1008CB0; // weak
void *std::ios_base::`vftable' = &sub_1008C80; // weak
void *std::basic_ostream<unsigned short,std::char_traits<unsigned short>>::`vftable' = &sub_1008A2C; // weak
void *std::basic_streambuf<unsigned short,std::char_traits<unsigned short>>::`vftable' = &sub_1008B10; // weak
void *std::basic_istream<unsigned short,std::char_traits<unsigned short>>::`vftable' = &sub_1008A24; // weak
void *std::basic_iostream<unsigned short,std::char_traits<unsigned short>>::`vftable' = &sub_1008A1C; // weak
void *std::basic_stringbuf<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short>>::`vftable' = &sub_1008B60; // weak
void *std::basic_stringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short>>::`vftable' = &loc_1008A34; // weak
_UNKNOWN unk_109BFB0; // weak
_DWORD dword_109BFB8[2] = { 0, 88 }; // idb
GUID CLSID_IObjectSecurity = { 2522858336u, 5887u, 4560u, { 145u, 203u, 0u, 170u, 0u, 187u, 183u, 35u } }; // weak
void *CObjSecurity::`vftable' = &CObjSecurity::QueryInterface; // weak
void *ATL::CWin32Heap::`vftable' = &ATL::CWin32Heap::Allocate; // weak
void *ATL::CAtlStringMgr::`vftable' = &ATL::CAtlStringMgr::Allocate; // weak
void *CResizer::`vftable' = &CResizer::GetName; // weak
void *Process::`vftable' = &Process::`scalar deleting destructor'; // weak
void *Runtime::`vftable' = &Runtime::`scalar deleting destructor'; // weak
void *Appdomain::`vftable' = &AppDomain::`vector deleting destructor'; // weak
void *Assembly::`vftable' = &Assembly::`scalar deleting destructor'; // weak
double db_one =  1.0;
double db_four =  4.0; // weak
RECT stru_109CB40 = { 0, 0, 10, 10 }; // weak
RECT stru_109CB50 = { 0, 3220176896, 0, 3220176896 }; // weak
double db_onehundred =  100.0; // weak
double dbValue3 = -1.0; // idb
GUID CLSID_GUID_DISPLAY_DEVICE_ARRIVAL = { 480268672u, 42649u, 17674u, { 154u, 12u, 222u, 79u, 190u, 61u, 221u, 137u } }; // idb
double qword_109D110[2] = {  0.0,  4.294967296e9 }; // idb
wchar_t aLight[] = L"-Light"; // idb
double db_zeropointzerozerofive =  0.005; // weak
double db_two =  2.0; // weak
double db_six =  6.0; // weak
double db_twenty21 =  21.0; // weak
double db_twohundred =  200.0; // weak
double dbl_109EA08 =  8213.0; // weak
double dbl_109EA10 =  27856.0; // weak
double dbl_109EA18 =  4605695.0; // weak
double dbl_109EA20 =  4652870.0; // weak
double dbl_109EA28 =  8388863.0; // weak
double dbl_109EA30 =  8421504.0; // weak
__int64 qword_109EA38 = 4711926293971599360i64; // weak
__int64 qword_109EA40 = 4751297606873776128i64; // weak
RECT gIntArray = { 0, 1, 2, 3 }; // weak
IID stru_109F100 = { 260519583u, 42213u, 19708u, { 189u, 62u, 115u, 230u, 21u, 69u, 114u, 221u } }; // idb
IID CLSID_ITaskService = { 799777991u, 19881u, 16403u, { 150u, 151u, 32u, 204u, 63u, 212u, 15u, 133u } }; // idb
RECT stru_109F270 = { 0, 0, 15, 15 }; // weak
IID stru_109F3AC = { 75143744u, 25982u, 4563u, { 141u, 91u, 0u, 16u, 75u, 53u, 231u, 239u } }; // idb
IID stru_109F3BC = { 2517868775u, 23144u, 4563u, { 143u, 132u, 0u, 160u, 201u, 180u, 213u, 12u } }; // idb
GUID stru_109F3CC = { 2108457479u, 54190u, 19573u, { 155u, 103u, 146u, 128u, 26u, 73u, 125u, 68u } }; // weak
GUID stru_109F3DC = { 3532602458u, 38452u, 16902u, { 165u, 9u, 71u, 117u, 82u, 238u, 251u, 16u } }; // weak
GUID stru_109F3EC = { 3133953933u, 64477u, 18596u, { 150u, 159u, 2u, 217u, 50u, 183u, 70u, 52u } }; // weak
GUID stru_109F3FC = { 827441293u, 19721u, 20379u, { 136u, 56u, 40u, 128u, 191u, 24u, 254u, 81u } }; // weak
GUID stru_109F40C =
{
  3882671458u,
  18253u,
  17613u,
  { 186u, 105u, 55u, 183u, 149u, 119u, 37u, 173u }
}; // weak
void *SymbolInfo::`vftable' = &sub_10298D0; // weak
void *NativeFrame::`vftable' = &sub_10298D0; // weak
void *CCorDebugDataTarget::`vftable' = &sub_1029800; // weak
void *CCLRDebuggingLibraryProvider::`vftable' = &sub_1029780; // weak
void *MixedModeStackWalker::`vftable' = &sub_1029880; // weak
GUID stru_109FB98 =
{
  4261862440u,
  18939u,
  17974u,
  { 164u, 163u, 232u, 13u, 180u, 174u, 17u, 108u }
}; // weak
GUID stru_109FBA8 = { 1030709092u, 30008u, 4563u, { 141u, 91u, 0u, 16u, 75u, 53u, 231u, 239u } }; // weak
GUID stru_109FBB8 = { 65168145u, 20342u, 4563u, { 136u, 198u, 0u, 96u, 151u, 148u, 84u, 24u } }; // weak
GUID stru_109FBC8 = { 3106719735u, 40237u, 17860u, { 188u, 43u, 98u, 31u, 204u, 157u, 251u, 244u } }; // weak
GUID stru_109FBD8 =
{
  2275191818u,
  19027u,
  18024u,
  { 184u, 227u, 203u, 132u, 115u, 203u, 24u, 127u }
}; // weak
GUID stru_109FC40 = { 3229703132u, 53163u, 17534u, { 167u, 121u, 193u, 22u, 180u, 84u, 235u, 91u } }; // weak
GUID stru_109FC50 = { 4166274755u, 24142u, 18119u, { 141u, 62u, 165u, 43u, 132u, 5u, 177u, 245u } }; // weak
GUID stru_109FC60 = { 892903409u, 13956u, 19541u, { 162u, 238u, 33u, 15u, 38u, 198u, 14u, 94u } }; // weak
GUID stru_109FD30 = { 65168148u, 20342u, 4563u, { 136u, 198u, 0u, 96u, 151u, 148u, 84u, 24u } }; // weak
GUID stru_10A00E0 = { 2659273389u, 12804u, 4562u, { 154u, 130u, 0u, 96u, 8u, 168u, 105u, 57u } }; // weak
NetworkMsgItem gNetworkMsgItem2[] =
{
  { 17433264, 1 },
  { 17433284, 2 },
  { 17433300, 3 },
  { 17433312, 4 },
  { 17433300, 3 },
  { 17433312, 4 },
  { 17433324, 5 },
  { 17433336, 6 },
  { 17433348, 7 },
  { 17431936, 8 },
  { 17431944, 12 },
  { 17431968, 13 },
  { 17431988, 14 },
  { 17432016, 15 },
  { 17432036, 16 },
  { 17432060, 17 },
  { 17432084, 18 },
  { 17432092, 19 },
  { 17432132, 20 },
  { 17432164, 9 },
  { 17432196, 10 },
  { 17432224, 11 },
  { 17432248, 21 },
  { 17432264, 22 },
  { 17432280, 23 },
  { 17432296, 24 },
  { 17432312, 25 },
  { 17432328, 26 },
  { 17432344, 27 },
  { 17432360, 28 },
  { 17432376, 29 },
  { 17432392, 30 },
  { 17432408, 31 },
  { 17432424, 32 },
  { 17432440, 33 },
  { 17432456, 34 },
  { 17432472, 35 },
  { 17432488, 36 },
  { 17432504, 37 },
  { 17432520, 38 },
  { 17432536, 39 },
  { 17432552, 40 },
  { 17432568, 41 },
  { 17432584, 42 },
  { 17432600, 43 },
  { 17432616, 44 },
  { 17432632, 45 },
  { 17432648, 46 },
  { 17432664, 47 },
  { 17432680, 48 },
  { 17432696, 49 },
  { 17432712, 50 },
  { 17432728, 51 },
  { 17432744, 52 },
  { 17432760, 53 },
  { 17432780, 54 }
}; // idb
OLECHAR strIn = 0u; // idb
NetworkMsgItem gNetworkMsgItem[] =
{
  { 17433808, 2 },
  { 17433820, 2 },
  { 17433840, 2 },
  { 17433860, 3 },
  { 17433872, 3 },
  { 17433892, 3 },
  { 17433912, 4 },
  { 17433928, 4 },
  { 17433952, 4 },
  { 17433976, 5 },
  { 17433992, 5 },
  { 17434016, 5 },
  { 17434040, 6 },
  { 17434064, 6 },
  { 17434096, 6 },
  { 17434128, 7 },
  { 17434148, 7 },
  { 17434176, 7 },
  { 17434204, 8 },
  { 17434228, 8 },
  { 17434260, 8 },
  { 17434292, 9 },
  { 17434308, 9 },
  { 17434332, 9 }
}; // idb
NetworkMsgItem gReadWriteMsgItem[3] = { { 17416828, 11 }, { 17416816, 10 }, { 17434388, 12 } }; // weak
__int128 xmmword_10A6C30 = 0x16000000150000000400000003i64; // weak
__int128 xmmword_10A6C40 = 0x435000004440000041F00000434i64; // weak
__int128 xmmword_10A6C50 = 0x4A4000004A2000004A0000004A5i64; // weak
int dword_10A6C60[4] = { 1076, 1055, 1092, 1343 }; // weak
RECT stru_10A6C70 = { 0, 1072693248, 0, 1072693248 }; // weak
wchar_t off_10A6EFC = 46u; // idb
__int128 xmmword_10A7010 = 0x10000000100000000000000000i64; // weak
__int128 xmmword_10A7624 = 0x4500520041005700540046004F0053i64; // weak
__int128 xmmword_10A7634 = 0x730065007300730061006C0043005Ci64; // weak
__int128 xmmword_10A7644 = 0x5C004400490053004C0043005Ci64; // weak
IID riid = { 799777991u, 19881u, 16403u, { 150u, 151u, 32u, 204u, 63u, 212u, 15u, 133u } }; // idb
_UNKNOWN unk_10A776C; // weak
_UNKNOWN unk_10A781C; // weak
_UNKNOWN unk_10A783C; // weak
IID stru_10A78CC = { 260519583u, 42213u, 19708u, { 189u, 62u, 115u, 230u, 21u, 69u, 114u, 221u } }; // idb
IID IID_IWbemLocator = { 3692209799u, 29567u, 4559u, { 136u, 77u, 0u, 170u, 0u, 75u, 46u, 36u } }; // idb
IID CLSID_WbemLocator = { 1167128593u, 7482u, 4560u, { 137u, 31u, 0u, 170u, 0u, 75u, 46u, 36u } }; // idb
IID CLSID_IShellLinkW = { 136441u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
GUID CLSID_SID_STopLevelBrowser = { 1284947520u, 37212u, 4559u, { 153u, 211u, 0u, 170u, 0u, 74u, 232u, 55u } }; // idb
GUID CLSID_IPersistFile = { 267u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // weak
GUID CLSID_IShellItemImageFactory = { 3166800761u, 47638u, 17455u, { 128u, 196u, 138u, 89u, 195u, 12u, 70u, 59u } }; // weak
IID CLSID_ShellLink = { 136193u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
IID CLSID_IXMLDOMDocument = { 691257217u, 31542u, 4562u, { 178u, 14u, 0u, 192u, 79u, 152u, 62u, 96u } }; // idb
IID CLSID_ShellWindows = { 2610977138u, 63144u, 4559u, { 164u, 66u, 0u, 160u, 201u, 10u, 143u, 57u } }; // idb
GUID CLSID_IUnknown = { 0u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // weak
int (__thiscall *ATL::_com_error::`vftable')(void *, char) = &ATL::_com_error::`scalar deleting destructor'; // weak
void *std::bad_alloc::`vftable' = &sub_1064585; // weak
void *std::logic_error::`vftable' = &sub_10645AA; // weak
void *std::length_error::`vftable' = &sub_10645AA; // weak
void *std::out_of_range::`vftable' = &sub_10645AA; // weak
int dword_10A7C10 = 5; // weak
_UNKNOWN unk_10A7E68; // weak
GUID GUID_ATLVer110 =
{
  3544786984u,
  16696u,
  20436u,
  { 179u, 236u, 219u, 153u, 19u, 94u, 174u, 134u }
}; // weak
void *type_info::`vftable' = &sub_10689FA; // weak
void *std::exception::`vftable' = &sub_1069DCF; // weak
void *std::bad_cast::`vftable' = &sub_1069DCF; // weak
void *std::bad_exception::`vftable' = &sub_106B848; // weak
IID CLSID_XMLDOMDocument = { 4110913330u, 50513u, 4563u, { 137u, 185u, 0u, 0u, 248u, 31u, 226u, 33u } }; // idb
_UNKNOWN unk_10AF88C; // weak
_UNKNOWN unk_10AF894; // weak
int _TI2_AVruntime_error_std__ = 0; // weak
int _TI5_AVfailure_ios_base_std__ = 0; // weak
int _TI2_AVbad_cast_std__ = 0; // weak
int _TI1_AVCAtlException_ATL__ = 0; // weak
int _TI1J = 0; // weak
int _TI1_AV_com_error__ = 0; // weak
HKEY ghLocalMachineKey = (HKEY)0x80000002; // idb
HKEY ghCurrentUserKey = (HKEY)0x80000001; // idb
wchar_t *off_10BAA18 = L"Task Scheduler"; // idb
OLECHAR *off_10BAA1C = L"InprocServer32"; // idb
wchar_t *off_10BAA2C = L"Task Scheduler"; // idb
DWORD gdwTimeout = 5000u; // idb
char bInited = '\x01'; // weak
int (__thiscall **off_10BAA3C[3])(void *, char) =
{
  &std::_Generic_error_category::`vftable',
  &std::_Iostream_error_category::`vftable',
  &std::_System_error_category::`vftable'
}; // weak
int (__thiscall **off_10BAA40[2])(void *, char) =
{
  &std::_Iostream_error_category::`vftable',
  &std::_System_error_category::`vftable'
}; // weak
int (__thiscall **off_10BAA44)(void *, char) = &std::_System_error_category::`vftable'; // weak
GUID GUID_DefaultId_1_3_6_1_5_5_7_3_3 = { 11191659u, 52548u, 4560u, { 140u, 194u, 0u, 192u, 79u, 194u, 149u, 238u } }; // idb
GUID GUID_ActionID = { 11191659u, 52548u, 4560u, { 140u, 194u, 0u, 192u, 79u, 194u, 149u, 238u } }; // idb
wchar_t aYouMustAgreeTo[175] = L"You must agree to the VirusTotal Terms of Service and Privacy Policy before\ncontinuing. A browser window will open to:\n\n     https://www.virustotal.com/about/terms-of-service"; // weak
WCHAR pConfigItem = 17056u; // idb
char *off_10BC4C8[48] =
{
  "{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fswiss\\fprq2\\fcharset0 Tahoma;}{\\f1\\fnil\\fcharset0 Calibri;}}",
  "{\\colortbl ;\\red0\\green0\\blue255;\\red0\\green0\\blue0;}",
  "{\\*\\generator Riched20 10.0.10240}\\viewkind4\\uc1 ",
  "\\pard\\brdrb\\brdrs\\brdrw10\\brsp20 \\sb120\\sa120\\b\\f0\\fs24 SYSINTERNALS SOFTWARE LICENSE TERMS\\fs28\\par",
  "\\pard\\sb120\\sa120\\b0\\fs19 These license terms are an agreement between Sysinternals (a wholly owned subsidiary of Microsoft Corporation) and you.  Please read them.  They apply to the software you are downloading from Systinternals.com, which includes the media on which you received it, if any.  The terms also apply to any Sysinternals\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\tx720\\'b7\\tab updates,\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\'b7\\tab supplements,\\par",
  "\\'b7\\tab Internet-based services, and \\par",
  "\\'b7\\tab support services\\par",
  "\\pard\\sb120\\sa120 for this software, unless other terms accompany those items.  If so, those terms apply.\\par",
  "\\b BY USING THE SOFTWARE, YOU ACCEPT THESE TERMS.  IF YOU DO NOT ACCEPT THEM, DO NOT USE THE SOFTWARE.\\par",
  "\\pard\\brdrt\\brdrs\\brdrw10\\brsp20 \\sb120\\sa120 If you comply with these license terms, you have the rights below.\\par",
  "\\pard\\fi-357\\li357\\sb120\\sa120\\tx360\\fs20 1.\\tab\\fs19 INSTALLATION AND USE RIGHTS.  \\b0 You may install and use any number of copies of the software on your devices.\\b\\par",
  "\\caps\\fs20 2.\\tab\\fs19 Scope of License\\caps0 .\\b0   The software is licensed, not sold. This agreement only gives you some rights to use the software.  Sysinternals reserves all other rights.  Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement.  In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways.    You may not\\b\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\tx720\\b0\\'b7\\tab work around any technical limitations in the binary versions of the software;\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\'b7\\tab reverse engineer, decompile or disassemble the binary versions of the software, except and only to the extent that applicable law expressly permits, despite this limitation;\\par",
  "\\'b7\\tab make more copies of the software than specified in this agreement or allowed by applicable law, despite this limitation;\\par",
  "\\'b7\\tab publish the software for others to copy;\\par",
  "\\'b7\\tab rent, lease or lend the software;\\par",
  "\\'b7\\tab transfer the software or this agreement to any third party; or\\par",
  "\\'b7\\tab use the software for commercial software hosting services.\\par",
  "\\pard\\fi-357\\li357\\sb120\\sa120\\tx360\\b\\fs20 3.\\tab SENSITIVE INFORMATION. \\b0  Please be aware that, similar to other debug tools that capture \\ldblquote process state\\rdblquote  information, files saved by Sysinternals tools may include personally identifiable or other sensitive information (such as usernames, passwords, paths to files accessed, and paths to registry accessed). By using this software, you acknowledge that you are aware of this and take sole responsibility for any personally identifiable or other sensitive information provided to Microsoft or any other party through your use of the software.\\b\\par",
  "5. \\tab\\fs19 DOCUMENTATION.\\b0   Any person that has valid access to your computer or internal network may copy and use the documentation for your internal, reference purposes.\\b\\par",
  "\\caps\\fs20 6.\\tab\\fs19 Export Restrictions\\caps0 .\\b0   The software is subject to United States export laws and regulations.  You must comply with all domestic and international export laws and regulations that apply to the software.  These laws include restrictions on destinations, end users and end use.  For additional information, see {\\cf1\\ul{\\field{\\*\\fldinst{HYPERLINK www.microsoft.com/exporting }}{\\fldrslt{www.microsoft.com/exporting}}}}\\cf1\\ul\\f0\\fs19  <{{\\field{\\*\\fldinst{HYPERLINK \"http://www.microsoft.com/exporting\"}}{\\fldrslt{http://www.microsoft.com/exporting}}}}\\f0\\fs19 >\\cf0\\ulnone .\\b\\par",
  "\\caps\\fs20 7.\\tab\\fs19 SUPPORT SERVICES.\\caps0  \\b0 Because this software is \"as is, \" we may not provide support services for it.\\b\\par",
  "\\caps\\fs20 8.\\tab\\fs19 Entire Agreement.\\b0\\caps0   This agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for the software and support services.\\par",
  "\\pard\\keepn\\fi-360\\li360\\sb120\\sa120\\tx360\\cf2\\b\\caps\\fs20 9.\\tab\\fs19 Applicable Law\\caps0 .\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\tx720\\cf0\\fs20 a.\\tab\\fs19 United States.\\b0   If you acquired the software in the United States, Washington state law governs the interpretation of this agreement and applies to claims for breach of it, regardless of conflict of laws principles.  The laws of the state where you live govern all other claims, including claims under state consumer protection laws, unfair competition laws, and in tort.\\b\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\fs20 b.\\tab\\fs19 Outside the United States.\\b0   If you acquired the software in any other country, the laws of that country apply.\\b\\par",
  "\\pard\\fi-357\\li357\\sb120\\sa120\\tx360\\caps\\fs20 10.\\tab\\fs19 Legal Effect.\\b0\\caps0   This agreement describes certain legal rights.  You may have other rights under the laws of your country.  You may also have rights with respect to the party from whom you acquired the software.  This agreement does not change your rights under the laws of your country if the laws of your country do not permit it to do so.\\b\\caps\\par",
  "\\fs20 11.\\tab\\fs19 Disclaimer of Warranty.\\caps0    \\caps The software is licensed \"as - is.\"  You bear the risk of using it.  SYSINTERNALS gives no express warranties, guarantees or conditions.  You may have additional consumer rights under your local laws which this agreement cannot change.  To the extent permitted under your local laws, SYSINTERNALS excludes the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\\par",
  "\\pard\\fi-360\\li360\\sb120\\sa120\\tx360\\fs20 12.\\tab\\fs19 Limitation on and Exclusion of Remedies and Damages.  You can recover from SYSINTERNALS and its suppliers only direct damages up to U.S. $5.00.  You cannot recover any other damages, including consequential, lost profits, special, indirect or incidental damages.\\par",
  "\\pard\\li357\\sb120\\sa120\\b0\\caps0 This limitation applies to\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\tx720\\'b7\\tab anything related to the software, services, content (including code) on third party Internet sites, or third party programs; and\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\'b7\\tab claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law.\\par",
  "\\pard\\li360\\sb120\\sa120 It also applies even if Sysinternals knew or should have known about the possibility of the damages.  The above limitation or exclusion may not apply to you because your country may not allow the exclusion or limitation of incidental, consequential or other damages.\\par",
  "\\pard\\b Please note: As this software is distributed in Quebec, Canada, some of the clauses in this agreement are provided below in French.\\par",
  "\\pard\\sb240\\lang1036 Remarque : Ce logiciel \\'e9tant distribu\\'e9 au Qu\\'e9bec, Canada, certaines des clauses dans ce contrat sont fournies ci-dessous en fran\\'e7ais.\\par",
  "\\pard\\sb120\\sa120 EXON\\'c9RATION DE GARANTIE.\\b0  Le logiciel vis\\'e9 par une licence est offert \\'ab tel quel \\'bb. Toute utilisation de ce logiciel est \\'e0 votre seule risque et p\\'e9ril. Sysinternals n'accorde aucune autre garantie expresse. Vous pouvez b\\'e9n\\'e9ficier de droits additionnels en vertu du droit local sur la protection dues consommateurs, que ce contrat ne peut modifier. La ou elles sont permises par le droit locale, les garanties implicites de qualit\\'e9 marchande, d'ad\\'e9quation \\'e0 un usage particulier et d'absence de contrefa\\'e7on sont exclues.\\par",
  "\\pard\\keepn\\sb120\\sa120\\b LIMITATION DES DOMMAGES-INT\\'c9R\\'caTS ET EXCLUSION DE RESPONSABILIT\\'c9 POUR LES DOMMAGES.\\b0   Vous pouvez obtenir de Sysinternals et de ses fournisseurs une indemnisation en cas de dommages directs uniquement \\'e0 hauteur de 5,00 $ US. Vous ne pouvez pr\\'e9tendre \\'e0 aucune indemnisation pour les autres dommages, y compris les dommages sp\\'e9ciaux, indirects ou accessoires et pertes de b\\'e9n\\'e9fices.\\par",
  "\\lang1033 Cette limitation concerne :\\par",
  "\\pard\\keepn\\fi-360\\li720\\sb120\\sa120\\tx720\\lang1036\\'b7\\tab tout  ce qui est reli\\'e9 au logiciel, aux services ou au contenu (y compris le code) figurant sur des sites Internet tiers ou dans des programmes tiers ; et\\par",
  "\\pard\\fi-363\\li720\\sb120\\sa120\\tx720\\'b7\\tab les r\\'e9clamations au titre de violation de contrat ou de garantie, ou au titre de responsabilit\\'e9 stricte, de n\\'e9gligence ou d'une autre faute dans la limite autoris\\'e9e par la loi en vigueur.\\par",
  "\\pard\\sb120\\sa120 Elle s'applique \\'e9galement, m\\'eame si Sysinternals connaissait ou devrait conna\\'eetre l'\\'e9ventualit\\'e9 d'un tel dommage.  Si votre pays n'autorise pas l'exclusion ou la limitation de responsabilit\\'e9 pour les dommages indirects, accessoires ou de quelque nature que ce soit, il se peut que la limitation ou l'exclusion ci-dessus ne s'appliquera pas \\'e0 votre \\'e9gard.\\par",
  "\\b EFFET JURIDIQUE.\\b0   Le pr\\'e9sent contrat d\\'e9crit certains droits juridiques. Vous pourriez avoir d'autres droits pr\\'e9vus par les lois de votre pays.  Le pr\\'e9sent contrat ne modifie pas les droits que vous conf\\'e8rent les lois de votre pays si celles-ci ne le permettent pas.\\b\\par",
  "\\pard\\b0\\fs20\\lang1033\\par",
  "\\pard\\sa200\\sl276\\slmult1\\f1\\fs22\\lang9\\par",
  "}"
}; // weak
wchar_t *off_10BC58C = L"SYSINTERNALS SOFTWARE LICENSE TERMS\nThese license terms are an agreement between Sysinternals(a wholly owned subsidiary of Microsoft Corporation) and you.Please read them.They apply to the software you are downloading from technet.microsoft.com / sysinternals, which includes the media on which you received it, if any.The terms also apply to any Sysinternals\n* updates,\n*supplements,\n*Internet - based services,\n*and support services\nfor this software, unless other terms accompany those items.If so, those terms apply.\nBY USING THE SOFTWARE, YOU ACCEPT THESE TERMS.IF YOU DO NOT ACCEPT THEM, DO NOT USE THE SOFTWARE.\n\nIf you comply with these license terms, you have the rights below.\nINSTALLATION AND USER RIGHTS\nYou may install and use any number of copies of the software on your devices.\n\nSCOPE OF LICENSE\nThe software is licensed, not sold.This agreement only gives you some rights to use the software.Sysinternals reserves all other rights.Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement.In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways.You may not\n* work around any technical limitations in the software;\n*reverse engineer, decompile or disassemble the software, except and only to the extent that applicable law expressly permits, despite this limitation;\n*make more copies of the software than specified in this agreement or allowed by applicable law, despite this limitation;\n*publish the software for others to copy;\n*rent, lease or lend the software;\n*transfer the software or this agreement to any third party; or\n* use the software for commercial software hosting services.\n\nSENSITIVE INFORMATION\nPlease be aware that, similar to other debug tools that capture "; // idb
tagMSGHANDLER CAboutDlg::gMsgHandler = { 2u, &dword_10BC590, 0 }; // idb
struct tagMSGHANDLER CAboutDlg::gCmdHandler = { 2u, &dword_10BC5AC, 0 }; // weak
int dword_10BC5C8 = 131072; // weak
void *off_10BCB88 = &dword_10BC628; // weak
int dword_10BCB8C[] = { 11 }; // weak
wchar_t *off_10BCB90 = L"File"; // weak
GENERIC_MAPPING GenericMapping = { 1179785u, 1179926u, 1179808u, 2032127u }; // idb
GENERIC_MAPPING stru_10BCC38 = { 136208u, 132075u, 1179648u, 2035711u }; // idb
GENERIC_MAPPING stru_10BCC48 = { 133960u, 132274u, 1179648u, 2032639u }; // idb
GENERIC_MAPPING stru_10BCC58 = { 131213u, 131074u, 131440u, 983551u }; // idb
GUID *off_10BCC68 = &stru_10A7BAC; // weak
GUID *off_10BCCD8 = &stru_10A7BAC; // weak
GUID *off_10BCE08 = &stru_10A7BAC; // weak
GUID *off_10BCF18 = &stru_10A7BAC; // weak
GUID *off_10BD008 = &stru_10A7BAC; // weak
GUID *off_10BD098 = &stru_10A7BAC; // weak
GUID *off_10BD0E8 = &stru_10A7BAC; // weak
_UNKNOWN unk_10BD0F8; // weak
_UNKNOWN unk_10BD110; // weak
int dword_10BD130 = 1; // weak
_UNKNOWN unk_10BD150; // weak
_UNKNOWN unk_10BD178; // weak
tagCOLUMNKEYITEM gProcessColumns[] = ;
__int16 word_10BD1F2[] = { 40 }; // idb
tagCOLUMNKEYITEM gHandleColumns[] = { { 21u, 100u }, { 22u, 450u } };
tagCOLUMNKEYITEM gDllColumns[] = { { 26u, 110u }, { 42u, 180u }, { 1033u, 140u }, { 1111u, 300u } };
WPARAM wParam = 1u; // idb
char byte_10BD224 = '\x01'; // weak
char byte_10BD225 = '\x01'; // weak
CHAR *gszProtocolNames[] = { "TCP" };
wchar_t *gszNetStatus[13] =
{
  L"???",
  L"CLOSED",
  L"LISTENING",
  L"SYN_SENT",
  L"SYN_RCVD",
  L"ESTABLISHED",
  L"FIN_WAIT1",
  L"FIN_WAIT2",
  L"CLOSE_WAIT",
  L"CLOSING",
  L"LAST_ACK",
  L"TIME_WAIT",
  L"DELETE_TCB"
}; // weak
wchar_t aPsprotectedsig[448] =
{
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  78u,
  111u,
  110u,
  101u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  65u,
  117u,
  116u,
  104u,
  101u,
  110u,
  116u,
  105u,
  99u,
  111u,
  100u,
  101u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  67u,
  111u,
  100u,
  101u,
  71u,
  101u,
  110u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  65u,
  110u,
  116u,
  105u,
  109u,
  97u,
  108u,
  119u,
  97u,
  114u,
  101u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  76u,
  115u,
  97u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  87u,
  105u,
  110u,
  100u,
  111u,
  119u,
  115u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  80u,
  115u,
  80u,
  114u,
  111u,
  116u,
  101u,
  99u,
  116u,
  101u,
  100u,
  83u,
  105u,
  103u,
  110u,
  101u,
  114u,
  87u,
  105u,
  110u,
  84u,
  99u,
  98u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u
}; // idb
int dword_10BD5F0[] = { 3 }; // weak
int dword_10BD798[] = { 1094 }; // weak
int dword_10BD7DC[] = { 20 }; // weak
int dword_10BD7F8[] = { 23 }; // weak
tagConfigItem gConfigItems[64] =
{
  { L"Windowplacement", KT_Structure, 44u, &gConfig, {  0.0 } },
  { L"FindWindowplacement", KT_Structure, 44u, (PVOID)0x10C53E4, {  0.0 } },
  { L"SysinfoWindowplacement", KT_Structure, 44u, (PVOID)0x10C5468, {  0.0 } },
  { L"PropWindowplacement", KT_Structure, 44u, (PVOID)0x10C5410, {  0.0 } },
  { L"DllPropWindowplacement", KT_Structure, 44u, (PVOID)0x10C543C, {  0.0 } },
  { L"UnicodeFont", KT_Structure, 92u, (PVOID)0x10C54C0, {  0.0 } },
  { L"Divider", KT_Double, 0u, (PVOID)0x10C5520, {  0.5 } },
  { L"SavedDivider", KT_Double, 0u, (PVOID)0x10C5528, {  0.5 } },
  { L"ProcessColumns", KT_ShortArray, 192u, (PVOID)0x10C5748, {  0.0 } },
  { L"ProcessImageColumnWidth", KT_Short, 2u, (PVOID)0x10C5740, {  200.0 } },
  { L"HandleColumns", KT_ShortArray, 64u, (PVOID)0x10C5998, {  0.0 } },
  { L"DllColumns", KT_ShortArray, 64u, (PVOID)0x10C5A64, {  0.0 } },
  { L"ShowUnnamedHandles", KT_Bool, 0u, (PVOID)0x10C96CA, {  0.0 } },
  { L"ShowDllView", KT_Bool, 0u, (PVOID)0x10C96CC, {  0.0 } },
  { L"HandleSortColumn", KT_None, 0u, (PVOID)0x10C5B24, {  0.0 } },
  { L"HandleSortDirection", KT_Bool, 0u, (PVOID)0x10C5B28, {  1.0 } },
  { L"DllSortColumn", KT_None, 0u, (PVOID)0x10C5A58, {  0.0 } },
  { L"DllSortDirection", KT_Bool, 0u, (PVOID)0x10C5A5C, {  1.0 } },
  { L"ProcessSortColumn", KT_None, 0u, (PVOID)0x10C5988, {  4.294967295e9 } },
  { L"ProcessSortDirection", KT_Bool, 0u, (PVOID)0x10C598C, {  1.0 } },
  { L"HighlightServices", KT_Bool, 0u, (PVOID)0x10C96B9, {  1.0 } },
  { L"HighlightOwnProcesses", KT_Bool, 0u, (PVOID)0x10C96BA, {  1.0 } },
  { L"HighlightRelocatedDlls", KT_Bool, 0u, (PVOID)0x10C96CE, {  0.0 } },
  { L"HighlightJobs", KT_Bool, 0u, (PVOID)0x10C96B8, {  0.0 } },
  { L"HighlightNewProc", KT_Bool, 0u, (PVOID)0x10C96BC, {  1.0 } },
  { L"HighlightDelProc", KT_Bool, 0u, (PVOID)0x10C96BD, {  1.0 } },
  { L"HighlightImmersive", KT_Bool, 0u, (PVOID)0x10C96BF, {  1.0 } },
  { L"HighlightProtected", KT_Bool, 0u, (PVOID)0x10C96C1, {  0.0 } },
  { L"HighlightPacked", KT_Bool, 0u, (PVOID)0x10C96BE, {  1.0 } },
  { L"HighlightNetProcess", KT_Bool, 0u, (PVOID)0x10C96BB, {  0.0 } },
  { L"HighlightSuspend", KT_Bool, 0u, (PVOID)0x10C96C0, {  1.0 } },
  { L"HighlightDuration", KT_None, 0u, (PVOID)0x10C5534, {  1000.0 } },
  { L"ShowCpuFractions", KT_Bool, 0u, (PVOID)0x10C96C9, {  1.0 } },
  { L"ShowLowerpane", KT_Bool, 0u, (PVOID)0x10C96CD, {  0.0 } },
  { L"ShowAllUsers", KT_Bool, 0u, (PVOID)0x10C96D0, {  1.0 } },
  { L"ShowProcessTree", KT_Bool, 0u, (PVOID)0x10C5742, {  1.0 } },
  { L"SymbolWarningShown", KT_Bool, 0u, (PVOID)0x10C98FC, {  0.0 } },
  { L"HideWhenMinimized", KT_Bool, 0u, (PVOID)0x10C96D1, {  0.0 } },
  { L"AlwaysOntop", KT_Bool, 0u, (PVOID)0x10C96D2, {  0.0 } },
  { L"OneInstance", KT_Bool, 0u, (PVOID)0x10C96D3, {  0.0 } },
  { L"NumColumnSets", KT_None, 0u, (PVOID)0x10C5B2C, {  0.0 } },
  { L"ConfirmKill", KT_Bool, 0u, (PVOID)0x10C96D4, {  1.0 } },
  { L"RefreshRate", KT_None, 0u, (PVOID)0x10C5530, {  1000.0 } },
  { L"PrcessColumnCount", KT_None, 0u, (PVOID)0x10C5744, {  6.0 } },
  { L"ProcessColumnMap", KT_LongArray, 384u, (PVOID)0x10C5808, {  0.0 } },
  { L"DllColumnCount", KT_None, 0u, (PVOID)0x10C5A60, {  4.0 } },
  { L"DllColumnMap", KT_LongArray, 128u, (PVOID)0x10C59D8, {  0.0 } },
  { L"HandleColumnCount", KT_None, 0u, (PVOID)0x10C5994, {  2.0 } },
  { L"HandleColumnMap", KT_LongArray, 128u, (PVOID)0x10C5AA4, {  0.0 } },
  { L"DefaultProcPropPage", KT_None, 0u, (PVOID)0x10C96E8, {  0.0 } },
  { L"DefaultSysInfoPage", KT_None, 0u, (PVOID)0x10C96F0, {  0.0 } },
  { L"DefaultDllPropPage", KT_None, 0u, (PVOID)0x10C96EC, {  0.0 } },
  { L"DbgHelpPath", KT_String, 520u, (PVOID)0x10C96F4, {  0.0 } },
  { L"SymbolPath", KT_String, 520u, (PVOID)0x10C98FE, {  0.0 } },
  { L"ColorPacked", KT_None, 0u, (PVOID)0x10C9B24, {  1.6711808e7 } },
  { L"ColorImmersive", KT_None, 0u, (PVOID)0x10C9B2C, {  1.5395328e7 } },
  { L"ColorOwn", KT_None, 0u, (PVOID)0x10C9B08, {  1.6765136e7 } },
  { L"ColorServices", KT_None, 0u, (PVOID)0x10C9B0C, {  1.3684991e7 } },
  { L"ColorRelocatedDlls", KT_None, 0u, (PVOID)0x10C9B10, {  1.0551295e7 } },
  { L"ColorGraphBk", KT_None, 0u, (PVOID)0x10C9B28, {  0.0 } },
  { NULL, KT_None, 0u, NULL, {  0.0 } },
  { NULL, KT_None, 0u, NULL, {  0.0 } },
  { NULL, KT_None, 0u, NULL, {  0.0 } },
  { NULL, KT_None, 0u, NULL, {  0.0 } }
};
tagConfigItem stru_10BDDD8 = { L"ColorGraphBk", KT_None, 0u, (PVOID)0x10C9B28, {  0.0 } }; // weak
tagConfigItem stru_10BDDF0 = { NULL, KT_None, 0u, NULL, {  0.0 } }; // weak
void *off_10BDE08 = NULL; // weak
int dword_10BDE0C = 0; // weak
int dword_10BDE10 = 0; // weak
int dword_10BDE14 = 0; // weak
double dbl_10BDE18 =  0.0; // weak
void *off_10BDE20 = NULL; // weak
int dword_10BDE24 = 0; // weak
int dword_10BDE28 = 0; // weak
int dword_10BDE2C = 0; // weak
double dbl_10BDE30 =  0.0; // weak
void *off_10BDE38 = NULL; // weak
int dword_10BDE3C = 0; // weak
int dword_10BDE40 = 0; // weak
int dword_10BDE44 = 0; // weak
__int64 qword_10BDE48 = 0i64; // weak
int dword_10BDE50 = 0; // weak
int dword_10BDE54 = 0; // weak
int dword_10BDE58 = 0; // weak
int dword_10BDE5C = 0; // weak
__int64 qword_10BDE60 = 0i64; // weak
int dword_10BDE68 = 0; // weak
int dword_10BDE6C = 0; // weak
int dword_10BDE70 = 0; // weak
int dword_10BDE74 = 0; // weak
__int64 qword_10BDE78 = 0i64; // weak
int dword_10BDE80 = 0; // weak
int dword_10BDE84 = 0; // weak
int dword_10BDE88 = 0; // weak
int dword_10BDE8C = 0; // weak
__int64 qword_10BDE90 = 0i64; // weak
int dword_10BDE98 = 0; // weak
int dword_10BDE9C = 0; // weak
int dword_10BDEA0 = 0; // weak
int dword_10BDEA4 = 0; // weak
__int64 qword_10BDEA8 = 0i64; // weak
int dword_10BDEB0 = 0; // weak
int dword_10BDEB4 = 0; // weak
int dword_10BDEB8 = 0; // weak
int dword_10BDEBC = 0; // weak
__int64 qword_10BDEC0 = 0i64; // weak
int dword_10BDEC8 = 0; // weak
int dword_10BDECC = 0; // weak
int dword_10BDED0 = 0; // weak
int dword_10BDED4 = 0; // weak
__int64 qword_10BDED8 = 0i64; // weak
int dword_10BDEE0 = 0; // weak
int dword_10BDEE4 = 0; // weak
int dword_10BDEE8 = 0; // weak
int dword_10BDEEC = 0; // weak
__int64 qword_10BDEF0 = 0i64; // weak
int dword_10BDEF8 = 0; // weak
int dword_10BDEFC = 0; // weak
int dword_10BDF00 = 0; // weak
int dword_10BDF04 = 0; // weak
__int64 qword_10BDF08 = 0i64; // weak
int dword_10BDF10 = 0; // weak
int dword_10BDF14 = 0; // weak
int dword_10BDF18 = 0; // weak
int dword_10BDF1C = 0; // weak
__int64 qword_10BDF20 = 0i64; // weak
int dword_10BDF28 = 0; // weak
int dword_10BDF2C = 0; // weak
int dword_10BDF30 = 0; // weak
int dword_10BDF34 = 0; // weak
__int64 qword_10BDF38 = 0i64; // weak
int dword_10BDF40 = 0; // weak
int dword_10BDF44 = 0; // weak
int dword_10BDF48 = 0; // weak
int dword_10BDF4C = 0; // weak
__int64 qword_10BDF50 = 0i64; // weak
int dword_10BDF58 = 0; // weak
int dword_10BDF5C = 0; // weak
int dword_10BDF60 = 0; // weak
int dword_10BDF64 = 0; // weak
__int64 qword_10BDF68 = 0i64; // weak
int dword_10BDF70 = 0; // weak
int dword_10BDF74 = 0; // weak
int dword_10BDF78 = 0; // weak
int dword_10BDF7C = 0; // weak
__int64 qword_10BDF80 = 0i64; // weak
int dword_10BDF88 = 0; // weak
int dword_10BDF8C = 0; // weak
int dword_10BDF90 = 0; // weak
int dword_10BDF94 = 0; // weak
__int64 qword_10BDF98 = 0i64; // weak
int dword_10BDFA0 = 0; // weak
int dword_10BDFA4 = 0; // weak
int dword_10BDFA8 = 0; // weak
int dword_10BDFAC = 0; // weak
__int64 qword_10BDFB0 = 0i64; // weak
int dword_10BDFB8 = 0; // weak
int dword_10BDFBC = 0; // weak
int dword_10BDFC0 = 0; // weak
int dword_10BDFC4 = 0; // weak
__int64 qword_10BDFC8 = 0i64; // weak
int dword_10BDFD0 = 0; // weak
int dword_10BDFD4 = 0; // weak
int dword_10BDFD8 = 0; // weak
int dword_10BDFDC = 0; // weak
__int64 qword_10BDFE0 = 0i64; // weak
int dword_10BDFE8 = 0; // weak
int dword_10BDFEC = 0; // weak
int dword_10BDFF0 = 0; // weak
int dword_10BDFF4 = 0; // weak
__int64 qword_10BDFF8 = 0i64; // weak
int dword_10BE000 = 0; // weak
int dword_10BE004 = 0; // weak
int dword_10BE008 = 0; // weak
int dword_10BE00C = 0; // weak
__int64 qword_10BE010 = 0i64; // weak
int dword_10BE018 = 0; // weak
int dword_10BE01C = 0; // weak
int dword_10BE020 = 0; // weak
int dword_10BE024 = 0; // weak
__int64 qword_10BE028 = 0i64; // weak
int dword_10BE030 = 0; // weak
int dword_10BE034 = 0; // weak
int dword_10BE038 = 0; // weak
int dword_10BE03C = 0; // weak
__int64 qword_10BE040 = 0i64; // weak
int dword_10BE048 = 0; // weak
int dword_10BE04C = 0; // weak
int dword_10BE050 = 0; // weak
int dword_10BE054 = 0; // weak
__int64 qword_10BE058 = 0i64; // weak
int dword_10BE060 = 0; // weak
int dword_10BE064 = 0; // weak
int dword_10BE068 = 0; // weak
int dword_10BE06C = 0; // weak
__int64 qword_10BE070 = 0i64; // weak
int dword_10BE078 = 0; // weak
int dword_10BE07C = 0; // weak
int dword_10BE080 = 0; // weak
int dword_10BE084 = 0; // weak
__int64 qword_10BE088 = 0i64; // weak
int dword_10BE090 = 0; // weak
int dword_10BE094 = 0; // weak
int dword_10BE098 = 0; // weak
int dword_10BE09C = 0; // weak
__int64 qword_10BE0A0 = 0i64; // weak
wchar_t *off_10BE0BC[5] =
{
  L"SeShutdownPrivilege",
  L"SeChangeNotifyPrivilege",
  L"SeUndockPrivilege",
  L"SeIncreaseWorkingSetPrivilege",
  L"SeTimeZonePrivilege"
}; // weak
int dword_10BE0D0 = 32; // weak
int dword_10BE0D8 = 4294967295; // weak
int dword_10BE0DC = 1; // weak
wchar_t gszLocaleInfo = 46u; // idb
int gdwProcessId_0 = 4294967295; // weak
char byte_10BE104 = '\x01'; // weak
int gdwMenuItemPosLast = 14; // idb
int gdwRefreshMenuIDLast = 4294967295; // weak
tagMSGHANDLER CMainWnd::gMsgHandler = { 34u, &dword_10BE3B0, 1 }; // idb
struct tagMSGHANDLER CMainWnd::gCmdHandler = { 126u, &dword_10BE4C0, 1 }; // weak
int gdwMenuItemCountAppendedInRuntime = 5; // idb
wchar_t aActive[7] = L"Active"; // weak
char byte_10BE8B0 = '\x01'; // weak
wchar_t aExecutive[10] = L"Executive"; // weak
wchar_t aObject_0[7] = L"Object"; // weak
wchar_t aSpecialAccess[18] = L"Special Access..."; // weak
struct _ACLHELPCONTROL HelpInfo = { L"procexp.hlp", 1u, 1u, 2u, 2147483648u, 0u, 17442496u, 2u }; // idb
int dword_10BFED0 = 2; // weak
_ACLEDITENTRY stru_10BFFB0[22] =
{
  { 2u, 2147483648u, 0u, L"&Read (R)" },
  { 2u, 1073741824u, 0u, L"&Write (W)" },
  { 2u, 536870912u, 0u, L"E&xecute (X)" },
  { 2u, 16777216u, 0u, L"&View/Change Audits (A)" },
  { 2u, 65536u, 0u, L"&Delete (D)" },
  { 2u, 262144u, 0u, L"Change &Permissions (P)" },
  { 2u, 524288u, 0u, L"Take &Ownership (O)" },
  { 2u, 1u, 0u, L"&List (L)" },
  { 2u, 2u, 0u, L"Add &Entry (N)" },
  { 2u, 131072u, 0u, L"Read &Control (T)" },
  { 3u, 0u, 0u, L"No Access" },
  { 3u, 131073u, 4294967295u, L"List" },
  { 3u, 2684354560u, 2684354560u, L"Read" },
  { 3u, 1610612736u, 4294967295u, L"Add" },
  { 3u, 3758096384u, 2684354560u, L"Add Read" },
  { 3u, 3758161920u, 3758161920u, L"Change" },
  { 3u, 268435456u, 268435456u, L"Full Control" },
  { 4u, 2147483648u, 0u, L"Read" },
  { 4u, 1073741824u, 0u, L"Write" },
  { 4u, 65536u, 0u, L"Delete (D)" },
  { 4u, 262144u, 0u, L"Change Permissions (P)" },
  { 4u, 524288u, 0u, L"Take Ownership (O)" }
}; // weak
_ACLEDITENTRY stru_10C0110[11] =
{
  { 2u, 65536u, 0u, L"&Delete (D)" },
  { 2u, 262144u, 0u, L"Change &Permissions (P)" },
  { 2u, 524288u, 0u, L"Take &Ownership (O)" },
  { 2u, 16777216u, 0u, L"&View/Change Audits (A)" },
  { 2u, 131072u, 0u, L"&Read (R)" },
  { 2u, 2u, 0u, L"&Write (W)" },
  { 1u, 0u, 0u, L"No Access" },
  { 1u, 2147483648u, 0u, L"Read" },
  { 1u, 1073741824u, 0u, L"Write" },
  { 1u, 3758161920u, 0u, L"Change" },
  { 1u, 268435456u, 0u, L"Full Control" }
}; // weak
_ACLEDITENTRY stru_10C01C0[12] =
{
  { 2u, 1u, 0u, L"&Query Value" },
  { 2u, 2u, 0u, L"&Set Value" },
  { 2u, 4u, 0u, L"&Create Subkeys" },
  { 2u, 8u, 0u, L"&Enumerate Subkeys" },
  { 2u, 16u, 0u, L"No&tify" },
  { 2u, 32u, 0u, L"Create &Link" },
  { 2u, 65536u, 0u, L"&Delete" },
  { 2u, 262144u, 0u, L"&Write DAC" },
  { 2u, 524288u, 0u, L"Write &Owner" },
  { 2u, 131072u, 0u, L"&Read Control" },
  { 1u, 8217u, 0u, L"Read" },
  { 1u, 268435456u, 0u, L"Full Control" }
}; // weak
_ACLEDITENTRY aclEditEntryFile[7] =
{
  { 5u, 131072u, 0u, L"&Read (R)" },
  { 5u, 1048576u, 0u, L"&Sychronize (S)" },
  { 5u, 65536u, 0u, L"&Delete (D)" },
  { 5u, 262144u, 0u, L"Change &Permissions (P)" },
  { 5u, 524288u, 0u, L"Change &Owner (O)" },
  { 5u, 1u, 0u, L"&Query State (Q)" },
  { 5u, 2u, 0u, L"&Modify State (M)" }
}; // weak
int AccessMasks[4] = { 1179785, 1179926, 1179808, 2032127 }; // weak
int RegistryAccessMasks[4] = { 1179673, 131078, 131097, 983103 }; // weak
HANDLE ghDriverHandle = (HANDLE)0xFFFFFFFF; // idb
HANDLE hSnapshot = (HANDLE)0xFFFFFFFF; // idb
DWORD gdwProcessIdSelected = 4294967294u; // idb
RegItem stru_10C0320[4] =
{
  {
    5374044,
    {
      69,
      0,
      71,
      0,
      73,
      0,
      83,
      0,
      84,
      0,
      82,
      0,
      89,
      0,
      92,
      0,
      85,
      0,
      83,
      0,
      69,
      0,
      82,
      0,
      92,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      72,
      0,
      75,
      0,
      67,
      0,
      85,
      0
    },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    0,
    0,
    0
  },
  {
    4915272,
    {
      85,
      0,
      92,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      72,
      0,
      75,
      0,
      67,
      0,
      85,
      0
    },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    0,
    0,
    0
  },
  {
    5374044,
    {
      69,
      0,
      71,
      0,
      73,
      0,
      83,
      0,
      84,
      0,
      82,
      0,
      89,
      0,
      92,
      0,
      85,
      0,
      83,
      0,
      69,
      0,
      82,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      72,
      0,
      75,
      0,
      85,
      0,
      0,
      0
    },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    0,
    0,
    0
  },
  {
    5374044,
    {
      69,
      0,
      71,
      0,
      73,
      0,
      83,
      0,
      84,
      0,
      82,
      0,
      89,
      0,
      92,
      0,
      77,
      0,
      65,
      0,
      67,
      0,
      72,
      0,
      73,
      0,
      78,
      0,
      69,
      0,
      92,
      0,
      83,
      0,
      89,
      0,
      83,
      0,
      84,
      0,
      69,
      0,
      77,
      0,
      92,
      0,
      67,
      0,
      85,
      0,
      82,
      0,
      82,
      0,
      69,
      0,
      78,
      0,
      84,
      0,
      67,
      0,
      79,
      0,
      78,
      0,
      84,
      0,
      82,
      0,
      79,
      0,
      76,
      0,
      83,
      0,
      69,
      0,
      84,
      0,
      92,
      0,
      72,
      0,
      65,
      0,
      82,
      0,
      68,
      0,
      87,
      0,
      65,
      0,
      82,
      0,
      69,
      0,
      32,
      0,
      80,
      0,
      82,
      0,
      79,
      0,
      70,
      0,
      73,
      0,
      76,
      0,
      69,
      0,
      83,
      0,
      92,
      0,
      67,
      0,
      85,
      0,
      82,
      0,
      82,
      0,
      69,
      0,
      78,
      0,
      84,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      72,
      0,
      75,
      0,
      67,
      0,
      67,
      0
    },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    { 0, 0, 0, 0 },
    0,
    0,
    0
  }
}; // weak
int gdwValue_4F10B8[3] = { 4294967294, 4294967294, 4294967295 }; // weak
size_t gdwSystemHandleInfoLength = 65536u; // idb
int sdwValueInInitTreeList = 1; // weak
PSECURITY_DESCRIPTOR pSID = &dword_10CB208; // idb
PSECURITY_DESCRIPTOR ObjectSecurity = &dword_10CD208; // idb
int sdwProcessIdInsub_103C4F0 = 4294967295; // weak
char byte_10C10D8 = '\x01'; // weak
int sdwSystemLogicalProcessorInfoCount = 1; // weak
int gdwFindReplaceFlags = 1; // weak
WPARAM gnColumnSortedInFindDlg = 1u; // idb
int dword_10C10E8 = 4294967295; // weak
int dword_10C10EC = 4294967295; // weak
int dword_10C10F0 = 4294967295; // weak
int dword_10C10F4 = 4294967295; // weak
int dword_10C10F8 = 4294967295; // weak
int dword_10C10FC = 4294967295; // weak
int dword_10C1100 = 4294967295; // weak
int dword_10C1104 = 4294967295; // weak
__int64 qword_10C1108 = -4616189618054758400i64; // weak
__int64 qword_10C1110 = -4616189618054758400i64; // weak
__int64 qword_10C1118 = -4616189618054758400i64; // weak
__int64 qword_10C1120 = -4616189618054758400i64; // weak
__int64 qword_10C1128 = -4616189618054758400i64; // weak
__int64 qword_10C1130 = -4616189618054758400i64; // weak
wchar_t aYouMustAgreeTo_2[298] = L"You must agree to VirusTotal's terms of service to use VirusTotal features.\n\nWhen you do, Process Explorer will submit hashes for files listed in the process and DLL view to VirusTotal.com. You can submit a file's contents by using the Submit button on the process and DLL properties dialog boxes."; // weak
int (__cdecl *ATL::_com_error::_com_error)(_DWORD, _DWORD) = &sub_1064240; // weak
VARIANTARG pvarg = { { { 10u, 0u, 0u, 0u, { ?flt } } } }; // idb
_UNKNOWN unk_10C13A0; // weak
int __security_cookie = 3141592654; // weak
void *off_10C1568 = &unk_10E6A60; // weak
DWORD dwTlsIndex = 4294967295u; // idb
HANDLE hObject = (HANDLE)0xFFFFFFFE; // idb
int dword_10C2430 = 28800; // weak
int dword_10C2434 = 1; // weak
int dword_10C2438 = 4294963696; // weak
void *off_10C24C0 = &unk_10C2440; // weak
int dword_10C2568 = 1024; // weak
int dword_10C256C = 4294966273; // weak
int dword_10C2570 = 53; // weak
int dword_10C2574 = 11; // weak
int dword_10C2578 = 64; // weak
int dword_10C257C = 1023; // weak
int dword_10C2580 = 128; // weak
int dword_10C2584 = 4294967169; // weak
int dword_10C2588 = 24; // weak
int dword_10C258C = 8; // weak
int dword_10C2590 = 32; // weak
int dword_10C2594 = 127; // weak
HANDLE hConsoleOutput = (HANDLE)0xFFFFFFFE; // idb
int gdwFlagsInLoadServiceRegistry = 0; // weak
tagAccountInfo *gpAccountInfo = NULL;
char byte_10C31C9 = '\0'; // weak
char gbRestorePrivilegeFailed = '\0'; // weak
DWORD gdwTlsIndex = 0u; // idb
int dword_10C31D8 = 0; // weak
int (__stdcall *NtDeleteKey)(HANDLE KeyHandle) = NULL;
int (__stdcall *NtOpenKey)(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes) = NULL;
int (__stdcall *RtlNtStatusToDosError)(LONG Status) = NULL;
int (__stdcall *NtCreateKey)(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition) = NULL;
BOOLEAN (__stdcall *Wow64EnableWow64FsRedirection)(BOOLEAN) = NULL;
SystemDirInfo gSystemDirInfo = { { 0, 0, 0, 0,  } };
BOOL (__stdcall *Wow64DisableWow64FsRedirection)(PVOID *OldValue);
int (__stdcall *Wow64RevertWow64FsRedirection)(PVOID OldValue);
int dword_10C3628[140]; // weak
int dword_10C3858; // weak
char gbFlagsInPE_GetLongPathName; // weak
HANDLE ghAppToken; // idb
WCHAR gszWindowsDirectory[260];
WCHAR gszProgramW6432EnvValue[260];
WCHAR gszProgameFilesX86EnvValueValue[260];
int dword_10C48D4; // weak
int sdwFlagsInLoadServiceRegistry; // weak
LPCWSTR gpszSystemPathInfo; // idb
void *dword_4F48E4; // idb
int ghWaitCursor; // weak
int ghHandCursor; // weak
void *dword_4F48F0; // idb
void *dword_10C48F4; // idb
void *dword_10C48F8; // idb
void *dword_4F48FC; // idb
__int16 word_10C4900[400]; // weak
std__vector garrAccountInfo;
void *gpszTipText; // idb
std__tree gKeyNameMap; // idb
int (__stdcall *GetLongPathNameW_0)(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
int dword_10C4C40; // weak
const WCHAR sStringInsub_1133FF0; // idb
int dword_10C4C48; // weak
int (__stdcall *RegLoadMUIStringW)(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory);
CPEString gszPrintDirectoryForNTX86; // idb
void *gszPrintDirectoryForX86; // idb
char gbPrintDirectoryInited; // weak
int (__stdcall *QueryServiceConfig2W_0)(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
int (__stdcall *IsWow64Process)(_DWORD, _DWORD); // weak
int dword_10C4C68; // weak
int (__stdcall *GetSystemDefaultLocaleName)(_DWORD, _DWORD); // weak
int (__stdcall *GetUserDefaultLocaleName)(_DWORD, _DWORD); // weak
int (__stdcall *SHCreateItemFromParsingName)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int dword_10C4C78; // weak
struct _RTL_CRITICAL_SECTION CriticalSection; // idb
struct _RTL_CRITICAL_SECTION stru_10C4C98; // idb
HANDLE dword_10C4CB8; // idb
HANDLE hEvent; // idb
char byte_10C4CCC; // weak
char byte_10C4CCD; // weak
int dword_10C4CD0; // weak
std__List gList5; // weak
std__List gList6; // weak
void *gMap5; // idb
void *gList2; // idb
void *gList1; // idb
void *gList3; // idb
tagStreamThreadInfo *gpStreamThreadInfo;
void *gMap6; // idb
struct CommandLineEventConsumer gCommandLineEventConsumer; // weak
struct ActiveScriptEventConsumer gActiveScriptEventConsumer; // weak
int dword_10C4D34; // weak
char byte_10C4D7C; // weak
HMODULE ghUxthemeModule; // idb
int (__stdcall *gpfnIsThemeActive)(); // weak
int (__stdcall *gpfnOpenThemeData)(_DWORD, _DWORD); // idb
int (__stdcall *gpfnDrawThemeBackground)(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pRect, LPCRECT pClipRect);
int (__stdcall *gpfnCloseThemeData)(_DWORD); // idb
tagLogPixelSize gLogPixelSize;
__int16 gAtomTreeList; // weak
__int16 gAtomTreeListProperty; // weak
HGDIOBJ ghDarkShadowPen; // idb
int dword_10C4DA8; // weak
HGDIOBJ ghBlackPen; // idb
char byte_10C4DB0; // weak
int dword_10C4DB4; // weak
HWND ghWndAddressInAbout; // idb
int gbIndirectFontCreated; // weak
int ghDefaultGuiFont; // weak
HGDIOBJ ghIndirectFontCreated; // idb
HCURSOR ghHandArrow; // idb
HCURSOR ghCursorArrow; // idb
int dword_10C4DD0; // weak
struct _RTL_CRITICAL_SECTION gBstrListLock; // idb
int *gBstrList;
char byte_10C4DF4; // weak
CWin32Heap strHeap;
int ATL::CAtlStringMgr::sbInited; // weak
CAtlStringMgr strMgr;
int (__cdecl *EnableTraceEx)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // idb
int gdwVirtualScreenWidth; // weak
DWORD (__stdcall *gpfnRtlNtStatusToDosError)(LONG Status);
int (__stdcall *D3DKMTOpenAdapterFromDeviceName)(D3DKMT_OPENADAPTERFROMDEVICENAME *);
int D3DKMTCloseAdapter; // weak
int (__stdcall *D3DKMTQueryStatistics)(_D3DKMT_QUERYSTATISTICS *);
int gdwAdapterRuntingTime; // idb
std__List gAdapterLuidList;
HINSTANCE ghInstance; // idb
int gdwVersion; // weak
WCHAR gszMainClassName; // idb
WCHAR gszMainWindowName; // idb
EVENT_TRACE_PROPERTIES_EXT gProperties;
char gbFlagsInProcPropSheet; // weak
tagTREEVIEWLISTITEMPARAM *gpTreeViewListItemParam;
LPARAM dword_10C539C; // idb
DLLLISTITEMPARAM *gpDllListItemParamHeader;
HFONT ghConfigFont;
HGDIOBJ ghConfigUnderlineFont; // idb
HGDIOBJ ghDefaultUnderlineFontHandle; // idb
WNDPROC gOldListWndProc; // idb
char byte_10C53B4; // weak
char byte_10C53B5; // weak
CRegSettings gConfig;
WPARAM dword_10C9B98; // idb
WPARAM nItem; // idb
HMENU ghSelectColumnPopupMenuHandle; // idb
wchar_t gpszProtocolName[260];
_bstr_t stru_10C9E50; // idb
int dword_10C9E54; // weak
_bstr_t a2; // idb
int dword_10C9E5C; // weak
int dword_10C9E60; // weak
int dword_10C9E64; // weak
int dword_10C9E68; // weak
int dword_10C9E6C; // weak
char sbEditFlags; // weak
tagUserInfoWithSID *gpUserInfoWithSIDList;
tagItem124_InTcpUdp *gpItem124_InTcpUdp;
tagItem124_InTcpUdp *dword_10C9E7C;
int dword_10C9E80; // idb
tagProcessComment *gpProcessComments;
int (__stdcall *gpfnEnableThemeDialogTexture)(_DWORD, _DWORD); // weak
int ghBlackBrush; // weak
wchar_t Dst; // idb
int dword_10CA090; // weak
char byte_10CA094; // weak
char byte_10CA095; // weak
char gNetClrMemoryPerfInfoLoaded; // weak
char byte_10CA099; // weak
char byte_10CA09A; // weak
struct _FILETIME gLoadNetClrMemoryPerfInfoTime; // idb
struct _FILETIME gLoadNetClrMemoryPerfInfoTimeLast; // weak
PerformanceInfoInMemory gPerformanceInfo;
PerformanceInfoInMemory gPerformanceInfoInMemory;
int dword_10CA0CC; // idb
PE_TIME gTime; // idb
IWbemServices *gWbemServiceList;
_bstr_t gNullString; // idb
CSystemProcessInfoMap gThreadProcessMap; // idb
char byte_10CA100; // weak
int (__stdcall *StartTraceW_0)(PTRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties);
int (__stdcall *ControlTraceW_0)(TRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties, ULONG ControlCode);
int (__stdcall *gpfnCreateRestrictedToken)(void *, unsigned int, unsigned int, struct _SID_AND_ATTRIBUTES *, unsigned int, struct _LUID_AND_ATTRIBUTES *, unsigned int, struct _SID_AND_ATTRIBUTES *, void **); // weak
int gdwRefreshCount; // weak
wchar_t gszMainTitle[260];
wchar_t *gpszCurAuthInfo; // idb
int gdwComdlg_FindReplaceMessageID; // weak
HWND ghMainWnd; // idb
HWND ghWndTreeListView; // idb
int dword_10CA338; // weak
HWND ghWndHandlesListCtrl; // idb
HWND ghWndDllsListCtrl; // idb
HWND ghWndStatusBar; // idb
HWND ghWndToolbar; // idb
HWND ghWndSysinfoPropSheet; // idb
HWND ghWndCPUGraph; // idb
HWND ghWndMemoryGraph; // idb
HWND ghWndPhysicalMemoryGraph; // idb
HWND ghWndGPUGraph; // idb
HWND ghWndIOGraphCtrl; // idb
HWND ghWndNetworkGraph; // idb
HWND ghWndDiskGraph; // idb
HANDLE ghRefreshEventHandle; // idb
HANDLE ghEvent2; // idb
HANDLE ghTimerRefreshEvent; // idb
HANDLE ghTimerRefreshProcPageEventHandle; // idb
HANDLE ghEvent6; // idb
unsigned int gdwTickLast; // weak
HMENU ghPriorityPopMenuHandle; // idb
char gbHide; // weak
char gbMainWndMinimized; // weak
char gbProcessIdToSessionIdValid; // weak
char gbWindowFinding; // weak
int gszCmdLine; // weak
char gbIsProcessDEPEnabled; // weak
char gbWintrustInited; // weak
char gbLaunchDepends; // weak
char gbMainWndMinimized1; // weak
WCHAR **gpHiddenProcesses;
HCURSOR ghArrowCursor; // idb
struct tagRECT gRectWindow; // idb
RECT gRectPane; // idb
int dword_10CA3BC; // weak
int dword_10CA3C0; // idb
int dword_10CA3C4; // idb
int dword_10CA3C8; // idb
struct _SYSTEM_INFO gSystemInfo; // idb
int dword_10CA3F0; // idb
int dword_10CA3F4; // idb
const WCHAR gstrApplicationName; // idb
int dword_10CA600; // idb
HINSTANCE ghWaitCursor; // idb
wchar_t gszAeDebuggerPath[260];
struct _RTL_CRITICAL_SECTION gSysInfoPropSheetLock; // idb
struct _RTL_CRITICAL_SECTION gLock2; // idb
struct _RTL_CRITICAL_SECTION gLock3; // idb
struct _RTL_CRITICAL_SECTION gPE_ImageItemVerifiedLock; // idb
HANDLE ghSystemInfoSheetThreadEvent; // idb
HANDLE ghBackupRefreshThreadHandle; // idb
HANDLE ghEvent3; // idb
HCURSOR ghFindCursor; // idb
HWND ghWndHungWindow; // idb
int gShellIconMsg; // weak
UINT_PTR ghDllMenuPopup; // idb
UINT_PTR ghHandleMenuPopup; // idb
HMENU ghUserPopupMenuHandle; // idb
HWND ghWndFocusedLast; // idb
COLORREF gColorCustomized[16];
int dword_10CA8D8; // weak
int (__stdcall *SetLayeredWindowAttributes)(HWND hWnd, RECT *lprc, DWORD dwOpacity, DWORD dwFlagsD);
int (__stdcall *gpfnSHAutoComplete)(struct HWND__ *, unsigned int); // weak
char gbBitmapOnRight; // weak
int gyMouseDown; // idb
int gnToolbarHeight; // idb
HCURSOR ghResizeCursor; // idb
int ghSplitterCursor; // weak
int gdwRefreshTickCountLast; // weak
DWORD SessionId; // idb
_DWORD dword_10CA914; // idb
WCHAR CommandLine; // idb
HWND hWnd; // idb
COLORREF gColorOwnProcessStatic; // idb
COLORREF gColorServices; // idb
COLORREF gColorRelocatedDlls; // idb
COLORREF gColorJobs; // idb
COLORREF gColorDotNetProcesses; // idb
COLORREF gColorSuspendedProcess; // idb
HGDIOBJ gBrushOfOwnProcessStatic; // idb
HGDIOBJ gBrushServices; // idb
HGDIOBJ gBrushRelocatedDlls; // idb
HGDIOBJ gBrushJobs; // idb
HGDIOBJ gBrushDotNetProcesses; // idb
HGDIOBJ gBrushSuspendedProcess; // idb
COLORREF gColorNewObjectes; // idb
COLORREF gColorDeletedObjects; // idb
COLORREF gColorPackedImages; // idb
COLORREF gColorPagingListsStandby; // idb
COLORREF gColorWSShared; // idb
COLORREF gColorProtectedProcess; // idb
HGDIOBJ gBrushNewObjects; // idb
HGDIOBJ gBrushDeletedObjects; // idb
HGDIOBJ gBrushPackedImages; // idb
HGDIOBJ gBrushPagingListsStandby; // idb
HGDIOBJ gBrushImmsiveProcess; // idb
HGDIOBJ ho; // idb
int dword_10CAB88; // weak
HANDLE ghBackendQueryObjectThreadHandle; // idb
HANDLE ghExitEventForQueryObject; // idb
HANDLE ghQueryObjectEventDone; // idb
HANDLE ghProcessDuplicated; // idb
OBJECT_NAME_INFORMATION *gpObjectNameInformation;
int gulQueryObjectResult; // weak
char gbSupportExtendedSystemHandleInformation; // weak
WCHAR gszStringToFindLast[256];
const WCHAR gszStringToFind[256];
DWORD ppv; // idb
DWORD pdwValue4; // idb
DWORD pdwValue3; // idb
HINSTANCE ghMainInstance; // idb
int gdwProcessIdLast; // weak
FILETIME gCreateTimeLast;
int (__stdcall *NtSetInformationProcess)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int gdwTebAddressOffset; // weak
HWND ghFindDlg; // idb
HWND ghWndThreadStack; // idb
HWND ghWndListInFindDlg; // idb
PE_ImageItemVerified *gpPE_ImageItemVerified;
struct _RTL_CRITICAL_SECTION gServiceLock; // idb
WCHAR **gpszServiceNames;
DWORD gdwServiceReturned; // idb
int (__stdcall *I_QueryTagInformation)(PVOID Unknown, _SC_SERVICE_TAG_QUERY_TYPE Type, _SC_SERVICE_TAG_QUERY *Query);
int (__stdcall *NtQuerySystemInformation)(_SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
int (__stdcall *gpfn_NtOpenSymbolicLinkObject)(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
int (__stdcall *NtOpenDirectoryObject)(HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);
int (__stdcall *NtQueryObject)(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnedLength);
int (__stdcall *gpfn_NtQuerySymbolicLinkObject)(HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);
int RtlTimeToTimeFields; // weak
int NtQueryDirectoryObject; // weak
int (__stdcall *NtSetInformationProcess_0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *NtQuerySection)(HANDLE SectionHandle, SECTION_INFORMATION_CLASS InformationClass, PVOID InformationBuffer, ULONG InformationBufferSize, PULONG ResultLength);
int (__stdcall *NtQueryEvent)(HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);
int (__stdcall *NtQueryMutant)(HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);
int (__stdcall *NtQueryInformationProcess)(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
int (__stdcall *NtQueryInformationThread)(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);
int (__stdcall *NtQueryVirtualMemory)(HANDLE ProcessHandle, PVOID Address, MEMORY_INFORMATION_CLASS VirtualMemoryInformationClass, PVOID VirtualMemoryInformation, SIZE_T Length, PSIZE_T ResultLength);
int (__thiscall *NtSuspendThread)(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
int (__thiscall *NtResumeThread)(HANDLE ThreadHandle, PULONG SuspendCount);
int (__stdcall *NtSuspendProcess)(HANDLE ProcessHandle);
int (__stdcall *NtResumeProcess)(HANDLE ProcessHandle);
int (__stdcall *NtOpenThread)(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
int (__stdcall *GetThreadIdealProcessorEx)(HANDLE ThreadHandle, PPROCESSOR_NUMBER lpIdealProcessor);
PRTL_DEBUG_BUFFER (__stdcall *RtlCreateQueryDebugBuffer)(ULONG Size, BOOLEAN EventPair);
int (__stdcall *RtlQueryProcessDebugInformation)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *RtlDestroyQueryDebugBuffer)(_DWORD); // weak
int (__stdcall *SedDiscretionaryAclEditor)(HWND Owner, HINSTANCE Instance, PWCHAR MachineName, PACLDLGCONTROL AclDlgControl, PACLEDITCONTROL AclEditControl, PWCHAR ObjectName, FARPROC pfnAclChangeCallback, PVOID ChangeCallbackContext, PSECURITY_DESCRIPTOR ObjectSecurity, BOOLEAN NoReadPermission, BOOLEAN ReadOnly, PDWORD ChangeContextStatus, PVOID MustBeZero);
int (__stdcall *SedTakeOwnership)(HWND Owner, HINSTANCE Instance, PWCHAR MachineName, PWCHAR ObjectType, PWCHAR ObjectName, DWORD ObjectCount, FARPROC ChangeCallback, PVOID ChangeCallbackContext, PSECURITY_DESCRIPTOR ObjectSecurity, BOOLEAN NoReadPermission, BOOLEAN NoOwnerChange, PDWORD ChangeContextStatus, PACLHELPCONTROL HelpInfo, PVOID MustBeZero);
int (__stdcall *SedSystemAclEditor)(HWND Owner, HINSTANCE Instance, PWCHAR MachineName, PACLDLGCONTROL AclDlgControl, PACLEDITCONTROL AclEditControl, PWCHAR ObjectName, FARPROC ChangeCallback, PVOID ChangeCallbackContext, PSECURITY_DESCRIPTOR ObjectSecurity, BOOLEAN NoReadPermission, PDWORD ChangeContextStatus, PVOID MustBeZero);
int (__stdcall *gpfnProcessIdToSessionId)(_DWORD, _DWORD); // weak
int (__stdcall *SymInitialize)(HANDLE hProcess, PCSTR UserSearchPath, BOOL fInvadeProcess);
int (__cdecl *SymGetSymFromName)(HANDLE hProcess, PCSTR Name, PIMAGEHLP_SYMBOL Symbol);
int (__stdcall *SymCleanup)(HANDLE ProcessHandle);
int (__stdcall *SymSetOptions)(DWORD);
int (__stdcall *SymLoadModuleExW_1)(HANDLE hProcess, HANDLE hFile, PCWSTR ImageName, PCWSTR ModuleName, DWORD64 BaseOfDll, DWORD DllSize, PMODLOAD_DATA Data, DWORD Flags);
int (__stdcall *FindExecutableImage)(PCSTR FileName, PCSTR SymbolPath, PSTR ImageFilePath);
int (__thiscall *QueryProcessCycleTime)(HANDLE ProcessHandle, PULONG64 CycleTime);
int (__stdcall *GlobalMemoryStatusEx)(_DWORD); // weak
int (__stdcall *WinStationGetProcessSid)(HANDLE hServer, DWORD ProcessId, FILETIME ProcessStartTime, LPBYTE pBuffer, PDWORD pdwSize);
int GetProcessorSystemCycleTime; // weak
int (__stdcall *AllocateAndGetTcpExTableFromStack)(PVOID *ppTcpTable, BOOL bOrder, HANDLE hHeap, DWORD dwFlags, DWORD dwFamily);
int (__stdcall *AllocateAndGetUdpExTableFromStack)(PVOID *ppUdpTable, BOOL bOrder, HANDLE hHeap, DWORD dwFlags, DWORD dwFamily);
int (__stdcall *AllocateAndGetUdpExTable2FromStack)(PVOID *ppUDPTable, BOOL bOrder, HANDLE hHeap, DWORD dwFlags, DWORD dwFamily, UDP_TABLE_CLASS UdpTableClass);
int (__stdcall *AllocateAndGetTcpExTable2FromStack)(PVOID *ppTcpTable, BOOL bOrder, HANDLE hHeap, DWORD dwFlags, DWORD dwFamily, TCP_TABLE_CLASS TcpTableClass);
int (__stdcall *QueryThreadCycleTime)(HANDLE ThreadHandle, PULONG64 CycleTime);
int (__stdcall *IsHungAppWindow)(HWND hWnd);
int IsHungThread; // weak
int (__stdcall *GetLogicalProcessorInformationEx)(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, PDWORD ReturnedLength);
int SetThreadGroupAffinity; // weak
int (__stdcall *WTSEnumerateSessionsW)(HANDLE hServer, DWORD Reserved, DWORD Version, PWTS_SESSION_INFOW *ppSessionInfo, DWORD *pCount);
int (__stdcall *WTSDisconnectSession)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *WinStationConnectW)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *WinStationShadow)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *WTSQuerySessionInformationW)(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass, LPWSTR *ppBuffer, DWORD *pBytesReturned);
int (__stdcall *WTSLogoffSessio)(_DWORD, _DWORD, _DWORD); // weak
int (__stdcall *WTSSendMessageW)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int (__stdcall *WTSFreeMemory)(PWTS_SESSION_INFOW SessionInfo);
int (__stdcall *QueryIdleProcessorCycleTime)(PULONG Buffer, PULONG64 ProcessorIdleCycleTime);
int (__stdcall *ChangeWindowMessageFilter)(_DWORD, _DWORD); // weak
int CpuGetContext; // weak
int (__stdcall *GetPackageFullName)(HANDLE hProcess, UINT32 *packageFullNameLength, PWSTR packageFullName);
int (__stdcall *GetProcessDpiAwareness)(_DWORD, _DWORD); // weak
SYSTEM_PROCESS_INFORMATION *gpSystemProcessInfoLast;
int gnSystemProcessInfoLengthLast; // weak
FILETIME gTimeQuerySystemInfoLast; // weak
int (__stdcall *HungWindowFromGhostWindow)(HWND hWnd);
SYSTEM_PROCESS_INFORMATION *gpSystemProcessInfo;
ULONG gnSystemProcessInfoLength; // idb
SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION *gpSystemPerformanceInfo;
SYSTEM_INTERRUPT_INFORMATION *gpSystemInterruptInfo;
SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION *gpSystemProcessorCycleTimeInfo;
CSystemProcessInfoMap theSystemProcessInfoMap; // idb
SYSTEM_HANDLE_INFORMATION *gpSystemHandleInfo;
SYSTEM_HANDLE_INFORMATION *gpSystemHandleInfo2;
SYSTEM_HANDLE_INFORMATION *gpSystemHandleInfo3;
DWORD gdwServiceNamesLength; // idb
int (__stdcall *MiniDumpWriteDump)(HANDLE hProcess, DWORD ProcessId, HANDLE hFile, MINIDUMP_TYPE DumpType, PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, PMINIDUMP_CALLBACK_INFORMATION CallbackParam);
SC_HANDLE ghSCManagerHandle; // idb
wchar_t gpszObjectTypeNames[16384]; // idb
WCHAR gszDriverLinkName[];
WCHAR gszDriverName[256][25];
DWORD gdwLogicalProcessorInfoItemCount; // idb
SYSTEM_LOGICAL_PROCESSOR_INFORMATION *gpLogicalProcessorInfo;
volatile LONG gnRefCount; // idb
CGraphData **gppGraphInfo;
int dword_10DBA1C; // weak
CGraphData *gpGraphInfoOfMemory;
CGraphData *gpGraphInfoOfCPU;
CGraphData *gpGraphInfoOfGPU;
CGraphData *gpGraphInfoOfSystemMemory;
CGraphData *gpGraphInfoOfDedicatedMemory;
CGraphData *gpGraphInfoOfPhysicalMemory;
FILETIME gTimeQuerySystemInfo; // idb
__int64 qword_10DBA40; // weak
int (__stdcall *IsImmersiveProcess)(_DWORD); // weak
int (__stdcall *SHGetStockIconInfo)(_DWORD, _DWORD, _DWORD); // weak
LPWSTR gpszWindowText; // idb
rsize_t gdwWindowTextLength; // idb
char gbWindowTextFlags; // weak
HWND ghMainWndBackup;
CSystemProcessInfoMap gMap3; // idb
CSystemProcessInfoMap gMap2; // idb
TreeList_Item1 gTreeList_Item[3];
tagGraphInfo gIOGraphInfo;
tagGraphInfo gNetworkGraphInfo;
tagGraphInfo gDiskGraphInfo;
char byte_10DBC00; // weak
int (__stdcall *GetProcessMitigationPolicy)(HANDLE hProcess, _PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength);
int (__stdcall *GetProcessDEPPolicy)(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent);
PE_SYSTEM_HANDLE_TABLE_ENTRY_INFO stru_10DBC0C; // weak
int gbShowProcessTreeLast; // weak
__int64 qword_10DBC30; // weak
int dword_10DBC38[256]; // weak
int dword_10DC038; // weak
int dword_10DC03C; // weak
int dword_10DC040; // weak
int dword_10DC044; // weak
int dword_10DC048; // weak
int dword_10DC04C; // weak
int dword_10DC050; // weak
struct _ACLDLGCONTROL gAclDlgControl; // idb
struct _ACLEDITCONTROL gAclEditControl; // idb
char byte_10DC080; // weak
char byte_10DC081; // weak
char byte_10DC082; // weak
char byte_10DC083; // weak
char byte_10DC084; // weak
char byte_10DC085; // weak
WCHAR gObjectName[1024]; // idb
wchar_t gObjectType; // idb
HANDLE ghSourceProcessHandle; // idb
int nWidth; // idb
int nHeight; // idb
struct tagRECT Rect; // idb
WORD pnWidths; // idb
__int16 word_10DD0A6; // weak
__int16 word_10DD0A8; // weak
__int16 word_10DD0AA; // weak
__int16 word_10DD0AC; // weak
int dword_10DD0B0; // weak
wchar_t sstrFindWhat[];
tagFINDREPLACEW gFindReplaceItem; // idb
DWORD sbFound; // idb
wchar_t word_10E10E8; // idb
int gdwSymbolAddressOfMmMaximumNonPagedPoolInBytes; // weak
int gdwSymbolAddressOfMmSizeOfPagedPoolInBytes; // weak
HANDLE ghProcess; // idb
SYSTEM_PERFORMANCE_INFORMATION gSystenPerformanceInfoInProcSecurity;
int dword_10E527C; // weak
int dword_10E5294; // weak
int dword_10E52A0; // weak
int dword_10E52A8; // weak
__int64 qword_10E5378; // weak
__int64 qword_10E5380; // weak
_UNKNOWN unk_10E5388; // weak
__int64 qword_10E5390; // weak
__int64 qword_10E5398; // weak
__int64 qword_10E53A0; // weak
int dword_10E53A8; // weak
int dword_10E53AC; // weak
int dword_10E53B0; // weak
__int16 gwWidthsOfListInFindDlg[4]; // weak
int dword_10E54C8; // weak
HCURSOR hCursor; // idb
int dword_10E54D0; // weak
int gdwRefreshRateLast; // weak
int gnWidthFindDlg; // idb
int gnHeightFindDlg; // idb
struct tagRECT gRectFindDlg; // idb
int ghMainIcon; // weak
char gbSearching; // weak
HANDLE ghThreadHandleInFindDlg; // idb
int dword_10E54FC; // weak
wchar_t word_10E5500; // idb
HINSTANCE hInstance; // idb
HINSTANCE shWaitCursor; // idb
char ATL::CAtlBaseModule::m_bInitFailed; // weak
HWND ghWndReBar; // idb
int gnStatusBarItemCount; // weak
HGDIOBJ dword_10E5724; // idb
int dword_10E5728; // weak
int dword_10E572C; // weak
HDC hdc; // idb
int dword_10E5734; // weak
int dword_10E5738; // weak
char byte_10E573C; // weak
int dword_10E5740; // weak
struct _RTL_CRITICAL_SECTION stru_10E5744; // idb
HANDLE ghEventHandle; // idb
int ghThreadHandle; // weak
HANDLE ghEventHandle2; // idb
int ghThreadHandle2; // weak
HANDLE ghEventHandle3; // idb
int ghThreadHandle3; // weak
char gbAgreenmentLicensed; // weak
char byte_10E5775; // weak
tagHttpInfo gHttpInfo; // idb
void *dword_10E579C; // idb
int dword_10E57A0; // weak
EventList *off_10E57A4; // idb
int dword_10E57A8; // weak
EventList *off_10E57AC; // idb
int dword_10E57B0; // weak
char byte_10E57B4; // weak
int HtmlHelp; // weak
int gbHHCtrlModuleInited; // weak
HMODULE ghHHCtrlModule; // idb
_UNKNOWN unk_10E57D8; // weak
struct _RTL_CRITICAL_SECTION stru_10E57E0; // idb
int dword_10E5840; // weak
bool dword_10E5844; // idb
_UNKNOWN unk_10E585A; // weak
int dword_10E5864; // weak
int dword_10E5868; // idb
_UNKNOWN unk_10E58F0; // weak
_UNKNOWN unk_10E58F3; // weak
CAtlBaseModule ATL::_AtlBaseModule;
PVOID dword_10E5EBC; // idb
PVOID dword_10E5EC4; // idb
int dword_10E5EC8; // weak
PVOID dword_10E6628; // idb
PVOID dword_10E663C; // idb
int dword_10E6648; // weak
PVOID dword_10E694C; // idb
PVOID dword_10E6950; // idb
PVOID dword_10E6954; // idb
PVOID dword_10E6958; // idb
PVOID dword_10E695C; // idb
int dword_10E69A4; // weak
int dword_10E69AC; // weak

